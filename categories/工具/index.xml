<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工具 on hello world</title><link>https://sunpe.github.io/categories/%E5%B7%A5%E5%85%B7/</link><description>Recent content in 工具 on hello world</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright &amp;copy; 2022 - sunpeng</copyright><lastBuildDate>Sat, 29 Feb 2020 22:00:00 +0800</lastBuildDate><atom:link href="https://sunpe.github.io/categories/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>grafana plugin 查询结果列名 bug 排查</title><link>https://sunpe.github.io/posts/2022-11-21-grafana-datasource-plugin-column-name-bug/</link><pubDate>Mon, 21 Nov 2022 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2022-11-21-grafana-datasource-plugin-column-name-bug/</guid><description>&lt;h2 id="问题描述">问题描述&lt;/h2>&lt;p>有用户反馈，使用 grafanaplugin ，在 alerting 页面数据查询时，展示的列名不对。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/grafana_plugin_column_name_bug/1.png" alt="">&lt;/p>&lt;p>查看页面的返回数据，第二列的列名的确有问题。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/grafana_plugin_column_name_bug/2.jpeg" alt="">&lt;/p>&lt;h2 id="问题排查">问题排查&lt;/h2>&lt;p>首先怀疑是插件代码的bug，添加日志排查插件 &lt;code>QueryData&lt;/code> 方法输出，发现输出的数据没问题。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/grafana_plugin_column_name_bug/3.jpeg" alt="">&lt;/p>&lt;p>由此怀疑可能是 grafana 内部的转换逻辑引起的。&lt;/p>&lt;p>下载 grafana 源码，看到有 ngalert 包，应该是 8.0 之后加的 unified alert 代码实现，相关代码应该是在这里。grafana 日志级别改成 debug，希望能打出来部分有用的日志，最终找到了插件返回之后就打印这行日志。&lt;/p>&lt;pre tabindex="0">&lt;code>DBUG [11-22|16:43:12] expression datasource query (seriesSet) logger=expr query=A&lt;/code>&lt;/pre>&lt;p>全局搜索，这行日志在 expr 包下面，顺着调用关系往上找，可以找到 ngalert/eval/eval.go，现在 unified alert 的调用关系应该就比较清晰了。&lt;/p>&lt;p>nglaert 的调度器顶层接口是 &lt;a href="https://github.com/grafana/grafana/blob/main/pkg/services/ngalert/schedule/schedule.go#L32">ScheduleService&lt;/a>，调度器会一层一层的调用 &lt;a href="https://github.com/grafana/grafana/blob/main/pkg/services/ngalert/eval/eval.go#L40">ConditionEvaluator&lt;/a> 接口的 Execute 方法，该方法会调用插件的 gRPC 接口查询数据，然后调用 eval 包进行数据转换。顺藤摸瓜，最终执行数据转换的方法是 Node 接口的 &lt;a href="https://github.com/grafana/grafana/blob/main/pkg/expr/graph.go#L41">Execute&lt;/a> 方法，该方法有两个实现，分别是 CMDNode 和 DSNode，而 debug 日志是 DSNode 打印的，所以进到 DSNode 的 Execute 方法进行排查。该方法的 284 行调用的 &lt;a href="https://github.com/grafana/grafana/blob/main/pkg/expr/nodes.go#L407">WideToMany&lt;/a> 进行数据格式转换，继续排查，最终终于定位到问题。&lt;/p>&lt;p>数据转换时，会调用 &lt;a href="https://github.com/grafana/grafana/blob/main/pkg/expr/mathexp/type_series.go#L26">SeriesFromFrame&lt;/a> 函数，该函数有&lt;a href="https://github.com/grafana/grafana/blob/main/pkg/expr/mathexp/type_series.go#L122">如下代码&lt;/a>：&lt;/p>&lt;pre tabindex="0">&lt;code>// We use the frame name as series name if the frame name is setif s.Frame.Name != &amp;#34;&amp;#34; { s.Frame.Fields[seriesTypeValIdx].Name = s.Frame.Name}&lt;/code>&lt;/pre>&lt;p>插件代码中，如果设置了 Frame 的 name， 会拿 Frame.Name 覆盖数据列的 Name。&lt;/p></description></item><item><title>consul做grpc服务注册和服务发现</title><link>https://sunpe.github.io/posts/2022-10-15-grpc-with-consol/</link><pubDate>Sat, 15 Oct 2022 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2022-10-15-grpc-with-consol/</guid><description>&lt;p>分布式服务通常有多个实例，按负载均衡在服务端侧或客户端侧可以将服务的负载均衡分为服务端负载均衡和客户端负载均衡。&lt;/p>&lt;h2 id="服务端负载">服务端负载&lt;/h2>&lt;p>服务端通常依赖 HA Proxy 组件实现负载均衡，比如 nginx 等，而且 nginx 可以做 grpc 的反向代理，整体结构如图 1 所示。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/grpc_with_consul/1.png" alt="">&lt;/p>&lt;p>图1 nginx 做 grpc 反向代理&lt;/p>&lt;p>这种方式不是本文探讨的重点，具体实现和配置可以参考相关 &lt;a href="https://www.nginx.com/blog/nginx-1-13-10-grpc/">nginx blog&lt;/a>。&lt;/p>&lt;h2 id="客户端负载">客户端负载&lt;/h2>&lt;p>客户端负载依赖服务注册中心，服务端启动时，向注册中心注册服务的地址和端口，客户端启动时从注册中心拉取服务的地址，整体结构如图 2 所示。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/grpc_with_consul/2.png" alt="">&lt;/p>&lt;p>图2 服务注册和服务发现&lt;/p>&lt;p>grpc 提供了 &lt;a href="https://github.com/grpc/grpc-go/tree/master/examples/helloworld">helloworld&lt;/a> demo。&lt;/p>&lt;p>客户端通过 &lt;code>grpc.DialContext&lt;/code> 创建 grpc 连接，grpc 的 &lt;a href="https://github.com/grpc/grpc-go/blob/master/resolver/resolver.go">resolver&lt;/a> 解析 target 参数获得服务端地址。这个 demo 的 target 为 &lt;code>localhost:50051&lt;/code>，这种格式的 target 会使用默认的 passthrough 解析器解析，即将 target 地址直接返回给&lt;code>r.cc&lt;/code>， grpc 客户端利用这个地址建立 grpc 链接。&lt;/p>&lt;p>target 的解析过程：&lt;/p>&lt;ul>&lt;li>解析 target 的 scheme&lt;/li>&lt;li>通过 scheme 获取对应的 resolver builder&lt;/li>&lt;li>通过 resolver builder 创建 resolver&lt;/li>&lt;li>resolver 解析 target 获取服务端服务（ip + port）列表&lt;/li>&lt;/ul>&lt;p>grpc 提供了 &amp;ldquo;passthrough&amp;rdquo;（默认） 和 &amp;ldquo;dns&amp;rdquo; 两种 scheme resolver实现，可以参考&lt;a href="https://github.com/grpc/grpc/blob/master/doc/naming.md">name resolve 文档&lt;/a>。重新实现 resolver 即可自定义 target 解析策略，从而实现服务发现。&lt;/p>&lt;h2 id="consul-做-grpc-服务注册发现中心">consul 做 grpc 服务注册发现中心&lt;/h2>&lt;h3 id="target-格式">target 格式&lt;/h3>&lt;p>设计 target URL 格式：&lt;/p>&lt;pre tabindex="0">&lt;code>consul://ip:port/${group}/${service_name}&lt;/code>&lt;/pre>&lt;p>grpc target 结构体定义：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Target&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Scheme&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Authority&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Endpoint&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">URL&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>target 的 scheme 为 &amp;ldquo;consul&amp;rdquo;, Endpoint 为 &amp;ldquo;ip:port&amp;rdquo;。注册到 consul 的服务必须包含「服务名」，这里是 &amp;ldquo;service_name&amp;rdquo;，服务可以分组（tag）。&lt;/p>&lt;h3 id="服务端实现">服务端实现&lt;/h3>&lt;p>服务端启动后，需要向 consul 注册服务的 ip、端口、分组（tag） 和 服务名。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">consul&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">api&lt;/span>.&lt;span style="color:#a6e22e">NewClient&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">api&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{&lt;span style="color:#a6e22e">Address&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;127.0.0.1:8500&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">Transport&lt;/span>: &lt;span style="color:#a6e22e">cleanhttp&lt;/span>.&lt;span style="color:#a6e22e">DefaultPooledTransport&lt;/span>()})&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">consul&lt;/span>.&lt;span style="color:#a6e22e">Agent&lt;/span>().&lt;span style="color:#a6e22e">ServiceRegister&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">api&lt;/span>.&lt;span style="color:#a6e22e">AgentServiceRegistration&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ID&lt;/span>: &lt;span style="color:#a6e22e">uuid&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(),&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#a6e22e">service&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Tags&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">group&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Port&lt;/span>: &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">port&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Address&lt;/span>: &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">ip&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>consul 支持 grpc health check，可以参考 &lt;a href="https://github.com/grpc/grpc/blob/master/doc/health-checking.md">health check 文档&lt;/a>，实现 health check 服务。&lt;/p>&lt;h3 id="客户端实现">客户端实现&lt;/h3>&lt;p>客户端需要实现相应的 resolver。这里需要实现 &lt;code>resolver.Builder&lt;/code> 接口和 &lt;code>resolver.Resolver&lt;/code> 接口。&lt;/p>&lt;p>&lt;code>Builder&lt;/code> 接口实现如下：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resolver&lt;/span>.&lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">consulBuilder&lt;/span>{})&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">consulBuilder&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">consulBuilder&lt;/span>) &lt;span style="color:#a6e22e">Build&lt;/span>(&lt;span style="color:#a6e22e">target&lt;/span> &lt;span style="color:#a6e22e">resolver&lt;/span>.&lt;span style="color:#a6e22e">Target&lt;/span>, &lt;span style="color:#a6e22e">cc&lt;/span> &lt;span style="color:#a6e22e">resolver&lt;/span>.&lt;span style="color:#a6e22e">ClientConn&lt;/span>, &lt;span style="color:#a6e22e">opts&lt;/span> &lt;span style="color:#a6e22e">resolver&lt;/span>.&lt;span style="color:#a6e22e">BuildOptions&lt;/span>) (&lt;span style="color:#a6e22e">resolver&lt;/span>.&lt;span style="color:#a6e22e">Resolver&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">consulHost&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>.&lt;span style="color:#a6e22e">Host&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">urlPath&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>.&lt;span style="color:#a6e22e">Path&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">urlPath&lt;/span> = &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Trim&lt;/span>(&lt;span style="color:#a6e22e">urlPath&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ps&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Split&lt;/span>(&lt;span style="color:#a6e22e">urlPath&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">group&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ps&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">serviceName&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ps&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">consulClient&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">api&lt;/span>.&lt;span style="color:#a6e22e">NewClient&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">api&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{&lt;span style="color:#a6e22e">Address&lt;/span>: &lt;span style="color:#a6e22e">consulHost&lt;/span>, &lt;span style="color:#a6e22e">Transport&lt;/span>: &lt;span style="color:#a6e22e">cleanhttp&lt;/span>.&lt;span style="color:#a6e22e">DefaultPooledTransport&lt;/span>()})&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;resolve consul path error %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">consulResolver&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">client&lt;/span>: &lt;span style="color:#a6e22e">consulClient&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cc&lt;/span>: &lt;span style="color:#a6e22e">cc&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">disableServiceConfig&lt;/span>: &lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">DisableServiceConfig&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">group&lt;/span>: &lt;span style="color:#a6e22e">group&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">serviceName&lt;/span>: &lt;span style="color:#a6e22e">serviceName&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// subscribe and watch&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">watch&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">consulBuilder&lt;/span>) &lt;span style="color:#a6e22e">Scheme&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;consul&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>builder 接口返回 resolver，在 &lt;code>ResolveNow&lt;/code> 方法中调用 consul api 获取服务端地址。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">services&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Health&lt;/span>().&lt;span style="color:#a6e22e">Service&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">serviceName&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">group&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">api&lt;/span>.&lt;span style="color:#a6e22e">QueryOptions&lt;/span>{&lt;span style="color:#a6e22e">WaitIndex&lt;/span>: &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">lastIndex&lt;/span>})&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">addresses&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#a6e22e">resolver&lt;/span>.&lt;span style="color:#a6e22e">Address&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">services&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">services&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">resolver&lt;/span>.&lt;span style="color:#a6e22e">Address&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Addr&lt;/span>: &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%v:%v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Service&lt;/span>.&lt;span style="color:#a6e22e">Address&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Service&lt;/span>.&lt;span style="color:#a6e22e">Port&lt;/span>),&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ServerName&lt;/span>: &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">serviceName&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">addresses&lt;/span> = append(&lt;span style="color:#a6e22e">addresses&lt;/span>, &lt;span style="color:#a6e22e">addr&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">cc&lt;/span>.&lt;span style="color:#a6e22e">UpdateState&lt;/span>(&lt;span style="color:#a6e22e">resolver&lt;/span>.&lt;span style="color:#a6e22e">State&lt;/span>{&lt;span style="color:#a6e22e">Addresses&lt;/span>: &lt;span style="color:#a6e22e">addresses&lt;/span>})&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>详细代码可以参考「代码实现」章节。&lt;/p>&lt;h3 id="测试一下">测试一下&lt;/h3>&lt;ul>&lt;li>启动 consul：&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>consul agent --dev&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>启动服务端：&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>go run ./example/server/server.go&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://sunpe.github.io/images/grpc_with_consul/3.png" alt="">&lt;/p>&lt;ul>&lt;li>启动客户端：&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>go run ./example/client/client.go&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="代码实现">代码实现&lt;/h2>&lt;ul>&lt;li>go 版本代码实现： &lt;a href="https://github.com/sunpe/grpc_with_consul_go">https://github.com/sunpe/grpc_with_consul_go&lt;/a>&lt;/li>&lt;li>java 版本代码实现： &lt;a href="https://github.com/sunpe/grpc_with_consul_java">https://github.com/sunpe/grpc_with_consul_java&lt;/a>&lt;/li>&lt;/ul>&lt;h2 id="参考">参考&lt;/h2>&lt;ol>&lt;li>&lt;a href="https://www.nginx.com/blog/nginx-1-13-10-grpc/">https://www.nginx.com/blog/nginx-1-13-10-grpc/&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/grpc/grpc-go/tree/master/examples/helloworld">https://github.com/grpc/grpc-go/tree/master/examples/helloworld&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/grpc/grpc/blob/master/doc/naming.md">https://github.com/grpc/grpc/blob/master/doc/naming.md&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/grpc/grpc/blob/master/doc/health-checking.md">https://github.com/grpc/grpc/blob/master/doc/health-checking.md&lt;/a>&lt;/li>&lt;/ol></description></item><item><title>Gin 开启pprof</title><link>https://sunpe.github.io/posts/2022-07-20-gin-open-pprof/</link><pubDate>Wed, 20 Jul 2022 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2022-07-20-gin-open-pprof/</guid><description>&lt;p>在 gin 中开启pprof代码示例：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">router&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">engine&lt;/span>.&lt;span style="color:#a6e22e">Group&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/debug/pprof&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">WrapF&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/cmdline&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">WrapF&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Cmdline&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/profile&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">WrapF&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Profile&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">POST&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/symbol&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">WrapF&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Symbol&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/symbol&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">WrapF&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Symbol&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/trace&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">WrapF&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Trace&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/allocs&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">WrapH&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;allocs&amp;#34;&lt;/span>)))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/block&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">WrapH&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;block&amp;#34;&lt;/span>)))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/goroutine&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">WrapH&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;goroutine&amp;#34;&lt;/span>)))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/heap&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">WrapH&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;heap&amp;#34;&lt;/span>)))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/mutex&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">WrapH&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;mutex&amp;#34;&lt;/span>)))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/threadcreate&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">WrapH&lt;/span>(&lt;span style="color:#a6e22e">pprof&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;threadcreate&amp;#34;&lt;/span>)))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此外，可以引用 &lt;code>https://github.com/gin-contrib/pprof&lt;/code> 包实现。&lt;/p></description></item><item><title>golang map</title><link>https://sunpe.github.io/posts/2021-11-24-golang-map/</link><pubDate>Wed, 24 Nov 2021 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2021-11-24-golang-map/</guid><description>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_map/1.png" alt="">&lt;/p>&lt;h2 id="hmap">hmap&lt;/h2>&lt;p>map 是引用类型，指针指向 hmap 结构体，hmap 的 &lt;a href="https://github.com/golang/go/blob/master/src/runtime/map.go#L116">源码&lt;/a> 如下：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">hmap&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// # live cells == size of map. Must be first (used by len() builtin)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">flags&lt;/span> &lt;span style="color:#66d9ef">uint8&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">B&lt;/span> &lt;span style="color:#66d9ef">uint8&lt;/span> &lt;span style="color:#75715e">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">noverflow&lt;/span> &lt;span style="color:#66d9ef">uint16&lt;/span> &lt;span style="color:#75715e">// approximate number of overflow buckets; see incrnoverflow for details&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">hash0&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span> &lt;span style="color:#75715e">// hash seed&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">buckets&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span> &lt;span style="color:#75715e">// array of 2^B Buckets. may be nil if count==0.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">oldbuckets&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span> &lt;span style="color:#75715e">// previous bucket array of half the size, non-nil only when growing&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">nevacuate&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span> &lt;span style="color:#75715e">// progress counter for evacuation (buckets less than this have been evacuated)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">extra&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">mapextra&lt;/span> &lt;span style="color:#75715e">// optional fields&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>count 表示map中元素个数&lt;/li>&lt;li>flags 是一个状态标识，有4个值，分别是&lt;/li>&lt;/ul>&lt;pre tabindex="0">&lt;code>iterator = 1 // there may be an iterator using bucketsoldIterator = 2 // there may be an iterator using oldbucketshashWriting = 4 // a goroutine is writing to the mapsameSizeGrow = 8 // the current map growth is to a new map of the same size&lt;/code>&lt;/pre>&lt;ul>&lt;li>B 表示桶个数的对数&lt;/li>&lt;li>noverflow 是溢出桶个数的近似值&lt;/li>&lt;li>buckets 指向 bmap 数组&lt;/li>&lt;li>oldbuckets 和扩容有关，指向扩容时的旧桶&lt;/li>&lt;/ul>&lt;h2 id="bmap">bmap&lt;/h2>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_map/2.png" alt="">&lt;/p>&lt;p>hmap 中的 buckets 和 oldbuckets 指向的是 bmap 数组，一个 bmap 可以放 8 个元素，bmap &lt;a href="https://github.com/golang/go/blob/master/src/runtime/map.go#L150">源码&lt;/a>，编译过程会加料，最终 bmap 结构体会是这样的：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">bmap&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tophash&lt;/span> [&lt;span style="color:#ae81ff">8&lt;/span>]&lt;span style="color:#66d9ef">uint8&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">keys&lt;/span> [&lt;span style="color:#ae81ff">8&lt;/span>]&lt;span style="color:#a6e22e">keytype&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">values&lt;/span> [&lt;span style="color:#ae81ff">8&lt;/span>]&lt;span style="color:#a6e22e">valuetype&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pad&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">overflow&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>tophash 存储 hash 值的高8位，需要注意的是，tophash 值小于等于 5 存储的是状态。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">emptyRest&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e">// this cell is empty, and there are no more non-empty cells at higher indexes or overflows.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">emptyOne&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#75715e">// this cell is empty&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">evacuatedX&lt;/span> = &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#75715e">// key/elem is valid. Entry has been evacuated to first half of larger table.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">evacuatedY&lt;/span> = &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#75715e">// same as above, but evacuated to second half of larger table.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">evacuatedEmpty&lt;/span> = &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#75715e">// cell is empty, bucket is evacuated.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">minTopHash&lt;/span> = &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#75715e">// minimum tophash for a normal filled cell.&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 key 的 hash 值和 B-1 做与运算，判断元素落在哪个桶中，在通过 tophash 确定在桶的位置，然后根据 tophash 判断 bucket 的该位置是否可用，如果 8 个位置都不可用，则会链出一个指针指向一个新的 bmap 作为溢出桶。&lt;/p>&lt;p>当 map 的 key 和 value 都不是指针，并且 size 都小于 128 字节的时候，会把 bmap 标记为不含指针，以避免 GC 扫描整个 hmap。这时候 overflow 指针会被放到 mapextract 中，以保证 bmap 中不包含指针。&lt;/p>&lt;h2 id="loadfactor">loadfactor&lt;/h2>&lt;p>golang map 的 loadfactor 为 6.5。&lt;/p>&lt;h2 id="make-map">make map&lt;/h2>&lt;p>创建 map 会调用 makemap 函数，函数 &lt;a href="https://github.com/golang/go/blob/master/src/runtime/map.go#L304">源码&lt;/a>。&lt;/p>&lt;p>创建 map 的流程如下：&lt;/p>&lt;ul>&lt;li>计算 B&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">B&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> uint8(&lt;span style="color:#ae81ff">0&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">overLoadFactor&lt;/span>(&lt;span style="color:#a6e22e">hint&lt;/span>, &lt;span style="color:#a6e22e">B&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">B&lt;/span>&lt;span style="color:#f92672">++&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span> = &lt;span style="color:#a6e22e">B&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>如果 B != 0, 则申请桶空间&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">nextOverflow&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">bmap&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">buckets&lt;/span>, &lt;span style="color:#a6e22e">nextOverflow&lt;/span> = &lt;span style="color:#a6e22e">makeBucketArray&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">nextOverflow&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">extra&lt;/span> = new(&lt;span style="color:#a6e22e">mapextra&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">extra&lt;/span>.&lt;span style="color:#a6e22e">nextOverflow&lt;/span> = &lt;span style="color:#a6e22e">nextOverflow&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="mapaccess">mapaccess&lt;/h2>&lt;p>由于读取 map 的返回值有三种，所以函数有三个，分别对应着返回单个值、返回值和bool，返回key和value。 &lt;a href="https://github.com/golang/go/blob/master/src/runtime/map.go#L395">mapaccess1&lt;/a>, &lt;a href="https://github.com/golang/go/blob/master/src/runtime/map.go#L456">mapaccess2&lt;/a>, &lt;a href="https://github.com/golang/go/blob/master/src/runtime/map.go#L518">mapaccessK&lt;/a>。&lt;/p>&lt;p>读取流程如下：&lt;/p>&lt;ul>&lt;li>计算 key 的 hash&lt;/li>&lt;li>用 key 的 hash 的低 B 位定位桶&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">hash&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">hasher&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, uintptr(&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">hash0&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bucketMask&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">bmap&lt;/span>)(&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">buckets&lt;/span>, (&lt;span style="color:#a6e22e">hash&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">m&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>uintptr(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">bucketsize&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>判断是否需要从旧桶里找&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">oldbuckets&lt;/span>; &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">sameSizeGrow&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">&amp;gt;&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">oldb&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">bmap&lt;/span>)(&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>, (&lt;span style="color:#a6e22e">hash&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">m&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>uintptr(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">bucketsize&lt;/span>)))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">evacuated&lt;/span>(&lt;span style="color:#a6e22e">oldb&lt;/span>) { &lt;span style="color:#75715e">// 判断 top hash 是不是 evacuatedX 或 evacuatedY&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> = &lt;span style="color:#a6e22e">oldb&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>取 top hash&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">top&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tophash&lt;/span>(&lt;span style="color:#a6e22e">hash&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>通过 top hash 和 key 在桶内查找 key&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> ; &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>; &lt;span style="color:#a6e22e">b&lt;/span> = &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">overflow&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> uintptr(&lt;span style="color:#ae81ff">0&lt;/span>); &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">bucketCnt&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">tophash&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">top&lt;/span> { &lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">tophash&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">emptyRest&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span> &lt;span style="color:#a6e22e">bucketloop&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>), &lt;span style="color:#a6e22e">dataOffset&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">*&lt;/span>uintptr(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">keysize&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">indirectkey&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">k&lt;/span> = &lt;span style="color:#f92672">*&lt;/span>((&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>)(&lt;span style="color:#a6e22e">k&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">key&lt;/span>.&lt;span style="color:#a6e22e">equal&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>), &lt;span style="color:#a6e22e">dataOffset&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">bucketCnt&lt;/span>&lt;span style="color:#f92672">*&lt;/span>uintptr(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">keysize&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">*&lt;/span>uintptr(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">elemsize&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">indirectelem&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span> = &lt;span style="color:#f92672">*&lt;/span>((&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>)(&lt;span style="color:#a6e22e">e&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_map/3.png" alt="">&lt;/p>&lt;h2 id="mapassign">mapassign&lt;/h2>&lt;p>写入数据会调用 mapassign 函数，写数据和读数据的流程相似，只不过多了扩容判断。&lt;/p>&lt;ul>&lt;li>首先判断是否是并发写入， 并设置 flags&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">flags&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">hashWriting&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fatal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;concurrent map writes&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">flags&lt;/span> ^= &lt;span style="color:#a6e22e">hashWriting&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>判断是否需要扩容&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bucket&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">hash&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">bucketMask&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">growing&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">growWork&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">h&lt;/span>, &lt;span style="color:#a6e22e">bucket&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>定位桶和计算hash top&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">bmap&lt;/span>)(&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">buckets&lt;/span>, &lt;span style="color:#a6e22e">bucket&lt;/span>&lt;span style="color:#f92672">*&lt;/span>uintptr(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">bucketsize&lt;/span>)))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">top&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tophash&lt;/span>(&lt;span style="color:#a6e22e">hash&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>遍历桶找到插入的位置&lt;/li>&lt;li>如果key 存在，则更新&lt;/li>&lt;li>修改flags&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">flags&lt;/span> &lt;span style="color:#f92672">&amp;amp;^=&lt;/span> &lt;span style="color:#a6e22e">hashWriting&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="mapdelete">mapdelete&lt;/h2>&lt;p>删除操作调用 &lt;a href="https://github.com/golang/go/blob/master/src/runtime/map.go#L695">mapdelete&lt;/a> 函数。&lt;/p>&lt;ul>&lt;li>写保护&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">flags&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">hashWriting&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fatal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;concurrent map writes&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">flags&lt;/span> ^= &lt;span style="color:#a6e22e">hashWriting&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>确定桶的位置&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">hash&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">hasher&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, uintptr(&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">hash0&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bucket&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">hash&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">bucketMask&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>判断扩容&lt;/li>&lt;li>遍历桶寻找key，找到key则删除元素并更新 tophash&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">indirectelem&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>)(&lt;span style="color:#a6e22e">e&lt;/span>) = &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">ptrdata&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memclrHasPointers&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memclrNoHeapPointers&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">tophash&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">emptyOne&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>解除写保护&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">flags&lt;/span> &lt;span style="color:#f92672">&amp;amp;^=&lt;/span> &lt;span style="color:#a6e22e">hashWriting&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="扩容">扩容&lt;/h2>&lt;p>&lt;a href="https://github.com/golang/go/blob/master/src/runtime/map.go#L1041">扩容代码&lt;/a>&lt;/p>&lt;ul>&lt;li>如果 loadfactor 超过6.5，触发翻倍扩容&lt;/li>&lt;li>如果溢出桶过多则触发等量扩容&lt;/li>&lt;/ul>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">tooManyOverflowBuckets&lt;/span>(&lt;span style="color:#a6e22e">noverflow&lt;/span> &lt;span style="color:#66d9ef">uint16&lt;/span>, &lt;span style="color:#a6e22e">B&lt;/span> &lt;span style="color:#66d9ef">uint8&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">15&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">B&lt;/span> = &lt;span style="color:#ae81ff">15&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">noverflow&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> uint16(&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>(&lt;span style="color:#a6e22e">B&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#ae81ff">15&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>&lt;li>扩容过程为渐进式扩容&lt;/li>&lt;/ul></description></item><item><title>golang gzip 使用过程中问题排查</title><link>https://sunpe.github.io/posts/2021-08-17-golang-gzip-troubleshooting/</link><pubDate>Tue, 17 Aug 2021 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2021-08-17-golang-gzip-troubleshooting/</guid><description>&lt;p>在使用 golang 的 gzip 包压缩数据时发现一个坑，出问题的代码如下：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 代码1&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">compressV1&lt;/span>([]byte(&lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>)))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4&lt;/span> &lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">compressV1&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) []&lt;span style="color:#66d9ef">byte&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gzip&lt;/span>.&lt;span style="color:#a6e22e">NewWriter&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() { &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>() }()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">9&lt;/span> &lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">12&lt;/span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">13&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Flush&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Bytes&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">16&lt;/span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出的结果:&lt;/p>&lt;pre tabindex="0">&lt;code>[31 139 8 0 0 0 0 0 0 255 42 73 45 46 1 0 0 0 255 255]&lt;/code>&lt;/pre>&lt;p>gzip 的 close 函数, 如「代码2」所示，代码会在 15 行的 &lt;code>compressor.Close&lt;/code> 中写入 5 位 StoredHeader 信息，在 19 行写入 4 位 crc 信息，20 行写入 4 位数据长度信息。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 代码2&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">z&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Writer&lt;/span>) &lt;span style="color:#a6e22e">Close&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">err&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">closed&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">7&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">closed&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">wroteHeader&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">err&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">13&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">14&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">compressor&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">16&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">17&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">err&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">18&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">19&lt;/span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">PutUint32&lt;/span>(&lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#ae81ff">4&lt;/span>], &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">digest&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#a6e22e">le&lt;/span>.&lt;span style="color:#a6e22e">PutUint32&lt;/span>(&lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">buf&lt;/span>[&lt;span style="color:#ae81ff">4&lt;/span>:&lt;span style="color:#ae81ff">8&lt;/span>], &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#ae81ff">8&lt;/span>])&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">22&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">z&lt;/span>.&lt;span style="color:#a6e22e">err&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">23&lt;/span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们写 golang 时通常喜欢在 &lt;code>defer&lt;/code> 中释放资源，就像是「代码1」中的第 8 行那样，defer 会在 return 之后运行，所以导致 gzip 的 13 位 footer 数据没有写入。稍微修改一下代码，得到「代码3」，在 return 前 close 掉 gzip 的 writer，就可以得到正确的结果了。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 代码 3&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">compressV2&lt;/span>([]byte(&lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>)))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">compressV2&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) []&lt;span style="color:#66d9ef">byte&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gzip&lt;/span>.&lt;span style="color:#a6e22e">NewWriter&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Flush&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Bytes&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>「代码3」输出如下:&lt;/p>&lt;pre tabindex="0">&lt;code>[31 139 8 0 0 0 0 0 0 255 42 73 45 46 1 0 0 0 255 255 1 0 0 255 255 12 126 127 216 4 0 0 0]&lt;/code>&lt;/pre>&lt;p>如果直接返回 Buffer 会怎么样。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 代码4&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">compressV3&lt;/span>([]byte(&lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Bytes&lt;/span>())&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">compressV3&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gzip&lt;/span>.&lt;span style="color:#a6e22e">NewWriter&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() { &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>() }()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Flush&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>依然在 &lt;code>defer&lt;/code> 中关闭 gzip 的 writer，返回 &lt;code>bytes.Buffer&lt;/code>。由于返回的是值，所以输出依然是错误的。代码输出如下&lt;/p>&lt;pre tabindex="0">&lt;code>[31 139 8 0 0 0 0 0 0 255 42 73 45 46 1 0 0 0 255 255]&lt;/code>&lt;/pre>&lt;p>继续修改代码。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 代码5&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">compressV4&lt;/span>([]byte(&lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>)).&lt;span style="color:#a6e22e">Bytes&lt;/span>())&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">compressV4&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gzip&lt;/span>.&lt;span style="color:#a6e22e">NewWriter&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() { &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>() }()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Flush&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">b&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>改成返回 &lt;code>bytes.Buffer&lt;/code> 的指针，就可以得到正确的结果了。代码输出如下：&lt;/p>&lt;pre tabindex="0">&lt;code>[31 139 8 0 0 0 0 0 0 255 42 73 45 46 1 0 0 0 255 255 1 0 0 255 255 12 126 127 216 4 0 0 0]&lt;/code>&lt;/pre>&lt;p>golang 的 gzip 最坑的是，对于没有写入 footer 的压缩数据可以正常的做解压！！！&lt;/p>&lt;h2 id="总结">总结&lt;/h2>&lt;p>如果涉及到关闭之后依然需要写入数据的资源，尽量不要在 defer 中进行 close，要在 return 之前确保资源已关闭。&lt;/p></description></item><item><title>spark 3.1.2 context异常关闭问题排查</title><link>https://sunpe.github.io/posts/2021-07-01-spark-context/</link><pubDate>Thu, 01 Jul 2021 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2021-07-01-spark-context/</guid><description>&lt;p>前段时间，基于spark和spring boot开发了一个web服务，将 spark session 注册为spring的bean，代码如下所示。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Bean&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@ConditionalOnMissingBean&lt;/span>&lt;span style="color:#f92672">(&lt;/span>SparkSession&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> SparkSession &lt;span style="color:#a6e22e">sparkSession&lt;/span>&lt;span style="color:#f92672">(&lt;/span>SparkConf conf&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> SparkSession&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>&lt;span style="color:#f92672">()&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">enableHiveSupport&lt;/span>&lt;span style="color:#f92672">()&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">config&lt;/span>&lt;span style="color:#f92672">(&lt;/span>conf&lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getOrCreate&lt;/span>&lt;span style="color:#f92672">();&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然而升级spark到3.1.2版本之后，服务启动之后，spark context就会关闭，而退回3.0.2版本后就没有这问题。基于3.1.2版本 spark 的启动日志如下所示：&lt;/p>&lt;pre tabindex="0">&lt;code> . ____ _ __ _ _ /\\ / ___&amp;#39;_ __ _ _(_)_ __ __ _ \ \ \ \( ( )\___ | &amp;#39;_ | &amp;#39;_| | &amp;#39;_ \/ _` | \ \ \ \ \\/ ___)| |_)| | | | | || (_| | ) ) ) ) &amp;#39; |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.5.2)...21/07/01 15:05:10 INFO YarnClientSchedulerBackend: Application application_1619358582322_6529891 has started running.21/07/01 15:05:10 INFO Utils: Successfully started service &amp;#39;org.apache.spark.network.netty.NettyBlockTransferService&amp;#39; on port 40461....21/07/01 15:05:10 INFO SaslDataTransferClient: SASL encryption trust check: localHostTrusted = false, remoteHostTrusted = false21/07/01 15:05:10 INFO Utils: Using initial executors = 1, max of spark.dynamicAllocation.initialExecutors, spark.dynamicAllocation.minExecutors and spark.executor.instances21/07/01 15:05:10 INFO YarnSchedulerBackend$YarnSchedulerEndpoint: ApplicationMaster registered as NettyRpcEndpointRef(spark-client://YarnAM)21/07/01 15:05:11 INFO YarnClientSchedulerBackend: SchedulerBackend is ready for scheduling beginning after waiting maxRegisteredResourcesWaitingTime: 30000000000(ns)21/07/01 15:05:11 INFO WelcomePageHandlerMapping: Adding welcome page template: index21/07/01 15:05:12 INFO Http11NioProtocol: Starting ProtocolHandler [&amp;#34;http-nio-9000&amp;#34;]21/07/01 15:05:12 INFO TomcatWebServer: Tomcat started on port(s): 9000 (http) with context path &amp;#39;&amp;#39;21/07/01 15:05:12 INFO SpringApplication: Started application in 2939.592 seconds (JVM running for 2942.937)21/07/01 15:05:12 INFO AbstractConnector: Stopped Spark@23cd4246{HTTP/1.1, (http/1.1)}{0.0.0.0:4040}21/07/01 15:05:12 INFO SparkUI: Stopped Spark web UI at http://xxxxxxxxx:404021/07/01 15:05:12 INFO YarnClientSchedulerBackend: Interrupting monitor thread21/07/01 15:05:12 INFO YarnClientSchedulerBackend: Shutting down all executors21/07/01 15:05:12 INFO YarnSchedulerBackend$YarnDriverEndpoint: Asking each executor to shut down21/07/01 15:05:12 INFO YarnClientSchedulerBackend: YARN client scheduler backend Stopped21/07/01 15:05:12 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!21/07/01 15:05:13 INFO MemoryStore: MemoryStore cleared21/07/01 15:05:13 INFO BlockManager: BlockManager stopped21/07/01 15:05:13 INFO BlockManagerMaster: BlockManagerMaster stopped21/07/01 15:05:13 INFO OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: OutputCommitCoordinator stopped!21/07/01 15:05:13 INFO SparkContext: Successfully stopped SparkContext&lt;/code>&lt;/pre>&lt;p>查看了3.1.2版本的提交历史，发现问题是由于该 pr &lt;a href="https://github.com/apache/spark/commit/c625eb4f9f970108d93bf3342c7ccb7ec873dc27">c625eb4&lt;/a>导致的，该pr是解决&lt;a href="https://issues.apache.org/jira/browse/SPARK-34674">SPARK-34674&lt;/a>问题。该pr在 core/src/main/scala/org/apache/spark/deploy/SparkSubmit.scala 代码的 955 行添加了&lt;code>SparkContext.getActive.foreach(_.stop())&lt;/code>代码。为了验证猜想，修改源码，并重新打包。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logInfo&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;## app start &amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">start&lt;/span>&lt;span style="color:#f92672">(&lt;/span>childArgs&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toArray&lt;/span>&lt;span style="color:#f92672">,&lt;/span> sparkConf&lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logInfo&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;## app start over &amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">catch&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> t&lt;span style="color:#f92672">:&lt;/span> Throwable &lt;span style="color:#f92672">=&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> findCause&lt;span style="color:#f92672">(&lt;/span>t&lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">finally&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logInfo&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;## finally clean spark context &amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(!&lt;/span>isShell&lt;span style="color:#f92672">(&lt;/span>args&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">primaryResource&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>isSqlShell&lt;span style="color:#f92672">(&lt;/span>args&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">mainClass&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">!&lt;/span>isThriftServer&lt;span style="color:#f92672">(&lt;/span>args&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">mainClass&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SparkContext&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getActive&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">foreach&lt;/span>&lt;span style="color:#f92672">(&lt;/span>_&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">stop&lt;/span>&lt;span style="color:#f92672">())&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">catch&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> e&lt;span style="color:#f92672">:&lt;/span> Throwable &lt;span style="color:#f92672">=&amp;gt;&lt;/span> logError&lt;span style="color:#f92672">(&lt;/span>s&lt;span style="color:#e6db74">&amp;#34;Failed to close SparkContext: $e&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>app启动日志如下。&lt;/p>&lt;pre tabindex="0">&lt;code>## app start . ____ _ __ _ _ /\\ / ___&amp;#39;_ __ _ _(_)_ __ __ _ \ \ \ \( ( )\___ | &amp;#39;_ | &amp;#39;_| | &amp;#39;_ \/ _` | \ \ \ \ \\/ ___)| |_)| | | | | || (_| | ) ) ) ) &amp;#39; |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.5.2)...21/07/01 15:05:10 INFO YarnClientSchedulerBackend: Application application_1619358582322_6529891 has started running.21/07/01 15:05:10 INFO Utils: Successfully started service &amp;#39;org.apache.spark.network.netty.NettyBlockTransferService&amp;#39; on port 40461....21/07/01 15:05:10 INFO SaslDataTransferClient: SASL encryption trust check: localHostTrusted = false, remoteHostTrusted = false21/07/01 15:05:10 INFO Utils: Using initial executors = 1, max of spark.dynamicAllocation.initialExecutors, spark.dynamicAllocation.minExecutors and spark.executor.instances21/07/01 15:05:10 INFO YarnSchedulerBackend$YarnSchedulerEndpoint: ApplicationMaster registered as NettyRpcEndpointRef(spark-client://YarnAM)21/07/01 15:05:11 INFO YarnClientSchedulerBackend: SchedulerBackend is ready for scheduling beginning after waiting maxRegisteredResourcesWaitingTime: 30000000000(ns)21/07/01 15:05:11 INFO WelcomePageHandlerMapping: Adding welcome page template: index21/07/01 15:05:12 INFO Http11NioProtocol: Starting ProtocolHandler [&amp;#34;http-nio-9000&amp;#34;]21/07/01 15:05:12 INFO TomcatWebServer: Tomcat started on port(s): 9000 (http) with context path &amp;#39;&amp;#39;21/07/01 15:05:12 INFO SpringApplication: Started application in 2939.592 seconds (JVM running for 2942.937)## app start over## finally clean spark context21/07/01 15:05:12 INFO AbstractConnector: Stopped Spark@23cd4246{HTTP/1.1, (http/1.1)}{0.0.0.0:4040}21/07/01 15:05:12 INFO SparkUI: Stopped Spark web UI at http://xxxxxxxxx:404021/07/01 15:05:12 INFO YarnClientSchedulerBackend: Interrupting monitor thread21/07/01 15:05:12 INFO YarnClientSchedulerBackend: Shutting down all executors21/07/01 15:05:12 INFO YarnSchedulerBackend$YarnDriverEndpoint: Asking each executor to shut down21/07/01 15:05:12 INFO YarnClientSchedulerBackend: YARN client scheduler backend Stopped21/07/01 15:05:12 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!21/07/01 15:05:13 INFO MemoryStore: MemoryStore cleared21/07/01 15:05:13 INFO BlockManager: BlockManager stopped21/07/01 15:05:13 INFO BlockManagerMaster: BlockManagerMaster stopped21/07/01 15:05:13 INFO OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: OutputCommitCoordinator stopped!21/07/01 15:05:13 INFO SparkContext: Successfully stopped SparkContext&lt;/code>&lt;/pre>&lt;p>修改该段代码，再重新打包测试，问题解决。启动日志如下所示。&lt;/p>&lt;pre tabindex="0">&lt;code>## app start . ____ _ __ _ _ /\\ / ___&amp;#39;_ __ _ _(_)_ __ __ _ \ \ \ \( ( )\___ | &amp;#39;_ | &amp;#39;_| | &amp;#39;_ \/ _` | \ \ \ \ \\/ ___)| |_)| | | | | || (_| | ) ) ) ) &amp;#39; |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.5.2) ....21/07/01 16:05:51 INFO YarnClientSchedulerBackend: Application application_1619358582322_6532933 has started running.21/07/01 16:05:51 INFO Utils: Successfully started service &amp;#39;org.apache.spark.network.netty.NettyBlockTransferService&amp;#39; on port 42549.21/07/01 16:05:51 INFO NettyBlockTransferService: Server created on xxxxxxxxx:4254921/07/01 16:05:51 INFO BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy21/07/01 16:05:51 INFO BlockManagerMaster: Registering BlockManager BlockManagerId(driver, xxxxxxx, 42549, None)21/07/01 16:05:51 INFO BlockManagerMasterEndpoint: Registering block manager xxxxxxxxx:42549 with 5.2 GiB RAM, BlockManagerId(driver, xxxxxxx, 42549, None)21/07/01 16:05:51 INFO BlockManagerMaster: Registered BlockManager BlockManagerId(driver, xxxxxxxx, 42549, None)21/07/01 16:05:51 INFO BlockManager: external shuffle service port = 733721/07/01 16:05:51 INFO BlockManager: Initialized BlockManager: BlockManagerId(driver, xxxxxxxx, 42549, None)21/07/01 16:05:51 INFO ServerInfo: Adding filter to /metrics/json: org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter21/07/01 16:05:51 INFO ContextHandler: Started o.s.j.s.ServletContextHandler@60510791{/metrics/json,null,AVAILABLE,@Spark}21/07/01 16:05:52 INFO YarnSchedulerBackend$YarnSchedulerEndpoint: ApplicationMaster registered as NettyRpcEndpointRef(spark-client://YarnAM)21/07/01 16:05:54 INFO Utils: Using initial executors = 1, max of spark.dynamicAllocation.initialExecutors, spark.dynamicAllocation.minExecutors and spark.executor.instances21/07/01 16:05:54 INFO YarnClientSchedulerBackend: SchedulerBackend is ready for scheduling beginning after waiting maxRegisteredResourcesWaitingTime: 30000000000(ns)21/07/01 16:05:55 INFO WelcomePageHandlerMapping: Adding welcome page template: index21/07/01 16:05:55 INFO Http11NioProtocol: Starting ProtocolHandler [&amp;#34;http-nio-9000&amp;#34;]21/07/01 16:05:55 INFO TomcatWebServer: Tomcat started on port(s): 9000 (http) with context path &amp;#39;&amp;#39;21/07/01 16:05:55 INFO SpringApplication: Started application in 848.362 seconds (JVM running for 851.343)## app start over## finally clean spark context&lt;/code>&lt;/pre>&lt;p>后续和公司内 spark 专家沟通过该问题，专家给出的建议是添加一个启动参数来控制 main 函数之后是否需要关闭 context。最终提交了该 pr &lt;a href="https://github.com/apache/spark/pull/33154">33154&lt;/a> 到spark社区。不过我提交的 pr 没有被采纳，该问题社区的最终修复方案是 &lt;a href="https://github.com/apache/spark/commit/fd3e9ce0b9ee09c7dce9f2e029fe96eac51eab96">fd3e9ce&lt;/a> 。&lt;/p></description></item><item><title>TCP协议详解</title><link>https://sunpe.github.io/posts/2021-03-12-tcp/</link><pubDate>Fri, 12 Mar 2021 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2021-03-12-tcp/</guid><description>&lt;h2 id="tcp协议">TCP协议&lt;/h2>&lt;p>TCP 协议是 TCP/IP 体系中非常复杂的一个协议，下面介绍 TCP 的主要特点：&lt;/p>&lt;ol>&lt;li>TCP 是面向连接的传输层协议，应用程序在使用 TCP 协议之前，必须先建立 TCP 连接，传输数据结束后必须要要释放 TCP 连接。&lt;/li>&lt;li>每一条 TCP 连接只能有两个端点（endpoint），TCP 连接只能是点对点的。&lt;/li>&lt;li>TCP 提供可靠交付的服务，通过 TCP 连接可以无差错、不丢失、不重复并且按顺序的传输的数据。&lt;/li>&lt;li>TCP 提供全双工通信。TCP 允许通信双方进程在任何时候都可以发送数据，TCP 两端都设有发送缓存和接收缓存，用来临时存放双端通信的数据。发送时，应用程序把数据发送给 TCP 缓存后，就可以做自己的事了，TCP 在合适的时候把数据发送出去。接收时，TCP 将数据放入缓存，上层应用进程在合适的时候读取缓存中的数据。&lt;/li>&lt;li>面向字节流。TCP 中的「流」（stream）指的是流入到进程或从进程流出的字节序列，「面向字节流」的含义是，虽然应用程序进程和 TCP 交互是一次一个大小不等的数据块，但 TCP 把应用程序交下来的数据看成仅仅是一连串无结构的字节流，TCP 并不知道要传递的字节流的含义。TCP 不保证接收方收到的数据块和发送方发送的数据块具有对应的大小关系，但接收方收到的字节流必须和发送方发出的字节流完全一样，接收方必须有能力识别收到的字节流，并还原成有意义的数据。&lt;/li>&lt;/ol>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/1.png" alt="图 1 TCP 面向流的概念">&lt;/p>&lt;p>图 1 TCP 面向流的概念&lt;/p>&lt;p>TCP 不关心应用程序一次把多长的数据发送到 TCP 的缓存中，而是根据对方给出的窗口值和当前网络用塞程序来决定一个报文段应包含多少个字节。如果应用程序传送到 TCP 缓存的数据块太长，TCP 可以把它划分短一些再传送。如果应用程序一次发来很短的数据，TCP 可以等待基类有足够多的字节再构成报文段发送。&lt;/p>&lt;p>「连接」是 TCP 最基本的抽象，TCP 连接两个端点，端点是「套接字」（socket）或「插口」。端口号拼接 IP 地址构成了套接字，所以 socket = IP:port。&lt;/p>&lt;h2 id="可靠传输">可靠传输&lt;/h2>&lt;p>TCP 发送的报文段是交给 IP 层传输，而 IP 层只能提供尽最大努力服务，也就是说，TCP 下层的网络提供的是不可靠的传输，因此 TCP 必须采取适当的措施来保证传输的可靠性。&lt;/p>&lt;h3 id="停等协议">停等协议&lt;/h3>&lt;p>「停等」就是每发完一个报文分组就停止发送，等待对方确认后再发送下一分组。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/2.png" alt="图 2 停等协议">&lt;/p>&lt;p>图 2 停等协议&lt;/p>&lt;p>无差错的情况下，A 发送分组 M1 后就暂停发送，等待 B 确认之后再继续发送。如图 2 中（a）所示。&lt;/p>&lt;p>在图 2（b）中展示了出现差错的情况，M1 在传输途中丢失了，B 没收到报文，或者B 收到 M1 时监测到出现差错，就丢弃 M1，其他什么也不做（不通知 A 出现差错），而 A 在一段时间之内没收到确认，就认为刚才发送的分组 M1 丢失了，所以重传 M1 分组。为了实现超时重传，发送方没发送一个分组都需要设置一个「超时计时器」，如果在超时之前收到对方的确认，则撤销计时器，计时器的超时时间应该比分组传输的平均往返时间更长一些。而且为了清楚是哪个分组出现了差错，需要对分组进行编号。&lt;/p>&lt;p>如果 B 接收到了分组 M1，但是发出的对 M1 确认报文段丢失，那么在 A 超时计时器到期后没有收到确认报文段，则需要重传 M1，那么 B 在抽到重复的 M1 分组后应当丢弃分组，并重新发送确认报文段，如图 3（a）所示。&lt;/p>&lt;p>如果 M1 的确认报文段出现了延迟，A 最终收到了迟到的确认报文段，那么 A 应当丢弃消息，由于 M1 分组超时重传，B 仍然会收到重复的 M1，B 照样需要丢弃重复的分组。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/3.png" alt="图 3 确认报文段丢失和确认报文段迟到">&lt;/p>&lt;p>图 3 确认报文段丢失和确认报文段迟到&lt;/p>&lt;p>通过确认和重传机制就可以在不可靠的网络上实现可靠的通信，接收方不需要请求发送方重传某个分组，重传是自动进行，这种传输协议常称为「自动重传请求」（ARQ automatic repeat re-quest）。&lt;/p>&lt;p>ARQ 协议可以很方便的实现可靠的传输，但是信道的利用率太低，假定 A 发送分组需要的时间是 $T_D$，B 收到分组后立刻发送确认报文段，发送确认分组的时间是 $T_A$，A 处理确认分组的时间忽略不记，分组往返时间是 RTT，那么 A 在经过时间( $T_D + RTT + T_A$)后才可以发送下一个分组。因为只有 $T_D$ 是用来传输有用的数据，所以信道利用率 &lt;code>U = $T_D$ / ($T_D$ + RTT + $T_A$)&lt;/code>。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/4.png" alt="图 4 停等协议信道利用率太低">&lt;/p>&lt;p>图 4 停等协议信道利用率太低&lt;/p>&lt;p>比如往返时延 RTT = 20ms，发送速率 1Mb/s，发送 1200 bit 分组，忽略处理时间和 $T_A$（ $T_A$ 通常远小于 $T_D$），信道利用率 U = 5.66%，如果发送速率提升到 10 Mb/s，那么 U = 5.96 * $10^{-4}$。信道在绝大多数时间内是空闲的，而在出现差错时，信道利用率会更低。&lt;/p>&lt;h3 id="连续停等协议">连续停等协议&lt;/h3>&lt;p>为了提高信道利用率，发送方可以不使用低效率的停等协议，而采用流水线传输，发送方可以连续发送多个分组，不必每次发送完就停下来等待对方确认，这样可以使信道上一直有数据传输，从而获得更高的信道利用率。这种方式区别于 ARQ 协议，叫做「连续 ARQ 协议」&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/5.png" alt="图 5 通过流水线传输提高信道利用率">&lt;/p>&lt;p>图 5 通过流水线传输提高信道利用率&lt;/p>&lt;p>如图 6 所示，分组按序号从大到小排列，发送方维护了一个发送窗口，位于窗口内的 5 个分组可以连续发送出去，而不需要等待对方确认，发送方每收到一个确认，就把发送窗口向前移动一个分组的位置。接收方通常是采用累积确认的方式，接收方不必对收到的分组逐个发送确认，而是在收到按序到达的多个分组之后，对最后一个分组发送确认，表示到这个分组为止的所有分组都已经正确收到了。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/6.png" alt="图 6 连续 ARQ 协议原理">&lt;/p>&lt;p>图 6 连续 ARQ 协议原理&lt;/p>&lt;p>累积确认的方式很容易实现，即使确认报文段丢失也不必重传，但不能向发送方反馈接收方已正确接收的所有分组的信息。例如发送方发送了前 5 个分组，第 3 个分组丢失，这是接收方只能对前 2 个分组确认，发送方只好重传后面 3 个分组，这种回退到 N 的重传方式叫 Go-back-N，表示需要退回重传已发送的 N 个分组。在线路质量不好的时候，连续 ARQ 协议会带来一定的负面影响。&lt;/p>&lt;h3 id="tcp-滑动窗口">TCP 滑动窗口&lt;/h3>&lt;p>TCP 的滑动窗口是以字节为单位的，发送「窗口」表示在没有收到确认报文之前，可以连续的把窗口内的数据都发送出去，已经发送的数据，在未确认前需要暂时保留，以便超时重传。发送窗口的位置由窗口前沿和后沿共同决定，后沿之后的数据表示已经发送并且确认过，继续收到确认后后沿可以往前移动，不会向后移动。前沿通常不断向前移动，如果一直没收到确认报文，那么前沿和后沿不会移动。如果接收方通知缩小窗口，前沿也不会向前移动，前沿在这种情况下理论上可以向后移动，但是强烈不赞成前沿向后移动，因为前沿后的部分数据已经发送出去了。&lt;/p>&lt;p>图 7 所示，A 是发送方，B 是接收方，窗口是 20 字节，A 收到 B 的确认报文，确认号是 30，表明 30 号为止的数据已经接收，期望收到的下一个序号是 31。A 继续发送了 31 ～ 41 的数据，但还未收到确认报文段，发送窗口位置并未改变，如图 8 所示，31 ～ 40 这 10 个字节是已发送但未收到确认的消息，42 ～ 50 是允许发送但尚未发送的消息。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/7.png" alt="图 7 ">&lt;/p>&lt;p>图 7&lt;/p>&lt;p>描述窗口状态需要 3 个指针，$P_1$，$P_2$ 和 $P_3$ （图 8）。其中小于 $P_1$ 的是已发送并确认的部分，大于 $P_3$ 的是不允许发送的部分，$P_3$ ~ $P_1$ 是窗口大小，$P_2$ ~ $P_1$ 是已发送但尚未确认的字节数，$P_3$ ~ $P_2$ 是允许发送但尚未发送的字节数（也叫可用窗口或有效窗口）。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/8.png" alt="图 8">&lt;/p>&lt;p>图 8&lt;/p>&lt;p>图 8 中 B 的接收窗口大小是 20，窗口之外，到 30 为止的数据是已发送确认报文段的数据，并且已交付应用层，因此 B 可以不再保留这部分数据。31 ～ 50 在接收窗口内，假如 31 由于异常原因丢失，B 收到了 32 和 33，这些数据未按序到达，需要注意的是 B 只能对按序到达的数据中最高序号给出确认报文段，因此 B 给出的确认报文段依然是 31，而不是 32 或 33。&lt;/p>&lt;p>B 收到序号为 31 的数据，并把31 ～ 33 的数据交付应用层，然后 B 删除这些数据，并把接收窗口向前移动 3 个序号，同时给 A 发送确认报文段，窗口大小为 20，确认号是 34。除此之外，B 还收到序号为 37、38 和 40 的数据，这些数据没有按序到达，只能暂存在接收窗口中。A 收到 B 的确认报文段后将发送窗口向前滑动 3 个序号，但 P2 不变，现在 A 的可用窗口增大了，可以发送 42 ～ 53。如图 9 所示。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/9.png" alt="图 9 ">&lt;/p>&lt;p>图 9&lt;/p>&lt;p>A 发送完 42 ～ 53 后，指针 P_2 向前移动和 P_3 重合，发送窗口内的序号都已用完，但没有再收到确认，由于 A 的发送窗口已满，可用窗口已减小到 0，需要停止发送。如图 10。现实中存在这种情况，A 发送的数据还没到达 B，或者 B 的确认数据滞留在网络中。为保证可靠传输，A 只能认为 B 还没收到数据，A 在超时控制器超时后需要重传这部分数据，重新设置超时计时器，直到 B 确认为止。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/10.png" alt="图 10 发送窗口已满">&lt;/p>&lt;p>图 10 发送窗口已满&lt;/p>&lt;p>上文提到过应用层将数据发送到 TCP 缓存，和应用层从 TCP 缓存读取数据，窗口和 TCP 缓存的关系如图 11。&lt;/p>&lt;p>发送窗口通常只是发送缓存的一部分，发送缓存存储发送方准备发送的数据和已发送但尚未收到确认的数据，已发送的数据应当从发送缓存中删除，发送缓存和发送窗口的后沿重叠，应用层最后写入发送缓存的字节减去最后被确认的字节，就是保留在发送缓存中的字节数。&lt;/p>&lt;p>同样接收窗口也是接收缓存的一部分，接收缓存储存按序到达但尚未被应用层读取的数据和未按序到达的数据。如果收到的分组有差错，则需要丢弃掉，如果应用层来不及读取收到的数据，接收缓存最终会被占满，使的接收窗口减到 0。如果应用层可以很快的读取接收到的数据，接收窗口就可以增大，但最大不能超过接收缓存的大小。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/11.png" alt="图 11 TCP 缓存和窗口的关系">&lt;/p>&lt;p>图 11 TCP 缓存和窗口的关系&lt;/p>&lt;p>虽然发送窗口大小是根据接收窗口大小设置的，但在同一时刻，发送窗口和接收窗口大小不一定一样，因为通过网络传递窗口值需要一定的时间，而且发送方会根据网络用塞情况会适当调整发送窗口。&lt;/p>&lt;h3 id="超时重传时间的选择">超时重传时间的选择&lt;/h3>&lt;p>TCP 发送方在规定的时间内没收到确认就需要重传已发送的报文段，其中重传时间选择是 TCP 最复杂的问题之一。由于网络环境的不确定性，如果重传时间设置得太短，就会引起很多报文段的不必要的重传，是网络负荷增大；如果重传时间设置大太长，会使网络空闲时间增大，降低了传输效率。&lt;/p>&lt;p>TCP 采用自适应算法，记录报文发送的时间和接收到确认的时间，这两个时间之差就是「报文段的往返时间 RTT」。TCP 使用 RTT 的加权平均返回时间 $RTT_S$（又叫「平滑的往返时间」），第一次测量到 RTT 样本时，$RTT_S$ 取值为测量到的 RTT 样本值，之后每次测量之后，就重新计算 $RTT_S$。&lt;/p>&lt;p>$$新的 RTT_S = (1 - \alpha) * ( 旧的 RTT_S ) + \alpha * (新的 RTT 样本)$$&lt;/p>&lt;p>$\alpha$ 取值区间为 0～1（不包含 1 ），若 $\alpha$ 接近于 0，表示新的 $RTT_S$ 和旧的 $RTT_S$ 变化不大，$RTT_S$ 受新的 RTT 样本影响不大（RTT 值更新慢）；若 $\alpha$ 接近 1，则表示新的 $RTT_S$ 受 RTT 样本影响较大（RTT 值更新快）。RFC 2988 推荐的 $\alpha$ 值为 0.125 。&lt;/p>&lt;p>超时重传时间 RTO（Retransmission Time-Out）应该略大于加权平均往返时间 $RTT_S$:&lt;/p>&lt;p>$$RTO = RTT_S + 4 * RTT_D$$&lt;/p>&lt;p>$RTT_D$ 是 RTT 的偏差的加权平均值，与 $RTT_S$ 和新的 RTT 样本之差有关。在第一次测量 RTT 时，$RTT_D$ 值为 RTT 样本值的一半，之后每次测量 RTT，就重新计算 $RTT_D$：&lt;/p>&lt;p>$$新的 RTT_D = ( 1 - \beta ) * (旧的 RTT_D ) + \beta * | RTT_S - 新的 RTT 样本值|$$&lt;/p>&lt;p>$\beta$ 是小于 1 的系数，推荐值是 0.25。&lt;/p>&lt;p>超时重传的情况会对计算 $RTT_S$ 和 RTO 有很大的影响，比如超时重传后收到了确认报文段，这样就无法判断确认报文段是对先前报文段的确认，还是对后来重传报文段的确认。针对这个问题 Karn 提出了一个算法：在计算加权平均 $RTT_S$ 时，只要报文重传了，就不采用其往返时间样本。&lt;/p>&lt;p>但如果网络时延突然增大，在重传时间内不会收到确认报文段，于是就重传报文段，但根据 Karn 算法，不考虑重传报文段的往返时间样本，这样重传时间无法得到更新。&lt;/p>&lt;p>所以要对 Karn 算法作出修正，报文段每重传一次，就把超时重传时间 RTO 增大一些。典型的做法是新的重传时间设置为原来的重传时间的 2 倍，当不再发生报文段重传，才根据公式计算超时重传时间。&lt;/p>&lt;h3 id="选择确认-sack">选择确认 SACK&lt;/h3>&lt;p>若收到的报文段无差错，但是未按序号到达，中间还缺少了一些序号的数据，可以通过「选择确认」（selective ACK）只传送缺少的数据而不重传已经到达接收方的数据。&lt;/p>&lt;p>TCP 接收方接收到的数据字节流序号不连续，就形成了一些不连续的字节块，如图 12，序号 1 ～ 1000收到了，但 1001 ～ 1500 没有收到，接下来 1501 ～ 3000收到了，缺少 3001 ～ 3501，再后面 4501 之后的数据没收到。如果这些字节的序号都在接收窗口内，接收方可以先接收下这些数据，并且将信息告知发送方。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/12.png" alt="图 12 不连续的字节块">&lt;/p>&lt;p>图 12 不连续的字节块&lt;/p>&lt;p>要使用 SACK，那么在创建链接时需要在 TCP 首部加上「允许 SACK」选项，使用了 SACK，原来首部中的「确认字段号」用法不变，只是之后的 TCP 报文段首部都增加了 SACK 选项，以便报告收到的不连续的字节块边界。&lt;/p>&lt;h2 id="流量控制">流量控制&lt;/h2>&lt;h3 id="利用滑动窗口实现流量控制">利用滑动窗口实现流量控制&lt;/h3>&lt;p>如果发送方数据发送的过快，接收方可能 来不及接收，这就可能造成数据丢失，所以需要让发送方发送速率不要太快，以便接收方来得及处理，这就是流量控制。&lt;/p>&lt;p>利用滑动窗口机制可以很方便在 TCP 链接上实现对发送方的流量控制。如图 13 所示，建立链接时，B 告诉 A 「我的接收窗口 rwnd = 400」（rwnd 表示 recover window），发送方的发送窗口不能超过接收方给出的接收窗口。需要注意的是，TCP 窗口单位是字节，而不是报文段。假设每个报文长度是 100 字节，报文段序号初始值是 1，箭头中大写的 ACK 表示首部中确认位 ACK，小写的 ack 表示确认字段的值。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/13.png" alt="图 13 利用可变窗口进行流量控制">&lt;/p>&lt;p>图 13 利用可变窗口进行流量控制&lt;/p>&lt;p>接收方主机进行了 3 次流量控制，第一次将窗口减小到 rwnd=300，第二次又减到 rwnd=100，最后减到 rwnd=0，即不允许对方再发送数据了，暂停状态直到 B 再发送一个新的窗口值为止。&lt;/p>&lt;p>如果在 B 向 A 发送零窗口的报文段后不久，B 的接收缓存又有了一些空间，于是 B 向 A 发送了 rwnd=400 的报文段。然而报文在传输过程中丢失，A 一直在等待 B 的非零窗口通知，而 B 也一直在等待 A 发送数据，如果没有其他措施，这种互相等待的死锁局面会一直持续下去。为解决这问题，TCP 为每一个连接设有一个「持续计数器」，只要 TCP 连接的一方收到对方的零窗口通知，就启动持续计数器，如果计数器到期，就发送一个零窗口的探测报文（仅携带 1 字节数据），而对方在确认这个探测报文时给出了现在的窗口值。如果窗口值仍然是零，那么收到这个报文的一方就重新设置计数器，如果窗口不是零，那么就可以打破死锁僵局。&lt;/p>&lt;h2 id="拥塞控制">拥塞控制&lt;/h2>&lt;p>计算机网络中，链路带宽、交换节点的缓存和处理机等都是网络的资源，在某段时间，如果对网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能就要变坏，即产生了拥塞（congestion）。&lt;/p>&lt;p>网络拥塞往往是由许多因素引起的，简单的增加一些资源，往往不能解决拥塞问题，甚至有时候会使网络性能变坏。例如，当某个节点的缓存容量太小，到达的分组因空间不足而不得不丢弃，如果仅仅是扩大接收缓存，到达该节点的分组会在缓存中排队。由于链路容量和处理机性能并未提高，因此缓存中的分组等待时间大大增加，结果上层软件会因为等待超时而重传分组。由于拥塞控制引起的重传会继而加剧网络的拥塞。&lt;/p>&lt;p>拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中路由器或链路不至于过载，使网络能够承受现有的网络负荷。&lt;/p>&lt;p>拥塞控制和流量控制密切相关，但也存在一些差异，流量控制通常是指点对点通信量的控制，解决的是端到端的问题（接收段控制发送端），流量控制所要做的就是抑制发送端发送数据的速率，以便接收段来得及接收。而拥塞控制是一个全局性的过程，涉及到所有主机、路由器，以及与网络传输性能相关的所有因素。&lt;/p>&lt;p>拥塞控制流流量控制之所以会被弄混，是因为某些拥塞控制算法和流量控制算法类似，向发送端发送控制报文，来告诉发送端网络出现麻烦，必须放慢速度。&lt;/p>&lt;p>假设某个网络带宽是 1000 Gb/s，有一个服务器向一台 PC 机以 1 Gb/s 的速率传送数据，显然网络带宽足够大，因而不存在拥塞问题，但也必须要有流量控制，让服务器经常停下来，以便让 PC 机来得及接收。&lt;/p>&lt;p>而另一个网络带宽是 1 Mb/s，有 1000 台主机，其中 500 台分别向另外 500 台主机以 100k/s 的速率发送数据，那么现在的问题就不是接收段是否能来得及接收数据，而是整个网络的输入负载是否超过了网络的承受能力。&lt;/p>&lt;p>进行拥塞控制需要付出代价，首先需要获得网络内部流量分布的信息，还要在节点之间交换信息和各种命令，以便选择控制策略和实施控制。这就产生了额外的开销，有时候还需要将一些资源（缓存、带宽等）分配给个别用户（或一些类别的用户）单独使用，使得网络资源不能更好的实现共享。所以在设计拥塞控制策略时，必须全面衡量得失。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/14.png" alt="图 14 拥塞控制的作用">&lt;/p>&lt;p>图 14 拥塞控制的作用&lt;/p>&lt;p>如图 14 所示，横轴是「提供的负载」，代表单位时间输入到网络的分组数目，也称作「输入负载」或「网络负载」。纵轴是「吞吐量」，代表单位时间从网络输出的分组数目。具有理想拥塞控制的网络，在吞吐量饱和之前，吞吐量应等于网络负载，当负载超过某一限度时，由于网络资源有限，吞吐量不再增长而保持为水平线，即吞吐量达到饱和，这就表明输入到网络的某些分组被某个节点丢弃了。&lt;/p>&lt;p>但实际情况下，随着网络负载的增大，网络吞吐量增长率逐渐减小，也就是说在网络还没有达到饱和时，就已经有一部分分组被丢弃了，当负载明显的小于理想的吞吐量的时候网络就进入了「轻度拥塞」的状态。当负载达到某一数值时，网络吞吐量反而随着负载的增大而下降，网络已经进入拥塞状态了。当负载继续增大到某一数值时，网络吞吐量就下降到零，网络已经无法工作。&lt;/p>&lt;p>从原理上讲，拥塞控制的方案就是让对网络资源的需求不再大于可用的网络资源，或者是增大网络中某些可用资源（增加一些链路、增加带宽等），或者减小用户对资源的需求（拒绝新的建立连接请求、让用户减轻负荷）。在采取某项措施时，还必须考虑到该措施所带来的影响。&lt;/p>&lt;p>拥塞控制是一个动态的问题，网络正朝着高速化的方向发展，很容易出现缓存不够大而造成分组的丢失，分组丢失是网络拥塞的征兆而不是原因，有些情况下，拥塞控制机制本身会引起网络性能恶化甚至发生死锁。&lt;/p>&lt;p>检测网络拥塞的方法很多，主要的检测指标有：由于缺少缓存空间而被丢弃的分组的百分比、平均队列长度、超时重传的分组数、平均分组时延、分组时延的标准差等待。&lt;/p>&lt;p>一般在检测到拥塞发生时，要将拥塞发生的信息传送到产生分组的源，通知拥塞的消息分组同样会使网络更加拥塞。另一种方法是在路由器转发的分组中保留一个比特或字段，用该比特或字段表示网络是否拥塞。也可以通过周期性的发送探测分组，询问拥塞是否发生。&lt;/p>&lt;p>此外过于频繁的拥塞控制会使系统产生不稳定的振荡，过于迟缓的拥塞控制又不具有任何实用价值。因此要采取某种折中的方案，选择正确的时间常数。&lt;/p>&lt;p>RFC 2581 定义了拥塞控制的四种算法：慢开始（slow-start）、拥塞避免（congestion avoidance）、快重传（fast retransmit）和快恢复（fast recovery）。&lt;/p>&lt;h3 id="慢开始和拥塞避免">慢开始和拥塞避免&lt;/h3>&lt;p>发送方维持一个叫「拥塞窗口」cwnd（congestion window）的状态变量，拥塞窗口大小取决于网络拥塞程度，并且动态变化。发送方让自己的发送窗口等于拥塞窗口，如果再考虑接收方的接收能力，发送窗口还可能小于拥塞窗口。&lt;/p>&lt;p>发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便发送更多的分组；如果网络出现拥塞，拥塞窗口就减小一些，以减小注入到网络的分组数。&lt;/p>&lt;p>网络发送拥塞时，路由器就要丢弃分组，因此只要发送方没有按时接收到应该到达的确认报文，就可以认为网络中出现了拥塞。&lt;/p>&lt;p>慢开始算法的思路是这样的，当主机开始发送数据时，如果立即将大量分组注入到网络，那么就有可能引起拥塞。较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是说从小到达逐渐增大拥塞窗口数值。刚开始发送报文段时，先把拥塞窗口 cwnd 设置为一个最大报文段 MSS 的数值，每收到一个对新的报文段确认后，把拥塞窗口增加至多一个 MSS 的数值。用这样的方式逐步增大发送方拥塞窗口 cwnd，以使分组注入到网络的速率更加合理。&lt;/p>&lt;p>在一开始发送方先设置 cwnd=1 （使用报文段个数作为窗口大小的单位，实际上 TCP 窗口的单位是字节）。发送第一个报文段 $M_1$，接收方收到后确认 $M_1$，发送方收到对 $M_1$ 的确认后，把 cwnd 增大到 2，发送方接着发送 $M_2$ 和 $M_3$ 两个报文段，接收方返回对 $M_2$ 和 $M_3$ 的确认。发送方每收到一个对新报文段的确认（重传的不算在内），就使发送方的拥塞窗口加 1，因此收到这两个确认后， cwnd 从 2 增大到 4，可以发送 $M_4$ ~ $M_7$ 共 4 个报文段。使用慢开始算法，每经过一个传输轮次（transmission round），拥塞窗口 cwnd 就加倍。&lt;/p>&lt;p>把拥塞窗口 cwnd 所允许发送的报文段都连续发送出去，并收到最后一个字节的确认，即一个发送轮次。一个传输轮次所经历的时间其实就是往返时间 RTT。例如，拥塞窗口 cwnd 的大小是 4 个报文段，那么往返时间 RTT 就是发送方连续发送 4 个报文段，并收到这 4 个报文段的确认，总共经历的时间。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/15.png" alt="图 15 发送方每收到一个确认就把窗口 cwnd 加 1">&lt;/p>&lt;p>图 15 发送方每收到一个确认就把窗口 cwnd 加 1&lt;/p>&lt;p>慢开始的「慢」并不是指 cwnd 的增长速率慢，而是指在 TCP 开始发送报文段时先设置 cwnd=1，使得发送方在开始时只发送一个报文段（目的是探测网络的拥塞情况），然后逐渐增大 cwnd。为了防止拥塞窗口 cwnd 增大的过大引起的网络拥塞，还需要设置一个「慢开始门限 ssthresh」状态变量，当 cwnd &amp;lt; ssthresh 时，使用慢开始算法，当 cwnd &amp;gt; ssthresh 时该用拥塞避免算法。&lt;/p>&lt;p>拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢增大，每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加 1，而不是加倍。这样，拥塞窗口 cwnd 按线性规律缓慢增长。&lt;/p>&lt;p>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（没按时收到确认），就要把慢开始门限 ssthresh 设置为出现拥塞时发送窗口值的一半（但不能小于 2 ），然后把拥塞窗口 cwnd 重新设置为 1，执行慢开始算法。迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够的时间把队列中积压的分组处理完。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/16.png" alt="图 16 慢开始和拥塞避免算法">&lt;/p>&lt;p>图 16 慢开始和拥塞避免算法&lt;/p>&lt;p>如图 16 所示，当 TCP 连接初始化时，把拥塞窗口 cwnd 置为 1，慢开始门限 ssthresh 设置为 16。发送方每收到一个对新报文段的确认 ACK，就把拥塞窗口值加 1，然后进行下一轮次的传输，拥塞窗口 cwnd 随着传播轮次按指数规则增长（ $2^N$)。当拥塞窗口 cwnd 增长到慢开始门限 ssthresh 时（即 cwnd=16），就改为执行拥塞避免算法，拥塞窗口按线性规律增长。假设拥塞窗口 cwnd 数值增长到 24 时，网络出现超时（网络可能发生拥塞），就将慢开始门限 ssthresh 更新为 12 （即变为出现拥塞时拥塞窗口 cwnd 大小的一半），拥塞窗口 cwnd 重新设置为 1，并执行慢开始算法，当拥塞窗口 cwnd 达到慢开始门限 ssthresh 时，改为拥塞避免算法，拥塞窗口线性增长。&lt;/p>&lt;p>图 16 中「乘法减小」是指不论在慢开始阶段还是拥塞避免阶段，只要出现超时（即可能出现了网络拥塞），就把慢开始门限值 ssthresh 减半，即设置为当前拥塞窗口的一半。当网络频繁出现拥塞时，ssthresh 下降的很快，大大减小了注入到网络中的分组数。「加分增大」是指拥塞避免阶段，使拥塞窗口缓慢增大，以防止网络过早出现拥塞。这两种算法合起来称为 AIMD 算法（加法增大乘法减小）。&lt;/p>&lt;h3 id="快重传和快恢复">快重传和快恢复&lt;/h3>&lt;p>快重传算法要求接收方每收到一个失序的报文段后就立即发出重复确认（为了让发送方及早知道有报文段没有到达对方），而不是等待自己发送数据时才进行捎带确认。如图 17，接收方收到 $M_1$和 $M_2$ 后都分别发出了确认，假设接收方没收到 $M_3$ 但接着收到了 $M_4$，因为 $M_4$ 是失序的报文，所以接收方不对 $M_4$ 进行确认，根据可靠传输原理，接收方可以什么都不做，也可以在适当时机发送对 $M_2$ 的确认，但按快重传算法的规定，接收方应及时并且重复的发送对 $M_2$ 的确认，让发送方及早的知道报文段 $M_3$ 没有到达接收方。发送方接着传送 $M_5$ 和 $M_6$，接收方依然再次发送对 $M_2$ 的确认，这样接收方总共接到了四个对 $M_2$ 的确认，其中后面三个都是重复的。快重传算法规定，发送方只要一连收到三个重复确认就应当立即传送对方尚未收到的报文段 $M_3$，而不必等待为 $M_3$ 设置的重传计数器到期。由于发送方能够及早的重传未被确认的报文段，因此采用快重传后可以是整个网络吞吐量提高约 20%。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/17.png" alt="图 17 快重传示意图">&lt;/p>&lt;p>图 17 快重传示意图&lt;/p>&lt;p>与快重传算法配合的还有快恢复算法，当发送方连续收到三个重复确认时，就执行「乘法减小」算法，把慢开始门限 ssthresh 减半，以防网络拥塞，发送方认为网络可能没有发生拥塞（如果网络发生拥塞，就不会一连有好几个报文段连续的到达接收方，也就不会导致接收方连续发送重复确认），这是不执行慢开始算法（即拥塞窗口 cwnd 不设置为 1 ），而是把 cwnd 值设置为慢开始门限 ssthresh 减半后的值，然后开始执行拥塞避免算法（加法增大），使拥塞窗口缓慢的线性增大。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/18.png" alt="图 18 连续收到三个重复确认后转入拥塞避免">&lt;/p>&lt;p>图 18 连续收到三个重复确认后转入拥塞避免&lt;/p>&lt;p>如图 18 所示，「TCP Reno 版本」（快回复和快重传算法）是目前广泛使用的版本，「TCP Tahoe 版本」（慢开始算法）已废弃不用，二者的区别是 TCP Reno 版本在快重传之后采用快恢复算法，而不是慢开始算法。&lt;/p>&lt;p>也有快重传实现是将开始时的拥塞窗口 cwnd 值再增大一些（增加 3 个报文段长度），即 cwnd = ssthresh + 3 * MSS。原因是既然发送方收到三个重复的确认，就表明有三个分组已经离开网络，这三个分组停留在接收方的缓存中，不再消耗网络资源，因此可以适当的把窗口增大一些。&lt;/p>&lt;p>采用快恢复算法时，慢开始算法只是在 TCP 连接建立时和网络出现超时的时候才使用。&lt;/p>&lt;p>接收方的缓存同样是有限的，接收方根据自己的接收能力设置接收窗口 rwnd，并将窗口值写入 TCP 首部，传送给发送方，发送方的发送窗口 cwnd 一定不能超过接收方给的接收窗口的值 rwnd。&lt;/p>&lt;h3 id="随机早期检测-red">随机早期检测 RED&lt;/h3>&lt;p>当路由器对分组处理时间特别长，那么就可能使这些分组经过很长时间才能到达终点，结果引起发送方对这些报文的重传。重传会引起 TCP 发送端认为网络出现拥塞，于是 TCP 发送端就采取了拥塞控制措施，但实际网络并未拥塞。网络层对 TCP 拥塞控制影响最大的就是路由器的分组丢弃策略。路由器通常按照「先进先出」的策略处理到达的分组，由于队列长度有限，因此当队列满了之后，再到达的分组都将被丢弃，这就是「尾部丢弃策略」。&lt;/p>&lt;p>路由器的尾部丢弃往往导致一连串的分组丢失，使发送方出现超时重传，使 TCP 进入拥塞控制，结果 TCP 发送方突然把数据发送速率降低到很小的数值。更严重的是，网络中通常有很多 TCP 连接，这种情况下如果发生路由器尾部丢弃，就可能会同时影响到很多条 TCP 连接，使许多 TCP 连接在同一时间突然开始拥塞控制，这叫「全局同步」，使全网通信量突然下降很多，而在网络恢复后，通信量有突然增大很多。&lt;/p>&lt;p>为了避免发生全局同步，可以在路由器采取「随机早期检测」（RED Random ）措施。路由器队列维护两个参数，队列长度最小门限 $TH_{min}$ 和最大门限 $TH_{max}$。分组到达时，先计算平均队列长度 $L_{AV}$，若平均队列长度小于最小门限 $TH_{min}$，则把分组放入队列；若平均队列长度超过最大门限 $TH_{max}$，则丢弃分组，若平均队列长度介于最小门限 $TH_{min}$ 和最大门限 $TH_{max}$，则按某一概率 p 将分组丢弃。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/19.png" alt="图 19 RED 算法把路由器的到达队列划分成三个区域">&lt;/p>&lt;p>图 19 RED 算法把路由器的到达队列划分成三个区域&lt;/p>&lt;p>随机早期检测 RED 不是等已发生网络拥塞才把队列尾的分组全部丢弃，而是在检测到网络拥塞的早期征兆时（即路由器的平均队列长度超过一定门限值），就先以概率 p 随机丢弃个别分组，让拥塞控制只在个别 TCP 连接上进行，从而避免全局性的拥塞控制。&lt;/p>&lt;p>随机早期检测 RED 算法正常工作的关键是要选择好三个参数：最小门限 $TH_{min}$、最大门限 $TH_{max}$ 和概率 p。最小门限 $TH_{min}$ 必须足够大，以保证路由器的输出链路有较高的利用率，最小门限 $TH_{min}$ 和最大门限 $TH_{max}$ 之间的差值也应当足够大，使得在一个 TCP 往返时间 RTT 中队列的正常增长仍在最大门限 $TH_{max}$ 内。通过最大门限 $TH_{max}$ 等于最小门限 $TH_{min}$ 的两倍是合适的。如果门限值设置的不合适，RED 也可能会引起类似于尾部丢弃那样的全局振荡。&lt;/p>&lt;p>RED 中最复杂的就是丢弃概率 p 的选择，p 不是常数，对于每个新到达的分组，都必须计算丢弃概率 p，p 取决于当前的平均队列长度 $L_{AV}$ 和所设定的两个门限值 $TH_{min}$ 和 $TH_{max}$。当平均队列长度 $L_{AV}$ 小于最小门限值 $TH_{min}$ 时，丢弃概率 p = 0；当平均队列长度 $L_{AV}$ 大于最大门限值 $TH_{max}$ 时，丢弃概率 p = 1；当平均队列长度 $L_{AV}$ 在 $TH_{min}$ 和 $TH_{max}$ 之间时，分组丢弃概率 p 在 0 到 1 之间。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/20.png" alt="图 20 分组丢弃概率 p 和两个门限值 $TH_{min}$ 和 $TH_{max}$ 的关系">&lt;/p>&lt;p>图 20 分组丢弃概率 p 和两个门限值 $TH_{min}$ 和 $TH_{max}$ 的关系&lt;/p>&lt;p>由于计算机数据具有突发性的特点，路由器中队列长度经常会出现很快的起伏变化，如果仅因为瞬时队列长度超过了最小门限值 $TH_{min}$ 就丢弃分组会产生不必要的拥塞控制，因此 RED 采用加权平均的方法计算平均队列长度 $L_{AV}$。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/21.png" alt="图 21 瞬时队列长度和平均队列长度的区别">&lt;/p>&lt;p>图 21 瞬时队列长度和平均队列长度的区别&lt;/p>&lt;p>$平均队列长度 L_{AV} = ( 1 - \delta ) * (旧L_{AV}) + \delta * (当前队列长度)$。公式中 $\delta$ 是在 0 到 1 之间的数，如果 $\delta$ 足够小，那么平均队列长度 $L_{AV}$ 取决于队列长度的长期变化趋势，而不受瞬时突发数据的影响。&lt;/p>&lt;p>分组丢弃概率 $p = p_{temp} / (1 - count * p_{temp})$。count 是常量，代表新到达的分组有多少个已经进入到了队列（没有被丢弃）；$p_{temp}$ 是过渡的分组丢弃概率，$p_{temp} = p_{max} * (L_{AV} - TH_{min})/(TH_{max} - TH_{min})$。&lt;/p>&lt;p>假设 $p_{max} = 0.02$，count 初始值是 0，假设平均队列长度 $L_{AV}$在两个门限之间，算出过渡的分组丢弃概率 $p_{temp}$ = 0.01，由于count = 0，所以 $p=p_{temp}=0.01$，也就是说现在到达的分组进入路由器队列概率是0.99，随着分组的不断到达，count不断增大，分组丢弃概率也逐渐增大。假设一连有 50 个分组进入队列而没有被丢弃，这时分组丢弃概率增大一倍，即 $p=0.02$。再假设一连有99 个分组进入队列而没有被丢弃，那么分组丢弃概率 $p = 1$（设平均队列长度一直不变），下一个分组一定会被丢弃。分组丢弃概率 p 不仅与平均队列长度有关，还随着队列中不被丢弃的分组数目的增多而逐渐增大，就可以避免分组丢弃的过于集中。&lt;/p>&lt;p>总之，随机早期检测 RED 好处就是当平均队列长度超过门限值 $TH_{min}$时，就会有少量的分组被丢弃，使得少量的 TCP 连接会减小窗口值，使得到达路由器分组的数量减少，从而平均队列长度减少了，避免了网络拥塞。需要注意，路由器在某一时刻的瞬时队列长度完全有可能超过平均队列长度，采用随机早期检测 RED 算法丢弃概率很小，但路由器队列已经没有空间接纳新到的分组，那么 RED 的操作和「尾部丢弃」方式一样，RED 仅在可能的条件下尽量使「尾部丢弃」不要发生。&lt;/p>&lt;h2 id="tcp-连接管理">TCP 连接管理&lt;/h2>&lt;h3 id="三次握手">三次握手&lt;/h3>&lt;p>TCP 连接建立的过程中要解决三个问题：&lt;/p>&lt;ul>&lt;li>每一方都能确知对方的存在&lt;/li>&lt;li>允许双方协商一些参数（最大窗口值、是否使用窗口扩大选项和时间戳选项以及服务质量等）&lt;/li>&lt;li>能够对运输实体资源（缓存大小、连接表中的项目等）进行分配&lt;/li>&lt;/ul>&lt;p>TCP 采用客户端/服务器模式，主动发起连接建立的应用进程叫「客户」，被动等待连接建立的应用叫「服务器」。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/22.png" alt="图 22 使用三次握手建立 TCP 连接">&lt;/p>&lt;p>图 22 使用三次握手建立 TCP 连接&lt;/p>&lt;p>图 22 展示了 TCP 建立连接的过程，A 是客户，B是服务器，最初两端的 TCP 进程都处于 CLOSED 状态。B 的 TCP 服务器进程先创建「传输控制块」TCB，TCB 中存储着连接的一些重要信息，比如 TCP 连接表、到发送和接收缓存的指针、到重传队列的指针、当前发送和接收的序列号等等。之后服务器就处于 LISTEN（收听） 状态，等待客户的连接请求。&lt;/p>&lt;p>A 的 TCP 客户进程也是先创建传输控制块 TCB，然后向 B 发出连接请求字段，首部的同步位 SYN = 1，同时选择一个初始序列号 seq = x。TCP 规定，SYN 报文段不能携带数据，但要消耗掉一个序号。这时 A 的客户进程进入 SYN-SENT（同步已发送）状态。&lt;/p>&lt;p>B 收到客户的连接请求后，如果同意建立连接，则向 A 发送确认，确认报文段中 SYN 和 ACK 都置为 1，确认号 ack = x + 1，同时也为自己选择一个序列号 seq = y。这个报文段也不能携带数据，同意要消耗掉一个序列号。这时 B 的服务器进程进入 SYN-RCVD（同步已收到）状态。&lt;/p>&lt;p>A 客户进程收到 B 的确认后，还要向 B 给出确认，确认报文段 ACK 置为 1，确认号 ack = y + 1，自己的序列号 seq = x + 1。TCP 规定，ACK 报文可以携带数据，如果不携带数据则不消耗序列号，下一个报文段的序列号仍然是 seq = x + 1。这时 TCP 连接已经建立，A 进入 ESTABLISH（已建立连接）状态，当 B 收到 A 的确认之后也进去 ESTABLISH（已建立连接）状态。&lt;/p>&lt;p>为什么 A 还要再发送一次确认呢？主要是为了防止「已失效的连接请求报文段」突然又传到了 B。考虑一种情况，如果 A 发出连接请求在网络节点长时间滞留了，导致 A 再重传了一次连接请求，而滞留的报文段在连接释放后的某个时间才到达 B，这本应该是一个早已失效的报文段，但 B 收到这个失效的报文段后，误以为 A 又发送了一次连接请求，于是向 A 发出确认报文，同意建立连接。假定不采用三次握手，那么 B 发出确认报文，连接就建立了。而 A 并没有发出连接请求，所以不会回应 B 的确认报文段，也不会向 B 发送数据，但是 B 以为连接已经建立，并一直等 A 的数据。而采用三次握手的办法就可以防止这个问题。&lt;/p>&lt;p>简单的理解三次握手，第一次握手可以确认客户进程发送没问题，第二次握手可以确认服务进程接收没和发送问题，第三次握手可以确认客户进程接收没问题。&lt;/p>&lt;h3 id="四次挥手">四次挥手&lt;/h3>&lt;p>数据传输结束后，通信的双方都可以释放连接。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/23.png" alt="图 23 使用四次挥手释放 TCP 连接">&lt;/p>&lt;p>图 23 使用四次挥手释放 TCP 连接&lt;/p>&lt;p>如图 23 所示，现在 A 和 B 都处于 ESTABLISH 状态，A 先发出了连接释放报文段，并停止发送数据。A 把连接释放报文段首部的终止控制位 FIN 置为 1，序列号 seq = u，值等于前面传送过的数据最后一个字节的序列号加 1，这时 A 进入 FIN-WAIT-1（终止等待 1）状态，等待 B 的确认。TCP 规定，FIN 报文段即使不携带数据，也要消耗掉一个序列号。&lt;/p>&lt;p>B 收到连接释放报文后立即确认，确认号 ack = u + 1，这个报文段的序列号 seq = v，值等于前面已发送过数据的最后一个字节的序号加 1，之后 B 进入 CLOSE-WAIT （关闭等待）状态，从 A 到 B 这个方向的连接就释放了，TCP 处于半关闭状态，即 A 已经没有数据要发送了，但如果 B 要发送数据，A 仍要接收，也就是说 B 到 A 这个方向的连接尚未关闭。&lt;/p>&lt;p>A 收到 B 的确认后，进入 FIN-WAIT-2 （终止等待2）状态，等待 B 发出的连接释放报文段。如果 B 已经没有要向 A 发送的数据，应用进程就通知 TCP 释放连接。B 发出连接释放报文段，置 FIN 为 1，序列号为 w （半关闭状态 B 可能会发送一些数据），还需要重复上次已发送的确认号 ack = u + 1，这是 B进入 LAST-ACK（最后确认）状态，等待 A 的确认。A 在收到 B 的连接释放报文段后，必须对此发送确认，置 ACK 为 1，确认号 ack = w + 1，序列号 seq = u + 1（前面发送的 FIN 报文段需要消耗一个序号），然后进入 TIME-WAIT（时间等待）状态，这时候 TCP 连接还没有释放，必须等待时间等待计时器（time-wait timer）设置的时间 2MSL 后，A 才进入到 CLOSED 状态。时间 MSL 叫最长报文段寿命，建议设置为 2 分钟。&lt;/p>&lt;p>为什么 A 在发出最后一个 ACK 报文段后必须等待 2 MSL 时间？有两个原因。第一，为了保证 A 发送的 ACK 报文段能够到达 B，处于 LASK-ACK 状态的 B 如果收不到 A 的确认报文段，B 会超时重传 FIN + ACK 报文段。第二，防止「已失效的连接请求报文段」，A 等待 2MSL，可以使本连接持续时间内产生的所有报文段都从网络中消失，使下一个新的连接中不会出现旧的连接报文段。&lt;/p>&lt;p>除了等待计时器外，TCP 还设有一个「保活计时器」，以防止客户进程故障导致服务器进程的不必要的等待。服务器每次收到客户的数据，就重新设置保活计时器，时间设置通常是两小时，若两小时没有收到客户的数据，服务器就发送一个探测报文段，之后每隔 75 分钟发送一次，如果一连 10 个探测报文段后客户仍无响应，服务器就关闭这个连接。&lt;/p>&lt;h3 id="tcp-的有限状态机">TCP 的有限状态机&lt;/h3>&lt;p>&lt;img src="https://sunpe.github.io/images/tcp/24.png" alt="图 24 TCP 的有限状态机">&lt;/p>&lt;p>图 24 TCP 的有限状态机&lt;/p>&lt;p>图 24 展示了 TCP 的有限状态机，方框表示 TCP 可能具有的状态，状态间的箭头表示可能发生的状态变迁。粗实现箭头表示客户进程的正常变迁，粗虚线箭头表示服务器进程的正常变迁，细线箭头表示异常变迁。&lt;/p></description></item><item><title>大年初五--北京故宫</title><link>https://sunpe.github.io/posts/2021-02-16-forbidden-city/</link><pubDate>Tue, 16 Feb 2021 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2021-02-16-forbidden-city/</guid><description>&lt;p>故宫博物院又叫「紫禁城」，是明清两代的皇宫，总共有 24 位皇帝居住过，始建于永乐四年（1406 年），建成于永乐十八年（1420 年），占地面积 72 万平方米。&lt;/p>&lt;p>大年初五天气还是有些冷的，今天开设了挺多的展览，看过「景仁宫」的「御瓷新见」展览，展出了景德镇的青花瓷和斗彩青花瓷。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/forbidden_city/1.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/2.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/3.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/4.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/5.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/6.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/7.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/8.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/9.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/10.jpg" alt="">&lt;/p>&lt;p>还有在另外一个展览的最长的「算盘」，有 117 位，比计算机中的 64 位整形还要长。&lt;img src="https://sunpe.github.io/images/forbidden_city/11.jpg" alt="">&lt;/p>&lt;p>到了下午闭馆前的一段时间，趁着人少拍了故宫的主体建筑。告诉大家一个小的摄影知识，想拍人少时候的故宫，可以在闭馆前半小时去拍摄。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/forbidden_city/12.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/13.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/14.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/15.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/16.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/17.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/18.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/19.jpg" alt="">&lt;/p>&lt;p>从「神武门」出来之后，就来到了故宫的后面，这时候天色已晚。春节期间，角楼、神武门会被射灯打亮，可以稍等片刻，拍摄角楼。也可以去景山公园，在景山上俯览故宫。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/forbidden_city/20.jpeg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/21.jpg" alt="">&lt;img src="https://sunpe.github.io/images/forbidden_city/22.jpg" alt="">&lt;/p></description></item><item><title>大年初一--北京国子监</title><link>https://sunpe.github.io/posts/2021-02-12-guozijian/</link><pubDate>Fri, 01 Jan 2021 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2021-02-12-guozijian/</guid><description>&lt;p>北京国子监是元、明、清三朝最高学府和教育管理机构，坐落于东城区国子监街（旧称成贤街）。国子监东侧即为国内第二大的孔庙。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/guozijian/1.jpg" alt="">&lt;/p>&lt;p>孔庙和国子监在一起，参观需要从孔庙进去。孔庙主体建筑是供奉孔子的「大成殿」，供奉孔子牌位和「四配十二哲」牌位。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/guozijian/2.jpg" alt="">&lt;/p>&lt;p>除此之外还有由 180 多座石碑组成的碑林，石碑上镌刻着 13 部儒家经典，蔚然壮观。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/guozijian/3.jpg" alt="">&lt;/p>&lt;p>金榜题名是每个读书人的梦想，国子监平时会有科举展，但遗憾的是由于疫情，展览没有开放。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/guozijian/4.jpg" alt="">&lt;/p>&lt;p>国子监核心建筑是「辟雍」，乾隆皇帝曾经在此讲学，当时国子监和成贤街上跪拜听讲的学生达到了 3000 多名。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/guozijian/5.jpg" alt="">&lt;/p>&lt;p>「辟雍」内景&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/guozijian/6.jpg" alt="">&lt;/p></description></item><item><title>面向对象的设计原则-SOLID</title><link>https://sunpe.github.io/posts/2020-12-12-solid/</link><pubDate>Sat, 12 Dec 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-12-12-solid/</guid><description>&lt;h2 id="单一职责原则single-responsibility-principlesrp">单一职责原则（Single responsibility principle，SRP）&lt;/h2>&lt;h3 id="简介">简介&lt;/h3>&lt;p>就一个类而言，应该仅有一个引起它变化的原因。&lt;/p>&lt;p>如果一个类承担的职责过多，就等于把这些职责耦合在了一起，一个职责变化可能会抑制或消弱类完成其他职责的能力，这种耦合会导致脆弱的设计，当变化发生时，设计会遭到意想不到的破坏。&lt;/p>&lt;p>图 1 所示，Retangle 类具有两个方法，一个方法用来绘制矩形，一个方法用来计算矩形面积。有两个应用程序使用 Rectangle 类，只会使用 Rectangle 类计算矩形面积的方法，另外一个应用程序只会在屏幕上绘制矩形。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/1.png" alt="">图1 多于一个的职责&lt;/p>&lt;p>Rectangle 类具有两个职责，违反了 SRP。带来的问题，首先，必须在 ComputationalGeometryApplication 中包含 绘制矩形 代码；其次，如果 GraphicalApplication 的改变由于一些原因导致 Rectangle 类的改变，这个改变需要重新构建、测试并部署 ComputationalGeometryApplication，否则 ComputationalGeometryApplication 可能会以不可预测的方式出现问题。&lt;/p>&lt;p>一个较好的设计是把这两个职责拆分到两个不同的类中，如图 2 所示，将Rectangle中计算逻辑移到 GeometricRectangle 类中，现在 GraphicalApplication 的改变不会对 ComputationalGeometryApplication 造成影响。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/2.png" alt="">图2 分离的职责&lt;/p>&lt;p>SRP中，职责定义为「变化的原因」，如果有多于一个动机可以改变一个类，那么这个类就具有多于一个职责。程序 1 的 Modem 接口，接口声明的 4 个函数确实是 Modem 所具有的功能。但 Modem 接口有两个职责，dial 和 hangup 是用来连接管理，send 和 recv 是用来数据通信。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Modem&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">dial&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String pno&lt;span style="color:#f92672">);&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">hangup&lt;/span>&lt;span style="color:#f92672">();&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">send&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">char&lt;/span> c&lt;span style="color:#f92672">);&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">recv&lt;/span>&lt;span style="color:#f92672">();&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这两个两个职责是否应该分开呢？这依赖于程序变化的方式。如果应用程序变化会影响连接函数的签名，那么调用 send 和 recv 函数的类都需要重新测试、编译和部署，这样的设计就具有僵化性。这种情况下，这两个职责应该分开，如图 3 所示，这样就避免了客户应用程序和这两个职责耦合在一起了。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/3.png" alt="">图3 分离的Modem接口&lt;/p>&lt;p>如果应用程序的变化方式总是导致这两个职责同时变化，那么就不必将这两个职责拆分开，拆分了之后会增加不必要的复杂性。&lt;/p>&lt;p>因此，「变化」只有「变化」实际发生时才具有意义，如果没有变化的征兆，那么去应用SRP活着其他原则都是不明智的。&lt;/p>&lt;p>单一职责原则（SRP）是其他原则的基础，是SOLID中最简单的原则，也是最难正确运用的原则，软件设计中许多工作就是发现职责并把这些职责互相分离。&lt;/p>&lt;h2 id="开放-封闭原则open-closed-principleocp">开放-封闭原则（Open-Closed principle，OCP）&lt;/h2>&lt;p>软件实体（类、模块、函数等）应该是可以扩展的，并且是不可修改的。&lt;/p>&lt;p>如果程序中一处改动就会产生连锁反应，导致一系列相关模块的改动，那么这样的设计是僵化的。OCP 建议对僵化的程序进行重构，如果正确的运用了 OCP，那么进行改动时，只需要添加代码，而不必改动已经正常运行的代码。&lt;/p>&lt;p>遵循开放-封闭原则而设计出的模块具有两个特征：&lt;/p>&lt;ol>&lt;li>对于扩展开放（open for extension）。 模块的行为是可扩展的，当需求改变时，可以对模块进行扩展，使其具有满足那些改变的新行为。&lt;/li>&lt;li>对于修改关闭（closed for modification）。对模块进行扩展时，不必改动模块的源代码。&lt;/li>&lt;/ol>&lt;p>这两个特征好像是互相矛盾的，通常扩展模块行为的方法就是修改模块的源代码。怎样才能不改动模块源代码的情况下去更改模块的行为呢？关键是运用&lt;strong>抽象&lt;/strong>。&lt;/p>&lt;p>抽象基类或接口可以描述一组行为，派生类或实现类可以继承基类或接口来实现接口的行为。模块可以依赖抽象基类或接口，由于模块依赖固定的抽象基类或接口，所以对于模块的更改可以是关闭的，通过从基类或接口来实现派生类或实现类，也可以扩展模块的行为。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/4.png" alt="">图 4 即不开放有不封闭的 Client&lt;/p>&lt;p>图 4 展示了一个简单的不遵循 OCP 的设计，Client 类和 Server 类都是具体类，client 类依赖 Server 类，如果 Client 对象需要依赖其他的服务器对象，则需要把 Client 类中依赖 Server 类的地方更改给新的服务器类。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/5.png" alt="">图 5 strategy模式，即开放又封闭的 Client&lt;/p>&lt;p>图 5 展示了遵循 OCP 的设计，Client 类依赖 IClient 接口，Server 类实现 IClient 声明的方法，如果 Client 对象需要依赖另外的服务器时，只需要从 IClient 接口重新实现一个新的类，无需修改 Client 类。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/6.png" alt="">图 6 template method 模式，即开放又封闭的基类&lt;/p>&lt;p>图 6 展示了另一个可选的结构，Policy 类是一个抽象类，声明了公有的 policyFunction 方法，函数在子类中实现，这样可以通过从 Policy 类派生出新类的方式，对 Policy 中的行为进行扩展。&lt;/p>&lt;p>图 5 和图 6 两种模式是实现 OCP 的常用方法，通过这两种方法，可以将模块的通用部分和可能会改动的部分分离开来。&lt;/p>&lt;p>一般而言，无论模块多么「封闭」，都会存在一些无法对之封闭的变化，没有对所有情况都贴切的模型，设计人员必须对其设计的模块要对哪种变化封闭作出选择，必须先根据经验猜测出最有可能发生变化的种类，然后构造抽象来隔离变化。设计人员需要了解程序的用户和应用领域，以此来判断各种变化的可能性，让设计对于最有可能发生变化遵循 OCP。&lt;/p>&lt;p>通常很难判断变化的可能性，而且遵循 OCP 的代价也是高昂的，创建抽象需要花费精力和时间，抽象也增加了设计的复杂性。比起过渡设计而带来的不必要的复杂性来说，在变化发生时才应用 OCP 原则重构程序的方式可能会更好。&lt;/p>&lt;p>OCP 是面向对象设计的核心所在，遵循这个原则可以带来灵活性、可重用性以及可维护性，然而对程序中的每个部分都肆意的进行抽象同样不可取。正确的做法是，开放人员应该仅仅对程序中表现出频繁变化的那部分做抽象，拒绝不成熟的抽象和创建抽象一样重要。&lt;/p>&lt;h2 id="里氏替代原则liskov-substitution-principlelsp">里氏替代原则（Liskov substitution principle，LSP）&lt;/h2>&lt;p>LSP 是关于基类继承（inheritance）的原则。Barbara Liskov 指出，若对于&lt;em>每个类型 S 的对象 o1，都存在一个类型 T 的对象 o2，使得对于所有针对 T 编写的程序 P 中，用 o1 替换 o2 后，程序 P 的行为功能不变，那么 S 是 T 的子类型&lt;/em>。对里氏替代原则的简单解释是： 子类型（subtype）必须能够替换掉他们的基类型（base type）。&lt;/p>&lt;p>继承是 IS-A 的关系，如果一个新类型的对象和一个已知类型的对象之间满足 IS-A 关系，那么这个新对象的类应该是从这个已知对象的类派生的。&lt;/p>&lt;p>一般来说，正方形是一个（IS-A）矩形，因此 Square 类可以作为 Rectangle 类的子类，如图 7。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/7.png" alt="">图 7 Square 类是 Rectangle 类的子类&lt;/p>&lt;p>这样的设计可能会存在一些问题，首先 Square 类并不需要同时具有 setWidth 和 setHeight 方法，而且对于 Square 类来说 width 和 height 应该始终是相同的，更为严重的是，对于程序 2 的测试用例来说，如果把 Square 作为测试的参数是错误的。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Rectangle r&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setWidth&lt;/span>&lt;span style="color:#f92672">(&lt;/span>4&lt;span style="color:#f92672">);&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setWidth&lt;/span>&lt;span style="color:#f92672">(&lt;/span>5&lt;span style="color:#f92672">);&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span>&lt;span style="color:#f92672">(&lt;/span>r&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">area&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> 20&lt;span style="color:#f92672">);&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个模型，如果孤立的看，并不具有真正意义上的有效性，模型的有效性是通过模型的使用者来表现的。例如，如果孤立的看，图 7 的模型是有效的，但是从模型的使用者来说，图 7 这个模型是有问题的，在考虑一个设计是否恰当时，不能完全孤立的看设计，必须要在设计的使用者的视角来审视这个设计。&lt;/p>&lt;p>对于图 7 的设计这来说，正方形可以是长方形，但对于使用这来说，Square 对象 绝对不是 Rectangle 对象，因为 Square 对象的行为方式和使用者所期望的 Rectangle 对象的行为方式不相容，从行为方式的角度来看，Square 不是 Rectangle，对象的行为方式才是软件设计真正需要关注的问题。LSP清晰的指出，面向对象设计的 IS-A 关系是就行为方式而言的，行为方式才是使用者所需要的。&lt;/p>&lt;h2 id="依赖倒置原则dependency-inversion-principledip">依赖倒置原则（Dependency Inversion principle，DIP）&lt;/h2>&lt;p>高层模块不应该依赖低层模块，二者都应该依赖抽象；抽象不应该依赖细节，细节应该依赖抽象。&lt;/p>&lt;p>许多的传统软件开发方法，比如结构化分析和设计，总是倾向于创建一些高层模块依赖低层模块、业务逻辑依赖低层细节的软件结构，实际上些传统的开发方法的目的之一是要定义程序层次的结构，该层次结构描述了高层模块怎样调用低层模块。一个良好的面向对象的程序，其依赖层次结构相对于传统的过程式方法设计来说就是被「倒置」了。&lt;/p>&lt;p>如果高层模块直接依赖了低层模块，那么低层模块的改动就会直接影响高层模块，这种情形是非常荒谬的，本应该是高层模块去影响低层的细节实现模块，包含业务逻辑的高层模块应该优先并独立于包含细节的低层模块。而且如果高层模块依赖了低层模块，会导致重用高层模块难以被重用。所以高层模块不应该直接依赖于低层模块。&lt;/p>&lt;p>传统的分析和设计方法的知道思想是，「所有结构良好的面向对象架构都具有清晰的层次定义，每个层次通过一个定义良好的、受控的接口向外提供一组内聚的服务」。根据这个思想可能设计出类似于图 8 的接口，高层的 Policy Layer 依赖了低层的 Mechanism Layer，而 Mechanism Layer 又依赖了更细节的 Utility Layer。这样的设计使得高层模块 Policy Layer 对于其下一直到 Utility Layer 的改动都是敏感的。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/8.png" alt="">图 8 简单的层次化方案&lt;/p>&lt;p>图 9 展示了依赖关系倒置的模型，每个较高层次 Policy Layer 和 Mechanism Layer 为其需要的服务声明了抽象接口，较低的层次 Mechanism Layer 和 Utility 实现了较高层次模块的接口，高层类通过抽象接口来使用下一层，这样高层不依赖低层，低层反而依赖于在高层中声明的抽象接口。依赖关系被倒置了，接口所有权也倒置了，我们通常认为工具库应该拥有自己的接口，但使用了 DIP 后，客户拥有抽象接口，而服务这需要从这些抽象接口中派生。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/9.png" alt="">图 9 倒置的依赖关系&lt;/p>&lt;p>Hollywood 原则 —「don&amp;rsquo;t call us, we&amp;rsquo;ll call you」,低层模块实现了高层模块中声明的接口，通过接口所有权倒置， Mechanism Layer 和 Utility 的任何改动都不会再影响 Policy Layer，而且 Policy Layer 可以在实现了 IPolicyService 的任何上下文中重用。&lt;/p>&lt;p>对于 DIP 稍微简单的解释— 「依赖于抽象」。即不依赖于具体类，程序中的所有依赖关系都应该终止于抽象类或接口。任何变量都不应该持有一个指向具体类的指针或引用，任何类都不应该从具体类派生，任何派生类都不应该覆写基类中已实现的方法。&lt;/p>&lt;p>凡事皆有例外，程序中有时候必须要创建具体类的派生类；而且依赖具体但是稳定的类也不会造成什么问题。比如，Java 中直接依赖 String 类就不会造成什么问题。&lt;/p>&lt;p>然而我们我们程序中的大多数具体类都不是稳定的，我们不应该依赖于不稳定的具体类，通过抽象接口隐藏不稳定的具体类，可以隔离不稳定性。&lt;/p>&lt;p>图 10 展示了使用 Button 控制 Lamp 对象的模型，Button 接收 Poll 消息，然后向调用 Lamp 的 turnOn 或 turnOff 方法。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/10.png" alt="">图 10 不成熟的 Button 和 Lamp 模型&lt;/p>&lt;p>图 10 模型对应的代码如 程序 3。Button 类直接依赖 Lamp 类，这个依赖关系意味着当 Lamp 类改动时 Button 类会受影响，而且要重用 Button 来控制另外的设备是不可能的。程序中高层和低层没有实现分离，抽象和具体也没有分离，高层依赖了低层模块，抽象依赖了具体细节。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Button&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Lamp lamp&lt;span style="color:#f92672">;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">poll&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#75715e">/* some condition */&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lamp&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">turnOn&lt;/span>&lt;span style="color:#f92672">();&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过倒置 Lamp 对象的依赖关系，得到图 11 的设计，Button 现在和 ButtonService 接口关联，ButtonService 声明了一些方法，Button 可以使用 ButtonService 的方法开启或关闭一些设备，Lamp 实现了 ButtonService 接口，这样 Lamp 不再被 Button 直接依赖，而且 Button 可以控制任何实现了 ButtonService 接口的设备。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/11.png" alt="">图 11 对 Lamp 应用依赖倒置原则&lt;/p>&lt;p>面向对象的程序设计倒置了依赖关系，细节和高层模块都依赖于抽象，并且常常是接口使用方提供服务接口，即接口所有权也倒置了。首相和细节彼此隔离，代码也更容易维护。&lt;/p>&lt;h2 id="接口隔离原则interface-segregation-principlesisp">接口隔离原则（Interface-Segregation principles，ISP）&lt;/h2>&lt;p>不应该强迫客户程序依赖于它们不使用的方法。&lt;/p>&lt;p>接口隔离原则用来处理「胖接口」的缺点。如果接口不是内聚的，就表示该接口是「胖接口」。「胖接口」可以分解成多组方法，每组方法服务于一组不同的客户程序。&lt;/p>&lt;p>如果强迫客户程序依赖于它们不使用的方法，那么客户程序就可能会由于这些未使用的方法的改变而变更，无意中导致了所有客户程序之间的耦合。换句话说，如果一个客户程序依赖于一个包含它不使用的方法的类，但是其他客户程序却要使用这个方法，那么当其他客户要求这个类改变时，就会影响到这个客户程序。我们希望尽可能的避免这种耦合，因此需要分离接口。&lt;/p>&lt;p>设计一个安全系统，有一些 Door 对象，可以被加锁和解锁，并且 Door 对象知道自己的开关状态；设计一个 TimeDoor 对象，如果们开着时间过长，则发出警告声。所以 TimeDoor 对象需要和定时器 Timer交互。定时器 Timer 如程序 4。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Timer&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">register&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> timeout&lt;span style="color:#f92672">,&lt;/span> TimeClient client&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">TimeClient&lt;/span> &lt;span style="color:#f92672">{&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">timeout&lt;/span>&lt;span style="color:#f92672">();&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>怎么将 TimeClient 和 TimeDoor 联系起来呢？图 12 展示了一个易于理解的方案，让 Door 派生自 TimeClient，这样 TimeDoor 就自然的可以注册到 Timer 中，并接收到 Timeout 消息。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/12.png" alt="">图 12&lt;/p>&lt;p>图 12 方案的主要问题是，Door 类需要依赖于 TimeClient 了，并不是所有的 Door 都需要定时功能，如果存在无需定时的 Door，那么在新的 Door 中需要提供 timeout 方法的退化实现。而且其他的 Door 也不需要 TimeClient 对象，但是依然需要引入 TimeClient。这样 Door 具有了不必要的复杂性以及不必要的重复，Door 被污染了。&lt;/p>&lt;p>Door 和 TimeClient 接口是被不同的客户程序使用的，Timer 使用 TimeClient，TimeDoor 使用 Door，既然客户程序是分离的，那么接口也应该保持分离。&lt;/p>&lt;p>一种分离方式是创建一个 TimeClient的派生类 DoorTimeAdapter，依赖 TimeDoor，如 图13 所示。DoorTimeAdapter 注册到 Timer，当 Timer 对象发送 timeout 消息给 DoorTimeAdapter 时，DoorTimeAdapter 把这个消息委托给 TimeDoor。这个方案避免了 Door 和 Timer 之间的耦合，Timer 的改动不会影响到 Door 的使用者，DoorTimeAdapter 会将 TimeDoor 转换成 TimeClient，TimeDoor 也无需实现 TimeClient 的方法。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/13.png" alt="">图 13&lt;/p>&lt;p>但是这种 adapter 的处理方式有些复杂，我们可以让 TimeDoor 同时派生自 TimeClient 和 Door，如图 14 所示，这样 Timer 和 Door 也可以做到解藕。通常我们会优先选择这个方案。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/solid/14.png" alt="">图 14&lt;/p>&lt;p>「胖接口」会导致客户程序之间产生不必要的耦合关系，「胖接口」的改动可能会影响所有客户程序。客户程序应该仅仅依赖他们实际需要的方法，可以通过把「胖接口」分解为多个接口来实现客户程序和不需要的方法间的解藕，并使客户程序之间互不依赖。&lt;/p></description></item><item><title>敏捷软件开发原则</title><link>https://sunpe.github.io/posts/2020-11-25-principles-of-agile-software-development/</link><pubDate>Wed, 25 Nov 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-11-25-principles-of-agile-software-development/</guid><description>&lt;h2 id="我们最优先要做的是通过连续不断的及早的交付有价值的软件使客户满意">我们最优先要做的是通过连续不断的及早的交付有价值的软件使客户满意&lt;/h2>&lt;p>《Product-Development Practices That Work: How Internet Companies Build Software》论文分析了对于公司构建高质量产品方面有帮助的软件开发实践, 发现尽早交付具有部分功能的系统和系统质量之间具有很强的相关性, 论文指出 初期交付的系统中所包含的功能越少, 最终交付的系统质量就会越高. 该论文的另一项发现是, 以逐渐增加功能的方式经常性的交付系统和最终质量之间有着非常强的相关性, 交付的越频繁, 最终产品的质量就越高.&lt;/p>&lt;p>敏捷实践会尽早、经常的进行交付, 我们努力在项目刚开始的几周内交付一个具有基本功能的系统, 然后努力坚持每两周就交付一个功能渐增的系统.&lt;/p>&lt;h2 id="欣然面对需求变化-即使到了开发后期也一样-敏捷过程利用变化来为客户创造竞争优势">欣然面对需求变化, 即使到了开发后期也一样. 敏捷过程利用变化来为客户创造竞争优势&lt;/h2>&lt;p>敏捷过程的参与者不惧怕变化, 他们认为改变需求是好的事情. 敏捷团队会非常努力的保持软件结构的灵活性, 这样当需求变化时, 对于系统造成的影响是最小的.&lt;/p>&lt;h2 id="经常性的交付可以工作的软件-交付的间隔可以从几周到几个月-倾向于采取较短的周期">经常性的交付可以工作的软件, 交付的间隔可以从几周到几个月, 倾向于采取较短的周期&lt;/h2>&lt;p>我们交付可以工作的软件, 并且尽早的(项目刚开始的几周后)、 经常性的(此后每隔几周)交付它. 我们不赞成交付大量的文档或者计划, 我们认为那不是真正要交付的东西, 我们关注的目标是交付满足客户需要的软件.&lt;/p>&lt;h2 id="业务人员和开发人员必须相互合作-项目的每一天都不例外">业务人员和开发人员必须相互合作, 项目的每一天都不例外&lt;/h2>&lt;p>为了能够以敏捷的方式进行项目的开发, 客户、 开发人员以及涉众之间就必须要进行有意义的频繁的交互&lt;/p>&lt;h2 id="激发个体的斗志-以他们为核心搭建项目-提供所需的环境和支持并且信任他们能够完成工作">激发个体的斗志, 以他们为核心搭建项目. 提供所需的环境和支持，并且信任他们能够完成工作&lt;/h2>&lt;p>敏捷项目中, 人被认为是项目取得成功的最重要的因素. 所有其他因素—过程、环境、管理等等—都被认为是次要的, 并且当它们对于人有负面的影响时, 就要对它们进行改变. 例如如果办公环境对阮对的工作造成阻碍, 就必须对办公环境进行改变; 如果某些过程步骤对团队的工作造成阻碍, 就必须对那些过程和步骤进行改变.&lt;/p>&lt;h2 id="不论团队内外-最有效果并且富有效率的传递信息的方法-就是面对面交谈">不论团队内外, 最有效果并且富有效率的传递信息的方法, 就是面对面交谈&lt;/h2>&lt;p>敏捷项目中, 人们之间相互沟通, 首要的方式就是交谈. 团队可能会编写文档, 但文档不是默认的沟通方式, 团队成员进党迫切需要并意义重大的情况下才去编写文档, 默认的沟通方式是交谈&lt;/p>&lt;h2 id="可工作的软件是进度的首要度量标准">可工作的软件是进度的首要度量标准&lt;/h2>&lt;p>敏捷项目通过度量当前软件满足客户需求的数量来度量开发进度.&lt;/p>&lt;h2 id="敏捷过程倡导可持续的开发速度-责任人开发者和用户应该保持一个长期的-恒定的开发速度">敏捷过程倡导可持续的开发速度. 责任人、开发者和用户应该保持一个长期的、 恒定的开发速度&lt;/h2>&lt;p>敏捷项目不是50m短跑, 而是马拉松长跑. 跑的过快会导致团队精力耗尽. 敏捷团队不允许自己过于疲惫, 不会借用明天的精力来在今天多完成一点工作. 他们工作在一个可以使在整个项目开发期间保持最高质量标准的速度上.&lt;/p>&lt;h2 id="不断关注优秀的技能和好的设计会增强敏捷能力">不断关注优秀的技能和好的设计会增强敏捷能力&lt;/h2>&lt;p>快速开发的关键是高的产品质量, 保持软件尽可能的简洁、健壮才能做到快速开发. 因此所有团队成员都致力于只编写他们能够编写的最高质量的代码. 他们不会编写混乱的代码然后告诉自己等有更多的实践再来清理他们.&lt;/p>&lt;h2 id="以简洁为本是极力减少不必要工作量的艺术">以简洁为本,是极力减少不必要工作量的艺术&lt;/h2>&lt;p>敏捷团队不会试图构建华而不实的系统, 他们更愿意采用和目标一致的最简单的方法. 他们不会看重明天会不会出现问题, 也不会在今天就对那些可能出现的问题进行防卫. 相反, 他们在今天以最高质量完成最简单的工作, 身心如果明天发生了问题, 也会很容易处理.&lt;/p>&lt;h2 id="最好的架构-需求和设计出自于自组织的团队">最好的架构、 需求和设计出自于自组织的团队&lt;/h2>&lt;p>敏捷团队是自组织的团队, 任务不是从外部分配给单个团队成员, 而是分配给整个团队, 然后再有团队来确定完成任务的最好方法. 敏捷团队的成员共同解决项目中所有的问题. 每一个成员都具有项目中所有方面的参与权利. 不存在单一的团队成员对系统的架构、需求或者测试负责的情况, 整个团队共同承担那些责任, 每一个团队成员都能够影响它们&lt;/p>&lt;h2 id="团队定期的反思如何能提高成效-并以此调整自身的举止表现">团队定期的反思如何能提高成效, 并以此调整自身的举止表现&lt;/h2>&lt;p>敏捷团队会不断的对团队的组织方式、规则、规范、关系等进行调整, 敏捷团队直到团队所处的环境在不断变化, 并且直到为了保持团队的敏捷性, 团队需要随着环境一起变化.&lt;/p>&lt;h2 id="总结">总结&lt;/h2>&lt;p>每一位软件开发人员、每一个开发团队的职业目标都是给客户交付最大可能的价值. 可是, 我们的项目以令人沮丧的速度失败, 或者未能交付任何价值. 虽然在项目中采用过程方法是出于好意, 但是膨胀的过程对与项目的失败或多或少的应该负一些责任. 敏捷软件开发的原则和价值观构成了一个可以帮助团队打破过程膨胀循环的方法, 这个方法关注的是可以达到团队目标的一些简单技术。&lt;/p></description></item><item><title>敏捷软件开发宣言</title><link>https://sunpe.github.io/posts/2020-11-20-manifesto-for-agile-software-development/</link><pubDate>Fri, 20 Nov 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-11-20-manifesto-for-agile-software-development/</guid><description>&lt;p>由于看到众多团队陷入了不断增长的过程的泥潭，一批业界专家概括出了一些可以让软件开发团队具有快速工作、响应变化能力的价值观和原则，这些专家称自己为敏捷（Agile）联盟，并创造出了一份价值观声明，也就是敏捷联盟宣言。&lt;/p>&lt;h2 id="个体和交互胜过过程和工具">个体和交互胜过过程和工具&lt;/h2>&lt;p>人是获得成功的最主要因素。如果团队中没有优秀的成员，那么就是再好的过程也不能挽救失败的项目。但是不好的过程可以使优秀的团队成员失去作用。如果团队成员不能作为一个团队进行工作，那么即使拥有一批优秀的成员也一样会失败。&lt;/p>&lt;p>一个优秀的团队成员不一定要是一个一流的程序员，可以是一个平均水平的程序员，但是却能够很好的和他人合作。合作、 沟通以及交互能力要比单纯的编程能力更重要。&lt;/p>&lt;p>合适的工具非常重要，比如编译器、 IDE、 源码管理系统等。然而使用过多的庞大、笨重的工具和缺少工具一样，都是不好的。大而笨重的工具带来的障碍往往大于带来的帮助。从使用小工具开始，感觉工具不够用了再去寻找先进的、价格昂贵的工具。&lt;/p>&lt;p>团队的构建比环境构建要重要的多。许多管理者往往希望先构建环境，然后期望团队可以自动凝聚在一起， 然而往往事与愿违。应该首先致力于团队建设，然后再让团队基于需要来配置环境。&lt;/p>&lt;h2 id="可以工作的软件胜过面面俱到的文档">可以工作的软件胜过面面俱到的文档&lt;/h2>&lt;p>没有文档的软件是一种灾难，代码不是传达系统原理和结构的理想媒介，团队更需要编写易于阅读的文档，来描述系统以及其他设计决策的依据。&lt;/p>&lt;p>然而，过多的文档比过少的文档更糟糕。编制众多的文档需要花费大量时间，并且要使文档和代码保持同步就需要花费更多时间，如果代码和文档之间失去了同步，那么文档就失去了作用，甚至会造成误导。&lt;/p>&lt;p>对于团队来说，有必要编写并维护一份系统原理和结构方面的文档，文档应该是篇幅短小的并且主题突出的，应该仅论述系统的高层结构和概括的设计原理。&lt;/p>&lt;p>在给新的团队成员传授知识方面，最好的两份文档就是代码和团队。代码真实的表达了它所做的事情，是唯一没有二义性的信息源。在团队成员的大脑中，保存着市场变化的系统脉络图，人和人之间的交互是把这份脉络图传授给他人的最快、最有效的方式。&lt;/p>&lt;p>所以直到迫切需要并且意义重大时，才来编制文档。&lt;/p>&lt;h2 id="客户合作胜过合同谈判">客户合作胜过合同谈判&lt;/h2>&lt;p>告诉研发团队想要的东西，然后期望研发团队消失一段时间后就能够交付一个需要的系统，这对于公司的管理者来说是具有诱惑力的，然后这种模式终将导致低劣的质量和失败。成功的项目需要有序、频繁的客户反馈。&lt;/p>&lt;p>一个指明了需求、进度以及项目成本的合同存在根本上的缺陷，那些为研发团队和客户的协同工作方式提供指导的合同才是最好的合同。&lt;/p>&lt;h2 id="响应变化胜过遵循计划">响应变化胜过遵循计划&lt;/h2>&lt;p>响应变化的能力常常决定着一个软件的成败，当我们构建计划时，应当确保计划是灵活的，并且易于适应商务和技术方面的变化。&lt;/p>&lt;p>计划不能考虑的过远。首先，商务环境可能会变化，会引起需求的变动；其次，客户看到系统后，他们很可能会修改需求；最后，即使我们熟悉需求，并且确信他们不会改变，我们仍然不能很好的估算出开发他们需要的时间。&lt;/p>&lt;p>为未来两周做详细的计划，为未来三个月做粗略的计划，更远的时间就做更为粗糙的计划。我们应该清楚的知道未来两周要完成的任务，粗略的了解一下未来三个月的计划，至于半年后甚至更久远的时间，有一个模糊的想法就行了。由近及远逐渐降低细致程度，仅仅对于迫切的任务才耗费时间进行详细的计划，一旦制定了这个详细的计划，就尽量不要改变。计划仅仅支配了几周的时间，计划的其余部分仍然保持着灵活性。&lt;/p></description></item><item><title>设计的臭味—软件腐化的气味</title><link>https://sunpe.github.io/posts/2020-11-10-the-smell-of-software-corruption/</link><pubDate>Tue, 10 Nov 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-11-10-the-smell-of-software-corruption/</guid><description>&lt;p>设计不是一组和代码分离的UML图, UML图也许描绘了设计的一部分, 但是它不是设计. 软件项目的设计是一个抽象的概念, 和程序的概括形状(shape)、结构、以及每一个模块、类和方法的详细形状和结构有关, 可以使用不同的媒介去描绘它, 但最终体现为源码, 最后, 源码就是设计.&lt;/p>&lt;h2 id="设计的臭味软件腐化的气味">设计的臭味—软件腐化的气味&lt;/h2>&lt;p>项目刚开始甚至首次发布时, 系统设计是清晰的, 随着时间流失, 丑陋的设计和弊病在代码中积累, 使其越来越难以维护, 最后仅仅是最简单的更改也要花费巨大的代价, 以至于开发人员和一线管理人员强烈要求重新设计. 这样的设计很少会成功, 老系统不断发展和变化, 新的设计必须跟上这些变化, 所以新系统第一次发布就积累了很多瑕疵和弊病.&lt;/p>&lt;p>当软件出现下面任何一种坏味道时, 就表明软件正在腐化.&lt;/p>&lt;h3 id="1-僵化性">1. 僵化性&lt;/h3>&lt;p>很难对软件进行改动, 即便是简单的改动. 如果单一的改动会导致有依赖关系的模块中的连锁改动, 那么这样的设计就是僵化的, 要改动的模块越多, 设计就越僵化&lt;/p>&lt;h3 id="2-脆弱性">2. 脆弱性&lt;/h3>&lt;p>对系统进行改动时, 会导致系统中和改动地方在概念上无关的许多地方出现问题, 要修正这些问题又会引入更多的问题. 随着脆弱性的增加, 改动会越容易引出意想不到的问题. 开发人员知道需要对它们进行重新设计, 但是越修正, 就变得越糟.&lt;/p>&lt;h3 id="3-牢固性">3. 牢固性&lt;/h3>&lt;p>设计中包含了对其他系统有用的部分, 但是很难解开系统间的纠结, 要把这部分从系统中分离出来需要的努力和风险都是巨大的.&lt;/p>&lt;h3 id="4-粘滞性">4. 粘滞性&lt;/h3>&lt;p>粘滞性有两种表现: 软件的粘滞性和环境的粘滞性&lt;/p>&lt;p>进行系统改动时, 开发人员会有多种改动方式, 其中一些会保持设计, 另外一些会破坏设计. 当那些可以保持系统设计的方法比那些破坏系统设计的方法更难应用时, 就表明系统具有高的粘滞性. 做错误的事情很容易, 而做正确的事情很难. 我们系统在软件设计中可以容易的进行那些保持设计的改动.&lt;/p>&lt;p>当开发环境迟钝、低效时, 就会产生环境粘滞性. 例如, 如果编译花费时间很长, 那么开发人员就会被引诱去做不会导致大规模重新编译的改动, 即使那些改动不再保持设计; 如果源码控制系统check in很困难, 那么开发人员就会被引诱去做那些需要尽可能少check in的改动, 而不管改动是否会保持设计.&lt;/p>&lt;p>无论项目具有哪种粘滞性, 都很难保持项目中的软件设计. 我们希望创建易于保持设计的系统和项目环境.&lt;/p>&lt;h3 id="5-不必要的复杂性">5. 不必要的复杂性&lt;/h3>&lt;p>如果设计中包含当前没用的组成部分, 就含有了不必要的复杂性. 开发人员常常预测需求的变化, 并在软件中放置了处理那些潜在变化的代码. 起初, 看起来像是一件好事, 但过多的可能性准备导致设计中包含绝不会用到的结构, 从而变得混乱. 一些准备可能会带来回报, 但更多的不会有作用. 设计背负这这些不会用到的部分, 是软件变的复杂, 并难以理解&lt;/p>&lt;h3 id="6-不必要的重复性">6. 不必要的重复性&lt;/h3>&lt;p>复制和粘贴操作常常会导致重复的代码片段, 当同样的代码以稍微不同的形式重复出现时, 就表示开发人员忽略了抽象. 发现所有的重复并通过适当的抽象去消除重复, 会使系统的更加易于理解和维护. 当系统有重复的代码时, 对系统进行改动会变得困难, 在一个重复的代码体中发现的错误总是需要在每个重复体中一一修正, 由于每个重复体之间都有细微的区别, 所以修正的方式也不尽相同.&lt;/p>&lt;h3 id="7-晦涩性">7. 晦涩性&lt;/h3>&lt;p>晦涩性是指模块难以理解。代码可以是清晰、富有表现力的，也可以是晦涩的费解的，代码随着时间往往会变得越来越晦涩，为了是代码晦涩性保持最低，就需要持续的保持代码清晰并富有表现力。开发者最初编写模块时，可能会很熟悉代码，随着时间推移，熟悉减退，再看这个模块，同样会觉得代码很糟糕，为了避免这种情况，开发者需要站在代码阅读者的角度，对他们代码进行重构，这样代码阅读者就可以理解代码。&lt;/p>&lt;h2 id="敏捷团队不允许软件腐化">敏捷团队不允许软件腐化&lt;/h2>&lt;p>在非敏捷环境中，需求没有按照初始设计和计划的方式进行变化，从而导致了设计的退化。通常改动痘痕急迫，并且进行改动的开发人员对于原始设计思路可能并不熟悉，因而虽然改动可以工作，但是却以某种方式违反了原始的设计。随着改动的不断进行，这些违反设计的行为不断积累，设计开始出现臭味。&lt;/p>&lt;p>敏捷团队依靠变化来获取活力，团队几乎不进行预先设计，因此不需要一个成熟的设计。他们更愿意保持系统尽可能干净、简单，并使用许多单元测试和验收测试，保持了设计的灵活性和可理解性。&lt;/p></description></item><item><title>缓存常见问题</title><link>https://sunpe.github.io/posts/2020-10-30-use-case-of-cache/</link><pubDate>Fri, 30 Oct 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-10-30-use-case-of-cache/</guid><description>&lt;p>Redis 一个比较常见的场景就是作为应用的缓存，合理的利用缓存可以提升系统性能，使用过程中比较常见的问题有：缓存穿透、 缓存雪崩、 热点key问题。&lt;/p>&lt;h2 id="缓存击穿">缓存击穿&lt;/h2>&lt;p>在做数据库缓存的使用场景中，我们通常会先从 Redis 中查询数据，如果在 Redis 中查询不到数据，则会查询数据库中的数据。如果查询的是不存在的数据，比如 id 是「-1」的用户，则会导致每次请求都会去数据库中查询，如果这种请求过多，会导致数据库压力过大，造成缓存击穿问题。&lt;/p>&lt;p>解决「缓存击穿」问题大致有三种方案，从业务角度解决、缓存空值和采用布隆过滤器。&lt;/p>&lt;h3 id="从业务角度解决">从业务角度解决&lt;/h3>&lt;p>可以判断查询的数据是否符合规范，比如小于 0 的 ID 可以不进行查询。查询前先校验要查询的 ID 是否是符合规范的 ID。&lt;/p>&lt;h3 id="缓存空值">缓存空值&lt;/h3>&lt;p>查询数据库之后，对于数据库中不存在的数据我们可以把 Redis 中对应的 key 设置为一个空值，这样再次收到相同的请求就可以命中缓存了。需要注意的是如果对应的 key 设置了新的有效的值，则需要将缓存中的数据删掉。这种方案有一个问题是，如果攻击者采用不同的伪造请求进行攻击时，可能会导致缓存空间暴涨，进而影响了正常的数据查询。&lt;/p>&lt;h3 id="采用布隆过滤器">采用布隆过滤器&lt;/h3>&lt;p>布隆过滤器（Bloom Filter）实际上是一个很长的二进制向量和一些列映射函数，可以检测一个元素是否在一个集合中。优点是空间利用率和查询效率都比较高；缺点是有一定的误识别率和删除困难。在4.0以上版本 Redis 中可以通过 module 加载 RedisBloom 来实现布隆过滤器。&lt;/p>&lt;h2 id="缓存雪崩">缓存雪崩&lt;/h2>&lt;p>我们使用 Redis 通常会设置 key 的过期时间，如果大量的 key 设置了相同的过期时间，可能会导致同一时间大量key失效，导致大量请求到了数据库，造成数据库瞬时压力过大，造成缓存雪崩的问题。另外缓存故障也可能导致缓存雪崩问题，比如Redis不可用等。&lt;/p>&lt;h3 id="解决方案">解决方案&lt;/h3>&lt;p>缓存失效导致的缓存雪崩问题可以通过设置不同的过期时间的方式来解决。比如设置缓存 key 的过期时间可以采用「固定的时间」加随机数的方式。另外应当使用集群模式，比如 Redis Sentinel 和 Redis Cluster ，避免单点问题。&lt;/p>&lt;h2 id="热点key">热点key&lt;/h2>&lt;p>某些场景，比如秒杀、 微博大V、 热点新闻等，会导致缓存中某个key访问量特别大，极端情况可能会超出单台 server 的承载能力。&lt;/p>&lt;h3 id="服务端缓存">服务端缓存&lt;/h3>&lt;p>对于读多写少的场景，可以将热点数据缓存到服务端本地，可以减少对后端缓存或数据库的压力。本地缓存可以使用 Map 数据结构，或者使用成熟的开源方案，比如 Guava 中的 &lt;code>LocalCache&lt;/code>，&lt;code>LocalCache&lt;/code> 自带key过期功能，使用也比较方便。&lt;/p>&lt;p>本地缓存方案简单，可以明显提升系统系能，但也可能带来「脏数据」问题，比如数据库和全局缓存中某条数据更新或删除，本地缓存更新不及时，依旧返回的是旧数据。可以搭配「定时轮询」或「发布-订阅」的方式来解决本地缓存更新不及时的问题。本地server可以定期轮询缓存和数据库中相应key的数据，来更新本地缓存；或者当数据变更时通过消息队列「广播」或者 zk 来通知所有 server 更新数据。&lt;/p>&lt;h3 id="拆分key">拆分key&lt;/h3>&lt;p>在 Redis 集群中，key 按一定的分片算法分布在不同的分片上，我们可以将热点的 key 拆分成多个 key，比如将 key 加上后缀或前缀，以让key分布在不同的分片，来分担单个分片的压力。热点 key 按「读多写少」或「写多读少」可以分为「读热点key」和「写热点key」。对于读取热点 key，更新时需要更新所有 key 的数据，通过放大写入的方式来提高读取性能；对于写热点key，更新时选择其中一个key做更新，读取时需要合并所有key，采用读放大的方式来提高写入性能。&lt;/p>&lt;h2 id="热点key发现">热点key发现&lt;/h2>&lt;h3 id="人工判断">人工判断&lt;/h3>&lt;p>某些特定的场景可以预测出可能存在的热点 key，比如秒杀的产品或者大V等等，可以提前在系统中提前配置热点 key，通过配置中心或队列下发到服务端。&lt;/p>&lt;h3 id="自动发现热key">自动发现热key&lt;/h3>&lt;p>可以通过监控打点来检测热点 key，当 key 的访问频率达到某个阈值后，将其标记为热点 key，通过配置中心或队列下发到服务端。此外 Redis 4.0 新增了 allkey-lfu 和 volatile-lfu 两种数据过期策略，并且可以通过 OBJECT 命令获取某个 key 的访问频率，在客户端可以通过&lt;code>--hotkeys&lt;/code>快速找到热点 key, 使用方式 &lt;code>redis-cli -h &amp;lt;host&amp;gt; -a &amp;lt;password&amp;gt; --hotkeys&lt;/code>。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/use_case_of_cache/1.png" alt="">&lt;/p>&lt;p>通常会采用人工配置和自动发现一起的方式来发现热点key，通过人工的方式提前配置已知的热key，并通过流式计算等方式自动发现潜在的热key。&lt;/p>&lt;h2 id="总结">总结&lt;/h2>&lt;p>应用缓存是提升系统性能的有效手段，由缓存引入的问题可以根据业务和现实情况不同，应该选择适合自己的方案来解决。&lt;/p></description></item><item><title>开启goroutine前确保goroutine可以退出</title><link>https://sunpe.github.io/posts/2020-10-17-make-sure-goroutine-willstop/</link><pubDate>Sat, 17 Oct 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-10-17-make-sure-goroutine-willstop/</guid><description>&lt;p>golang 可以通过 goroutine 来实现高并发，并且创建 goroutine 的开销很小，可以很轻松的创建成千上万的 goroutine。但有个问题需要注意，在创建 goroutine 之前，必须要清楚创建的 goroutine 将如何退出，否则 goroutine 将常驻内存，可能会导致内存泄漏等问题。&lt;/p>&lt;p>程序 1 展示了因为 goroutine 导致内存泄漏的 demo。leak 函数中，创建一个channel，并启动一个goroutine 来消费这个channel。这个 goroutine 结束的唯一条件是关闭 ch。但是 leak 函数返回之后，ch 没有被关闭，这样 goroutine 会一直在内存中，随着 leak 函数调用次数的增多，占用内存也随着增长，最终导致内存泄漏。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 1&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">leak&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span> { }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }() &lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以在使用 go 关键词开启 goroutine 之前，必须要清楚 goroutine 的退出条件。&lt;/p>&lt;h2 id="参考资料">参考资料&lt;/h2>&lt;ol>&lt;li>&lt;a href="https://dave.cheney.net/2016/12/22/never-start-a-goroutine-without-knowing-how-it-will-stop">https://dave.cheney.net/2016/12/22/never-start-a-goroutine-without-knowing-how-it-will-stop&lt;/a>&lt;/li>&lt;/ol></description></item><item><title>热点账户处理</title><link>https://sunpe.github.io/posts/2020-09-26-hot-account/</link><pubDate>Sat, 26 Sep 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-09-26-hot-account/</guid><description>&lt;p>互联网交易中，当某一商家交易量大的时候，商家对应的账户更新的比较频繁，该商家对应的账户记录会变成热点行，该商家的账户就是热点账户。通常热点账户会导致各种系统问题，对数据库也会造成很大压力。&lt;/p>&lt;h2 id="热点账户分类">热点账户分类&lt;/h2>&lt;p>根据资金流动的方向可以把热点账户分为「加频账户」、「减频账户」和「双频账户」。 其中「加频账户」是指资金流入比较频繁的账户，比如商家的收款账户；「减频账户」是指资金流出比较频繁的账户，比如商家的退款账户；「双频账户」指流入和流出都比较频繁的账户，比如商家在电商平台开设的内部户。&lt;/p>&lt;h2 id="热点账户识别">热点账户识别&lt;/h2>&lt;p>在交易系统中可以通过提前配置、 实时统计和同步的方式来识别热点账户。历史的热点账户可以提前配置到系统中，在交易过程中可以利用流式计算的思路实时统计账户请求量，当请求量达到阈值将账户信息同步到系统的热点账户名单中。系统整体架构如图 1 所示。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/hot_account/1.png" alt="">图 1&lt;/p>&lt;h2 id="热点账户问题解决方案">热点账户问题解决方案&lt;/h2>&lt;h3 id="1-限流">1. 限流&lt;/h3>&lt;p>热点账户问题的根源是大量请求并发竞争账户的操作权，账户的操作权是稀缺资源，所以我们可以减少单位时间内对账户的操作次数，所以「限流」通常是最直接有效的解决方式。限流简单来说就是超出我能力范围的不处理。如图 2 所示。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/hot_account/2.png" alt="">图 2&lt;/p>&lt;p>虽然限流能明显减少对账户的操作，但限流是通过拒绝交易来达到目的，通常会影响客户体验，这种方式通常作为系统保障的兜底措施。&lt;/p>&lt;h3 id="2-缓冲">2. 缓冲&lt;/h3>&lt;p>缓冲的方式就是同步转异步来处理交易请求。互联网交易热点通常具有瞬时性，可以先把请求接下来，比如缓冲到消息队列中，并将结果返回给调用方。然后在从消息队列中取出交易数据进行处理，借助消息队列的「削峰填谷」的特性来消除瞬时的热点。如图 3 所示。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/hot_account/3.png" alt="">图 3&lt;/p>&lt;p>但缓冲的方式可能会导致请求大量积压，如果积压的量超过日处理能力的上限，可能会导致循环积压的问题。由于缓冲队列消费不及时可能会导致账户金额更新不及时，这种情况下可以采用全局缓存来缓存账户信息，将数据放到缓冲队列前，先更新缓存中账户数据。这种方式比较适合处理瞬时的热点数据。&lt;/p>&lt;h3 id="3-合并请求数据">3. 合并请求数据&lt;/h3>&lt;p>我们还可以合并用户的请求的方式来削减单位时间内对账户的操作次数。先将明细数据保存下来，然后使用单独的 worker 来汇总明细数据，并更新账户数据。如图 4 所示。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/hot_account/4.png" alt="">图 4&lt;/p>&lt;p>这种方式也会造成账户数据更新上的延迟，同样可以采用全局缓存的方式来缓存账户信息，保存明细数据的同时更新缓存中的账户信息。&lt;/p>&lt;h3 id="4-分治">4. 分治&lt;/h3>&lt;p>账户的操作权是稀缺资源，除了减少账户操作次数这一思路之外，我们还可以利用分治的思想，给主账户创建多个影子账户，将主账户的资金分散到影子账户中，通过一定的路由规则，将交易请求发送到不同的影子账户上。如图 5 所示。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/hot_account/5.png" alt="">图 5&lt;/p>&lt;p>这种方式带来的问题是，如何来平衡影子账户的资金和如果账户资金不足要扣减多个账户的时候怎么处理。&lt;/p>&lt;h3 id="缓存">缓存&lt;/h3>&lt;p>缓存是高并发系统的又一大利器，在以上方案中也有缓存的应用，总体思路是将账户数据同步到缓存中，缓存数据异步刷新到数据库中。这种方式需要考虑缓存和数据库数据一致性的问题，如果发生数据不一致的情况，可能需要根据明细数据进行对账操作。&lt;/p>&lt;h2 id="总结">总结&lt;/h2>&lt;p>处理热点账户的问题需要根据具体业务和应用场景来具体处理，选择合适的解决方案，最重要的是需要保证账户数据的一致性。&lt;/p></description></item><item><title>golang 语言机制之内存剖析</title><link>https://sunpe.github.io/posts/2020-09-04-golang-memory-analyst/</link><pubDate>Fri, 04 Sep 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-09-04-golang-memory-analyst/</guid><description>&lt;p>《&lt;a href="https://sunpe.github.io/posts/golang-escape/">Golang 语言机制之逃逸分析&lt;/a>》中介绍了编译器逃逸分析的基础知识，除了共享变量这种情况之外，还有其他情况也会导致变量逃逸。&lt;/p>&lt;h2 id="示例代码">示例代码&lt;/h2>&lt;p>示例代码是读取byte数组，找到 &lt;code>elvis&lt;/code> 字符串并替换成 &lt;code>Elvis&lt;/code>。示例代码在 &lt;a href="https://play.golang.org/p/n_SzF4Cer4">https://play.golang.org/p/n_SzF4Cer4&lt;/a>，benchmark 在 &lt;a href="https://play.golang.org/p/TnXrxJVfLV">https://play.golang.org/p/TnXrxJVfLV&lt;/a>。示例代码中有两个函数实现这个功能，这篇文章只关注其中的 &lt;code>algOne&lt;/code> 函数。&lt;/p>&lt;p>以下是入参和期望 &lt;code>algOne&lt;/code> 函数输出的结果。&lt;/p>&lt;pre tabindex="0">&lt;code>Input:abcelvisaElvisabcelviseelvisaelvisaabeeeelvise l v i saa bb e l v i saa elviselvielviselvielvielviselvi1elvielviselvisOutput:abcElvisaElvisabcElviseElvisaElvisaabeeeElvise l v i saa bb e l v i saa elviselviElviselvielviElviselvi1elviElvisElvis&lt;/code>&lt;/pre>&lt;p>程序 1 是 &lt;code>algOne&lt;/code> 函数代码。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 1&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">algOne&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">find&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">repl&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">output&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">81&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">82&lt;/span> &lt;span style="color:#75715e">// Use a bytes Buffer to provide a stream to process.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#ae81ff">83&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">NewBuffer&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">84&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">85&lt;/span> &lt;span style="color:#75715e">// The number of bytes we are looking for.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#ae81ff">86&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">find&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">87&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">88&lt;/span> &lt;span style="color:#75715e">// Declare the buffers we need to process the stream.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span> &lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">90&lt;/span> &lt;span style="color:#a6e22e">end&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">91&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">92&lt;/span> &lt;span style="color:#75715e">// Read in an initial number of bytes we need to get started.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#ae81ff">93&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">ReadFull&lt;/span>(&lt;span style="color:#a6e22e">input&lt;/span>, &lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#a6e22e">end&lt;/span>]); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">94&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#a6e22e">n&lt;/span>])&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">95&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">96&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">97&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">98&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">99&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#75715e">// Read in one byte from the input stream.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">101&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">ReadFull&lt;/span>(&lt;span style="color:#a6e22e">input&lt;/span>, &lt;span style="color:#a6e22e">buf&lt;/span>[&lt;span style="color:#a6e22e">end&lt;/span>:]); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">102&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">103&lt;/span> &lt;span style="color:#75715e">// Flush the reset of the bytes we have.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">104&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#a6e22e">end&lt;/span>])&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">105&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">106&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">107&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">108&lt;/span> &lt;span style="color:#75715e">// If we have a match, replace the bytes.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">109&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Compare&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>, &lt;span style="color:#a6e22e">find&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">110&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">repl&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">111&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">112&lt;/span> &lt;span style="color:#75715e">// Read a new initial number of bytes.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">113&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">ReadFull&lt;/span>(&lt;span style="color:#a6e22e">input&lt;/span>, &lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#a6e22e">end&lt;/span>]); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">114&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#a6e22e">n&lt;/span>])&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">115&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">116&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">117&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">118&lt;/span> &lt;span style="color:#66d9ef">continue&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">119&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">120&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">121&lt;/span> &lt;span style="color:#75715e">// Write the front byte since it has been compared.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">122&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">WriteByte&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>])&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">123&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">124&lt;/span> &lt;span style="color:#75715e">// Slice that front byte out.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#ae81ff">125&lt;/span> copy(&lt;span style="color:#a6e22e">buf&lt;/span>, &lt;span style="color:#a6e22e">buf&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>:])&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">126&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">127&lt;/span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们通过 benchmark 来了解 &lt;code>algOne&lt;/code> 函数的性能表现和对堆的压力。&lt;/p>&lt;h2 id="benchmarking">Benchmarking&lt;/h2>&lt;p>程序2是 &lt;code>algOne&lt;/code> 函数的 benchmark 代码。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 2&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BenchmarkAlgorithmOne&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">assembleInputStream&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">find&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []byte(&lt;span style="color:#e6db74">&amp;#34;elvis&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">repl&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []byte(&lt;span style="color:#e6db74">&amp;#34;Elvis&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">ResetTimer&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">N&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Reset&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">algOne&lt;/span>(&lt;span style="color:#a6e22e">in&lt;/span>, &lt;span style="color:#a6e22e">find&lt;/span>, &lt;span style="color:#a6e22e">repl&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">output&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们通过 &lt;code>go test -run none -bench AlgorithmOne -benchtime 3s -benchmem&lt;/code> 运行 benchmark，输出如下：&lt;/p>&lt;pre tabindex="0">&lt;code>$go test -run none -bench AlgorithmOne -benchtime 3s -benchmemBenchmarkAlgorithmOne-8 2000000 2522 ns/op 117 B/op 2 allocs/op&lt;/code>&lt;/pre>&lt;p>我们可以看到 &lt;code>algOne&lt;/code> 函数有两次内存分配，每次分配了 117 个字节。我们通过 profiling 数据来看一下哪行代码造成了内存分配。&lt;/p>&lt;h2 id="profiling">Profiling&lt;/h2>&lt;p>在 &lt;code>go test&lt;/code> 后加上 &lt;code>memprofile&lt;/code> 参数，重新执行测试。&lt;/p>&lt;pre tabindex="0">&lt;code>$ go test -run none -bench AlgorithmOne -benchtime 3s -benchmem -memprofile mem.outBenchmarkAlgorithmOne-8 2000000 2570 ns/op 117 B/op 2 allocs/op&lt;/code>&lt;/pre>&lt;p>benchmark 执行结束后，会生成两个新文件。&lt;/p>&lt;pre tabindex="0">&lt;code>~/code/go/src/.../memcpu$ ls -ltotal 9248-rw-r--r-- 1 bill staff 209 May 22 18:11 mem.out (NEW)-rwxr-xr-x 1 bill staff 2847600 May 22 18:10 memcpu.test (NEW)-rw-r--r-- 1 bill staff 4761 May 22 18:01 stream.go-rw-r--r-- 1 bill staff 880 May 22 14:49 stream_test.go&lt;/code>&lt;/pre>&lt;p>源码在 memcpu 目录中，&lt;code>algOne&lt;/code> 函数在 stream.go 文件中，benchmark 测试在 stream_test.go 文件中。mem.out 和 memcpu.test 是新生成的文件，内容是profile数据，有了这俩文件，就可以使用 &lt;code>pprof&lt;/code> 工具进行分析了&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">tool&lt;/span> &lt;span style="color:#a6e22e">pprof&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">alloc_space&lt;/span> &lt;span style="color:#a6e22e">memcpu&lt;/span>.&lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#a6e22e">mem&lt;/span>.&lt;span style="color:#a6e22e">out&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Entering&lt;/span> &lt;span style="color:#a6e22e">interactive&lt;/span> &lt;span style="color:#a6e22e">mode&lt;/span> (&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#e6db74">&amp;#34;help&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">commands&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#a6e22e">pprof&lt;/span>) &lt;span style="color:#a6e22e">_&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里我们使用 &lt;code>-alloc_space&lt;/code> 来分析内存分配。我们使用 &lt;code>list algOne&lt;/code> 命令查看 &lt;code>algOne&lt;/code> 函数的内存分配。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#a6e22e">pprof&lt;/span>) &lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#a6e22e">algOne&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Total&lt;/span>: &lt;span style="color:#ae81ff">335.03&lt;/span>&lt;span style="color:#a6e22e">MB&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ROUTINE&lt;/span> &lt;span style="color:#f92672">========================&lt;/span> &lt;span style="color:#f92672">.../&lt;/span>&lt;span style="color:#a6e22e">memcpu&lt;/span>.&lt;span style="color:#a6e22e">algOne&lt;/span> &lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#a6e22e">code&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#66d9ef">go&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">/.../&lt;/span>&lt;span style="color:#a6e22e">memcpu&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">335.03&lt;/span>&lt;span style="color:#a6e22e">MB&lt;/span> &lt;span style="color:#ae81ff">335.03&lt;/span>&lt;span style="color:#a6e22e">MB&lt;/span> (&lt;span style="color:#a6e22e">flat&lt;/span>, &lt;span style="color:#a6e22e">cum&lt;/span>) &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#a6e22e">of&lt;/span> &lt;span style="color:#a6e22e">Total&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">78&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">79&lt;/span>:&lt;span style="color:#75715e">// algOne is one way to solve the problem.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> . . &lt;span style="color:#ae81ff">80&lt;/span>:&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">algOne&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">find&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">repl&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">output&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">81&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">82&lt;/span>: &lt;span style="color:#75715e">// Use a bytes Buffer to provide a stream to process.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#ae81ff">318.53&lt;/span>&lt;span style="color:#a6e22e">MB&lt;/span> &lt;span style="color:#ae81ff">318.53&lt;/span>&lt;span style="color:#a6e22e">MB&lt;/span> &lt;span style="color:#ae81ff">83&lt;/span>: &lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">NewBuffer&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">84&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">85&lt;/span>: &lt;span style="color:#75715e">// The number of bytes we are looking for.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> . . &lt;span style="color:#ae81ff">86&lt;/span>: &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">find&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">87&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">88&lt;/span>: &lt;span style="color:#75715e">// Declare the buffers we need to process the stream.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#ae81ff">16.50&lt;/span>&lt;span style="color:#a6e22e">MB&lt;/span> &lt;span style="color:#ae81ff">16.50&lt;/span>&lt;span style="color:#a6e22e">MB&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span>: &lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">90&lt;/span>: &lt;span style="color:#a6e22e">end&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">91&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">92&lt;/span>: &lt;span style="color:#75715e">// Read in an initial number of bytes we need to get started.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> . . &lt;span style="color:#ae81ff">93&lt;/span>: &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">ReadFull&lt;/span>(&lt;span style="color:#a6e22e">input&lt;/span>, &lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#a6e22e">end&lt;/span>]); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">end&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">94&lt;/span>: &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#a6e22e">n&lt;/span>])&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#a6e22e">pprof&lt;/span>) &lt;span style="color:#a6e22e">_&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>分析信息展示了 &lt;code>input&lt;/code> 变量和 &lt;code>buf&lt;/code> slice在堆上创建。&lt;/p>&lt;p>&lt;code>input&lt;/code> 变量是指针，即 &lt;code>input&lt;/code> 指向的 &lt;code>bytes.Buffer&lt;/code> 值分配在堆上。flat列（pprof输出的第一列）展示由于 &lt;code>algOne&lt;/code> 函数共享导致变量逃逸，而 &lt;code>algOne&lt;/code> 函数在 benchmark 中调用，我们用 &lt;code>list Benchmark&lt;/code> 函数看一下 Benchmark 的内存分配。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#a6e22e">pprof&lt;/span>) &lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#a6e22e">Benchmark&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Total&lt;/span>: &lt;span style="color:#ae81ff">335.03&lt;/span>&lt;span style="color:#a6e22e">MB&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ROUTINE&lt;/span> &lt;span style="color:#f92672">========================&lt;/span> &lt;span style="color:#f92672">.../&lt;/span>&lt;span style="color:#a6e22e">memcpu&lt;/span>.&lt;span style="color:#a6e22e">BenchmarkAlgorithmOne&lt;/span> &lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#a6e22e">code&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#66d9ef">go&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">/.../&lt;/span>&lt;span style="color:#a6e22e">memcpu&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream_test&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">335.03&lt;/span>&lt;span style="color:#a6e22e">MB&lt;/span> (&lt;span style="color:#a6e22e">flat&lt;/span>, &lt;span style="color:#a6e22e">cum&lt;/span>) &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#a6e22e">of&lt;/span> &lt;span style="color:#a6e22e">Total&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">18&lt;/span>: &lt;span style="color:#a6e22e">find&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []byte(&lt;span style="color:#e6db74">&amp;#34;elvis&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">19&lt;/span>: &lt;span style="color:#a6e22e">repl&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []byte(&lt;span style="color:#e6db74">&amp;#34;Elvis&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">20&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">21&lt;/span>: &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">ResetTimer&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">22&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . &lt;span style="color:#ae81ff">335.03&lt;/span>&lt;span style="color:#a6e22e">MB&lt;/span> &lt;span style="color:#ae81ff">23&lt;/span>: &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">N&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">24&lt;/span>: &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Reset&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">25&lt;/span>: &lt;span style="color:#a6e22e">algOne&lt;/span>(&lt;span style="color:#a6e22e">in&lt;/span>, &lt;span style="color:#a6e22e">find&lt;/span>, &lt;span style="color:#a6e22e">repl&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">output&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">26&lt;/span>: }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">27&lt;/span>:}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . . &lt;span style="color:#ae81ff">28&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#a6e22e">pprof&lt;/span>) &lt;span style="color:#a6e22e">_&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>cum列（pprof信息的第二列）只有一个值，所以 Benchmark 函数没有直接进行内存分配，内存分配全部发生在for循环中。pprof 工具只能分析出有变量逃逸，我们需要通过 &lt;code>go build gcflags &amp;quot;-m -m&amp;quot;&lt;/code> 命令来看一下 &lt;code>bytes.Buffer&lt;/code> 的值为什么会发生逃逸。&lt;/p>&lt;h2 id="编译器报告compiler-reporting">编译器报告（Compiler Reporting）&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">build&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">gcflags&lt;/span> &lt;span style="color:#e6db74">&amp;#34;-m -m&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>go build&lt;/code> 输出信息很多，由于是在第83行创建的 &lt;code>bytes.buffer&lt;/code> 值，所以我们只关注 &lt;code>stream.go:83。&lt;/code>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">83&lt;/span>: &lt;span style="color:#a6e22e">inlining&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span> &lt;span style="color:#a6e22e">to&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">NewBuffer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>([]&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span> &lt;span style="color:#a6e22e">literal&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">83&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span> &lt;span style="color:#a6e22e">literal&lt;/span> &lt;span style="color:#a6e22e">escapes&lt;/span> &lt;span style="color:#a6e22e">to&lt;/span> &lt;span style="color:#a6e22e">heap&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">83&lt;/span>: &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">~&lt;/span>&lt;span style="color:#a6e22e">r0&lt;/span> (&lt;span style="color:#a6e22e">assign&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">pair&lt;/span>) &lt;span style="color:#a6e22e">at&lt;/span> .&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">83&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">83&lt;/span>: &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span> (&lt;span style="color:#a6e22e">assigned&lt;/span>) &lt;span style="color:#a6e22e">at&lt;/span> .&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">83&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">83&lt;/span>: &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span> (&lt;span style="color:#66d9ef">interface&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">converted&lt;/span>) &lt;span style="color:#a6e22e">at&lt;/span> .&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">93&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">83&lt;/span>: &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span> (&lt;span style="color:#a6e22e">passed&lt;/span> &lt;span style="color:#a6e22e">to&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>[&lt;span style="color:#a6e22e">argument&lt;/span> &lt;span style="color:#a6e22e">escapes&lt;/span>]) &lt;span style="color:#a6e22e">at&lt;/span> .&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">93&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从第一行信息可以看出来，&lt;code>bytes.Buffer&lt;/code> 值一开始并没逃逸，&lt;code>bytes.NewBuffer&lt;/code> 函数返回 &lt;code>bytes.Buffer&lt;/code> 值的地址，接下来的5行信息展示了第93行导致 &lt;code>bytes.Buffer&lt;/code> 值从&lt;code>algOne&lt;/code> 栈逃逸，&lt;code>input&lt;/code> 变量被赋值给一个接口变量。&lt;/p>&lt;h2 id="接口interface">接口（interface）&lt;/h2>&lt;p>&lt;code>algOne&lt;/code> 函数的第 93 行代码调用 &lt;code>io.ReadFull&lt;/code> 函数造成了接口赋值。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Reader&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ReadFull&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#a6e22e">Reader&lt;/span>, &lt;span style="color:#a6e22e">buf&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ReadAtLeast&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#a6e22e">buf&lt;/span>, len(&lt;span style="color:#a6e22e">buf&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>ReadFull&lt;/code> 函数代码我们发现，&lt;code>bytes.Buffer&lt;/code> 的指针变量赋值给了 Reader 接口。现在我们知道了使用接口变量的开销：分配和重定向。所以如果没有必须的使用接口变量的原因，可以不使用接口变量。&lt;/p>&lt;p>修改直&lt;code>algOne&lt;/code> 函数，接用 &lt;code>io&lt;/code> 包的 &lt;code>Read&lt;/code> 函数来代替 &lt;code>ReadFull&lt;/code> 函数。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bytes&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#e6db74">&amp;#34;io&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">algOne&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">find&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">repl&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">output&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Use a bytes Buffer to provide a stream to process.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">NewBuffer&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The number of bytes we are looking for.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">find&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Declare the buffers we need to process the stream.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">end&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read in an initial number of bytes we need to get started.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span>.&lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#a6e22e">end&lt;/span>]); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">end&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#a6e22e">n&lt;/span>])&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read in one byte from the input stream.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span>.&lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>[&lt;span style="color:#a6e22e">end&lt;/span>:]); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Flush the reset of the bytes we have.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#a6e22e">end&lt;/span>])&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If we have a match, replace the bytes.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Compare&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>, &lt;span style="color:#a6e22e">find&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">repl&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read a new initial number of bytes.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span>.&lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#a6e22e">end&lt;/span>]); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">end&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>[:&lt;span style="color:#a6e22e">n&lt;/span>])&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Write the front byte since it has been compared.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">WriteByte&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>])&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Slice that front byte out.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> copy(&lt;span style="color:#a6e22e">buf&lt;/span>, &lt;span style="color:#a6e22e">buf&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>:])&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再次运行 benchmark，每次操作的内存分配次数变成了一次，&lt;code>bytes.Buffer&lt;/code> 变量不再逃逸了。性能提升了29%（从 2570 ns/op 到 1814 ns/op），&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">run&lt;/span> &lt;span style="color:#a6e22e">none&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">bench&lt;/span> &lt;span style="color:#a6e22e">AlgorithmOne&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">benchtime&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">benchmem&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">memprofile&lt;/span> &lt;span style="color:#a6e22e">mem&lt;/span>.&lt;span style="color:#a6e22e">out&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">BenchmarkAlgorithmOne&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">2000000&lt;/span> &lt;span style="color:#ae81ff">1814&lt;/span> &lt;span style="color:#a6e22e">ns&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#a6e22e">allocs&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们继续来看 &lt;code>buf&lt;/code> 变量。&lt;/p>&lt;h2 id="栈帧stack-frames">栈帧（Stack Frames）&lt;/h2>&lt;p>再次运行 &lt;code>go build -gcflags &amp;quot;-m -m&amp;quot;&lt;/code>，并关注 &lt;code>stream.go:89&lt;/code> 。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">build&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">gcflags&lt;/span> &lt;span style="color:#e6db74">&amp;#34;-m -m&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">89&lt;/span>: make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>) &lt;span style="color:#a6e22e">escapes&lt;/span> &lt;span style="color:#a6e22e">to&lt;/span> &lt;span style="color:#a6e22e">heap&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">89&lt;/span>: &lt;span style="color:#a6e22e">from&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>) (&lt;span style="color:#a6e22e">too&lt;/span> &lt;span style="color:#a6e22e">large&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">stack&lt;/span>) &lt;span style="color:#a6e22e">at&lt;/span> .&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">89&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里说 slice 底层的数组对于栈来说太大了（too large for stack）。这个信息有些误导性，其实不是因为数组太大，而是因为编译器在编译阶段不知道数组的大小。&lt;/p>&lt;p>只有编译器在编译期间知道变量的大小的情况下，变量才会被分配在栈上，这是因为函数栈帧的大小是在编译阶段确定的，如果编译器在编译过程中不知道变量的大小，那么变量就会分配到堆上。&lt;/p>&lt;p>修改 89 行代码，将 &lt;code>buf&lt;/code> 变量的初始长度设置为 5，再次运行 benchmark。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>内存分配次数变成了 0 次。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">run&lt;/span> &lt;span style="color:#a6e22e">none&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">bench&lt;/span> &lt;span style="color:#a6e22e">AlgorithmOne&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">benchtime&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">benchmem&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">BenchmarkAlgorithmOne&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">3000000&lt;/span> &lt;span style="color:#ae81ff">1720&lt;/span> &lt;span style="color:#a6e22e">ns&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#a6e22e">allocs&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再次运行 &lt;code>go build -gcflags &amp;quot;-m -m&amp;quot;&lt;/code> 会发现，所有变量都没逃逸。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">build&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">gcflags&lt;/span> &lt;span style="color:#e6db74">&amp;#34;-m -m&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">83&lt;/span>: &lt;span style="color:#a6e22e">algOne&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span> &lt;span style="color:#a6e22e">literal&lt;/span> &lt;span style="color:#a6e22e">does&lt;/span> &lt;span style="color:#a6e22e">not&lt;/span> &lt;span style="color:#a6e22e">escape&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">89&lt;/span>: &lt;span style="color:#a6e22e">algOne&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#a6e22e">does&lt;/span> &lt;span style="color:#a6e22e">not&lt;/span> &lt;span style="color:#a6e22e">escape&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是除非能确认 slice 的长度，否则我们不能通过硬编码来指定 slice 的初始大小，所以这段代码 &lt;code>algOne&lt;/code> 函数可能需要一次内存分配。&lt;/p>&lt;h2 id="内存分配和性能allocations-and-performance">内存分配和性能（Allocations and Performance）&lt;/h2>&lt;p>比较一下每次优化过程中的新能提升：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Before&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span> &lt;span style="color:#a6e22e">optimization&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">BenchmarkAlgorithmOne&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">2000000&lt;/span> &lt;span style="color:#ae81ff">2570&lt;/span> &lt;span style="color:#a6e22e">ns&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span> &lt;span style="color:#ae81ff">117&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#a6e22e">allocs&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Removing&lt;/span> &lt;span style="color:#a6e22e">the&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Buffer&lt;/span> &lt;span style="color:#a6e22e">allocation&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">BenchmarkAlgorithmOne&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">2000000&lt;/span> &lt;span style="color:#ae81ff">1814&lt;/span> &lt;span style="color:#a6e22e">ns&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#a6e22e">allocs&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Removing&lt;/span> &lt;span style="color:#a6e22e">the&lt;/span> &lt;span style="color:#a6e22e">backing&lt;/span> &lt;span style="color:#a6e22e">array&lt;/span> &lt;span style="color:#a6e22e">allocation&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">BenchmarkAlgorithmOne&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">3000000&lt;/span> &lt;span style="color:#ae81ff">1720&lt;/span> &lt;span style="color:#a6e22e">ns&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#a6e22e">allocs&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">op&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>优化掉 &lt;code>bytes.Buffer&lt;/code> 变量的内存分配之后，提升了大约 29% 的性能，所有内存分配都又划掉之后，提升了大约 33% 的性能。由此可见，内存分配是影响应用程序性能的因素之一。&lt;/p>&lt;h2 id="结论">结论&lt;/h2>&lt;p>golang有一些很方便的工具来分析内存，基于这些工具，可以重构代码使得变量只分配在栈空间上，而不需要重新分配到堆上。写代码时不要把性能作为第一优先级，因为你并不想在代码序时一直猜测代码的性能，写正确的代码才是第一优先级。我们首先要关注的是完整性、可读性和简单性。有了可以运行的程序，再来确定程序性能是否满足要求。假如程序还不够快，可以使用golang提供的工具来查找和解决性能问题。&lt;/p>&lt;h2 id="参考资料">参考资料&lt;/h2>&lt;ol>&lt;li>&lt;a href="https://www.ardanlabs.com/blog/2017/06/language-mechanics-on-memory-profiling.html">https://www.ardanlabs.com/blog/2017/06/language-mechanics-on-memory-profiling.html&lt;/a>&lt;/li>&lt;/ol></description></item><item><title>golang语言机制之逃逸分析</title><link>https://sunpe.github.io/posts/2020-07-31-golang-escape/</link><pubDate>Fri, 31 Jul 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-07-31-golang-escape/</guid><description>&lt;p>Golang 中逃逸是只栈空间的变量逃逸到了堆空间，逃逸分析是编译器通过静态代码分析决定程序中变量存储位置的过程。代码中没有任何的关键词或者函数可以决定变量放置在栈空间还是堆空间，只能让编译器通过代码来决定变量值的存储位置。&lt;/p>&lt;h2 id="堆heaps">堆（Heaps）&lt;/h2>&lt;p>堆是内存中除了栈之外用来存储变量值的区域，堆不能像栈一样自己释放空间，所以使用这块区域会比使用栈有更大的开销。其中开销主要用来进行垃圾回收（GC），当进行垃圾回收时，会消耗 25% 的 CPU，并且很可能会造成微秒级的「stop the world」延迟。而 GC 的好处是不需要再手动来分配和释放内存。Golang 中一部分变量值分配在堆上，而不在使用的变量值都需要清理掉，堆上的数据过多会给 GC 造成压力。&lt;/p>&lt;h2 id="共享栈sharing-stacks">共享栈（Sharing Stacks）&lt;/h2>&lt;p>Golang 不允许 goroutine 访问其他 goroutine 的栈空间，这是因为 goroutine 的栈空间增长或收缩时，栈空间会填充进新的内容。&lt;/p>&lt;p>程序1展示了栈被替换好几次的例子。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序1&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// All material is licensed under the Apache License Version 2.0, January 2004&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// http://www.apache.org/licenses/LICENSE-2.0&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Sample program to show how stacks grow/change.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Number of elements to grow each stack frame.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Run with 10 and then with 1024&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span> = &lt;span style="color:#ae81ff">1024&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// main is the entry point for the application.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;HELLO&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stackCopy&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, [&lt;span style="color:#a6e22e">size&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{})&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// stackCopy recursively runs increasing the size&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// of the stack.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">stackCopy&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span> [&lt;span style="color:#a6e22e">size&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>&lt;span style="color:#f92672">++&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stackCopy&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果的第 2 和第 6 行，会看到 &lt;code>main&lt;/code> 函数栈的 &lt;code>s&lt;/code> 变量地址值改变了两次。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0xc00006ff68&lt;/span> &lt;span style="color:#a6e22e">HELLO&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0xc00006ff68&lt;/span> &lt;span style="color:#a6e22e">HELLO&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">0xc00007ff68&lt;/span> &lt;span style="color:#a6e22e">HELLO&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">0xc00007ff68&lt;/span> &lt;span style="color:#a6e22e">HELLO&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">0xc00007ff68&lt;/span> &lt;span style="color:#a6e22e">HELLO&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">0xc00007ff68&lt;/span> &lt;span style="color:#a6e22e">HELLO&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">0xc00011ff68&lt;/span> &lt;span style="color:#a6e22e">HELLO&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">0xc00011ff68&lt;/span> &lt;span style="color:#a6e22e">HELLO&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">0xc00011ff68&lt;/span> &lt;span style="color:#a6e22e">HELLO&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#ae81ff">0xc00011ff68&lt;/span> &lt;span style="color:#a6e22e">HELLO&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="逃逸机制escape-mechanics">逃逸机制（Escape Mechanics）&lt;/h2>&lt;p>如果变量值需要在函数栈帧外访问，都会将该变量值重新分配到堆上，这就是逃逸分析算法要做的事情，确保对任何变量值的访问始终是准确、一致和高效的。&lt;/p>&lt;p>让我们通过程序 2 来了解逃逸分析。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序2&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u1&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">createUserV1&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u2&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">createUserV2&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;u1&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;u2&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u2&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//go:noinline&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">createUserV1&lt;/span>() &lt;span style="color:#a6e22e">user&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Bill&amp;#34;&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bill@ardanlabs.com&amp;#34;&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;V1&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//go:noinline&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">createUserV2&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Bill&amp;#34;&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bill@ardanlabs.com&amp;#34;&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;V2&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序 2 中使用了 &lt;code>[//go:noinline](//go:noinline)&lt;/code> 指令来阻止编译器使用内联代码优化，内联代码优化会将函数调用变成内联代码。程序 2 中有两个版本的 &lt;code>createUserXX&lt;/code> 函数，&lt;code>createUserV1()&lt;/code> 返回的是 &lt;code>user&lt;/code> 变量的副本。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">createUserV1&lt;/span>() &lt;span style="color:#a6e22e">user&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Bill&amp;#34;&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bill@ardanlabs.com&amp;#34;&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;V1&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>createUserV1()&lt;/code> 函数返回之后，栈空间应该是图 1 这样的：&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_escape/1.png" alt="">图1&lt;/p>&lt;p>&lt;code>createUserV2()&lt;/code> 函数返回的是 user 变量的指针，所以调用方收到的是 user 变量地址的副本：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">createUserV2&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Bill&amp;#34;&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bill@ardanlabs.com&amp;#34;&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;V2&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>按《&lt;a href="https://sunpe.github.io/posts/golang-stack-and-pointer/">Golang 语言机制之栈与指针&lt;/a>》一文，&lt;code>createUserV2()&lt;/code> 函数返回后栈空间应该如图 2 所示：&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_escape/2.png" alt="">图2&lt;/p>&lt;p>但是图 2 所示的栈空间有一个严重的问题，&lt;code>main&lt;/code> 函数栈帧 &lt;code>u2&lt;/code> 指向了无效的内存空间，这段地址空间在下一次函数调用时可能会被重新初始化。 这种情况下，编译器认为在 &lt;code>createUserV2&lt;/code> 函数栈帧中构造 &lt;code>user&lt;/code> 是不安全的，因此会改为在堆中构造 &lt;code>user&lt;/code>，在程序 2 的执行到第 28 行开始构造 user 时就会在堆上构造。&lt;/p>&lt;p>&lt;a href="https://sunpe.github.io/posts/golang-stack-and-pointer/">Golang 语言机制之栈与指针&lt;/a>一文指出，函数只能直接访问自己栈帧内的内存空间，或通过指针间接访问栈帧外的内存空间，所以访问逃逸到堆上的变量值也需要通过指针来间接访问。所以执行完 &lt;code>createUserV2&lt;/code> 函数后栈空间应该开起来如图 3:&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_escape/3.png" alt="">图3&lt;/p>&lt;p>&lt;code>createUserV2&lt;/code> 函数栈帧的变量 &lt;code>u&lt;/code> 的值存储在堆上而不是在栈上，所以访问变量 &lt;code>u&lt;/code> 的值也需要通过指针来间接访问。&lt;/p>&lt;h2 id="可读性readability">可读性（Readability）&lt;/h2>&lt;p>&lt;code>createUserV2&lt;/code> 函数先构建了 &lt;code>user&lt;/code> 变量，然后再通过 &lt;code>&amp;amp;&lt;/code> 操作获取变量地址并返回。如果直接构造成指针，如程序 3 所示。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 3&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">createUserV2&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Bill&amp;#34;&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bill@ardanlabs.com&amp;#34;&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;V2&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">u&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果我们只关注 &lt;code>return&lt;/code>，程序 3 &lt;code>return u&lt;/code> 告诉我们要返回给调用者的是 &lt;code>u&lt;/code> 的副本，程序 2 &lt;code>return &amp;amp;u&lt;/code> 告诉我们返回给调用者的是 &lt;code>u&lt;/code> 的地址值，并且变量 &lt;code>u&lt;/code> 已经逃逸到堆上。所以，读代码时要记住，指针是为了共享变量，&lt;code>&amp;amp;&lt;/code> 操作符对应的单词是「sharing」，这样写有助于提高代码的可读性。&lt;/p>&lt;p>来看一下程序 4 的例子。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 4&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">user&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Unmarshal&lt;/span>([]byte(&lt;span style="color:#a6e22e">r&lt;/span>), &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第二行的 &lt;code>json.Unmarshal&lt;/code> 第二个参数必须是指针类型，所以需要传递 &lt;code>&amp;amp;u&lt;/code> 作为参数。这段代码第一行创建了 user 的指针类型并初始化零值，第二行通过 &lt;code>u&lt;/code> 的地址调用 &lt;code>json.Unmarshal&lt;/code>，第三行和调用者共享 &lt;code>u&lt;/code> 的副本。&lt;/p>&lt;p>这段代码并不直观，可以稍作修改，得到程序5.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 5&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Unmarshal&lt;/span>([]byte(&lt;span style="color:#a6e22e">r&lt;/span>), &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序 5 的第一行创建了 user 变量并初始化零值，第二行通过 &lt;code>u&lt;/code> 的地址调用 &lt;code>json.Unmarshal&lt;/code>，第三行和调用者共享 &lt;code>u&lt;/code>，比程序 4 更直观，返回 &lt;code>&amp;amp;u&lt;/code> 说明 &lt;code>u&lt;/code> 会逃逸到堆上。&lt;/p>&lt;p>如果需要和调用者共享变量值时，在构造值的时候使用值语义，利用 &lt;code>&amp;amp;&lt;/code> 操作符的可读性来明确值是被共享的。&lt;/p>&lt;h2 id="编译器日志compiler-reporting">编译器日志（Compiler Reporting）&lt;/h2>&lt;p>在构建时，可以通过编译器日志（Compiler Reporting）来查看编译器的逃逸分析，在 &lt;code>go build&lt;/code> 指令后添加 &lt;code>-gcflags&lt;/code> 指令和 &lt;code>-m&lt;/code> 参数，就可以看到编译器日志：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">build&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">gcflags&lt;/span> &lt;span style="color:#e6db74">&amp;#34;-m -m&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">16&lt;/span>: &lt;span style="color:#a6e22e">cannot&lt;/span> &lt;span style="color:#a6e22e">inline&lt;/span> &lt;span style="color:#a6e22e">createUserV1&lt;/span>: &lt;span style="color:#a6e22e">marked&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#a6e22e">noinline&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">27&lt;/span>: &lt;span style="color:#a6e22e">cannot&lt;/span> &lt;span style="color:#a6e22e">inline&lt;/span> &lt;span style="color:#a6e22e">createUserV2&lt;/span>: &lt;span style="color:#a6e22e">marked&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#a6e22e">noinline&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">8&lt;/span>: &lt;span style="color:#a6e22e">cannot&lt;/span> &lt;span style="color:#a6e22e">inline&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>: &lt;span style="color:#a6e22e">non&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">leaf&lt;/span> &lt;span style="color:#a6e22e">function&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">22&lt;/span>: &lt;span style="color:#a6e22e">createUserV1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">does&lt;/span> &lt;span style="color:#a6e22e">not&lt;/span> &lt;span style="color:#a6e22e">escape&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">34&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">escapes&lt;/span> &lt;span style="color:#a6e22e">to&lt;/span> &lt;span style="color:#a6e22e">heap&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">34&lt;/span>: &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">~&lt;/span>&lt;span style="color:#a6e22e">r0&lt;/span> (&lt;span style="color:#66d9ef">return&lt;/span>) &lt;span style="color:#a6e22e">at&lt;/span> .&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">34&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">31&lt;/span>: &lt;span style="color:#a6e22e">moved&lt;/span> &lt;span style="color:#a6e22e">to&lt;/span> &lt;span style="color:#a6e22e">heap&lt;/span>: &lt;span style="color:#a6e22e">u&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">33&lt;/span>: &lt;span style="color:#a6e22e">createUserV2&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">does&lt;/span> &lt;span style="color:#a6e22e">not&lt;/span> &lt;span style="color:#a6e22e">escape&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">12&lt;/span>: &lt;span style="color:#a6e22e">main&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u1&lt;/span> &lt;span style="color:#a6e22e">does&lt;/span> &lt;span style="color:#a6e22e">not&lt;/span> &lt;span style="color:#a6e22e">escape&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">12&lt;/span>: &lt;span style="color:#a6e22e">main&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u2&lt;/span> &lt;span style="color:#a6e22e">does&lt;/span> &lt;span style="color:#a6e22e">not&lt;/span> &lt;span style="color:#a6e22e">escape&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上可以使用 4 个 &lt;code>-m&lt;/code>，但是超过 2 个控制台信息就很多，所以这里使用了 2 个 &lt;code>-m&lt;/code>。&lt;/p>&lt;p>可以看到日志里有了逃逸分析的日志。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">22&lt;/span>: &lt;span style="color:#a6e22e">createUserV1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">does&lt;/span> &lt;span style="color:#a6e22e">not&lt;/span> &lt;span style="color:#a6e22e">escape&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过日志，我们可以知道程序 2 第 22 行调用 &lt;code>println&lt;/code> 函数时没有发生逃逸。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">34&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#a6e22e">escapes&lt;/span> &lt;span style="color:#a6e22e">to&lt;/span> &lt;span style="color:#a6e22e">heap&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">34&lt;/span>: &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">~&lt;/span>&lt;span style="color:#a6e22e">r0&lt;/span> (&lt;span style="color:#66d9ef">return&lt;/span>) &lt;span style="color:#a6e22e">at&lt;/span> .&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">34&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">main&lt;/span>.&lt;span style="color:#66d9ef">go&lt;/span>:&lt;span style="color:#ae81ff">31&lt;/span>: &lt;span style="color:#a6e22e">moved&lt;/span> &lt;span style="color:#a6e22e">to&lt;/span> &lt;span style="color:#a6e22e">heap&lt;/span>: &lt;span style="color:#a6e22e">u&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这几行是说，第 31 行创建的 &lt;code>u&lt;/code> 变量，因为第 34 行的 return 语句发生了逃逸。&lt;/p>&lt;h2 id="变量逃逸情况总结">变量逃逸情况总结&lt;/h2>&lt;p>总的来说，如果出现了以下三种情况，则必然发生逃逸：&lt;/p>&lt;ul>&lt;li>函数中new或字面量创建出的变量，将其指针作为函数返回值，则该变量一定发生逃逸（构造函数返回的指针变量一定逃逸）&lt;/li>&lt;li>被已经逃逸的变量引用的指针，一定发生逃逸&lt;/li>&lt;li>被指针类型的slice、map和chan引用的指针，一定发生逃逸&lt;/li>&lt;/ul>&lt;p>而在以下两种情况下，则不会发生逃逸的情况：&lt;/p>&lt;ul>&lt;li>指针被未发生逃逸的变量引用&lt;/li>&lt;li>仅仅在函数内对变量做取址操作，而未将指针传出&lt;/li>&lt;/ul>&lt;h2 id="总结">总结&lt;/h2>&lt;p>变量是否逃逸是有变量的分享方式决定的，只有当一个变量被共享了（通过变量的地址的方式共享），变量才会逃逸到堆上。变量逃逸到堆上会增加 GC 的压力，而通过变量副本的方式需要存储和维护不同的副本，每种方式都有好处和开销，关键的时要正确、一致且平衡的使用每种语义。&lt;/p>&lt;h2 id="参考资料">参考资料&lt;/h2>&lt;ol>&lt;li>&lt;a href="https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-escape-analysis.html">https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-escape-analysis.html&lt;/a>&lt;/li>&lt;/ol></description></item><item><title>golang语言机制之栈与指针</title><link>https://sunpe.github.io/posts/2020-07-17-golang-stack-and-pointer/</link><pubDate>Fri, 17 Jul 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-07-17-golang-stack-and-pointer/</guid><description>&lt;p>学习和使用 golang，就不得不了解 golang 的指针。如果不能很好的理解指针，很难写出简单、整洁并高效的代码。&lt;/p>&lt;h2 id="帧边界frame-boundaries">帧边界（Frame Boundaries）&lt;/h2>&lt;p>帧边界为函数执行提供了独有的内存空间、上下文（context）环境和一些流控制。函数可以通过帧边界指针直接访问帧边界的内存，或者间接访问帧边界外的内存（不能直接访问帧边界外的内存）。函数要间接访问帧边界外的内存，被访问的内存必须和函数共享。我们首先来了解一下帧边界建立的机制和限制。&lt;/p>&lt;p>函数调用时，会在两个相关的帧边界间进行切换，从调用函数切换到被调用函数，如果函数调用时需要传递参数，那么这些参数值也要传递到被调用函数的帧边界中。Go 语言中帧边界间的数据传递是按值（by value）传递的。&lt;/p>&lt;p>按值传递的好处是可读性好，函数调用时传入的值就是函数真正接收到的值。按值传递又叫做 WYSIWYG（what you see is what you get）。在发生切换时，我们可以很清楚的了解函数调用将如何影响程序执行。&lt;/p>&lt;p>程序 1 展示了函数调用按值传递。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 1 &lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Declare variable of type int with a value of 10.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Display the &amp;#34;value of&amp;#34; and &amp;#34;address of&amp;#34; count.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> println(&lt;span style="color:#e6db74">&amp;#34;count:\tValue Of[&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]\tAddr Of[&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Pass the &amp;#34;value of&amp;#34; the count.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">increment&lt;/span>(&lt;span style="color:#a6e22e">count&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;count:\tValue Of[&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]\tAddr Of[&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//go:noinline&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">increment&lt;/span>(&lt;span style="color:#a6e22e">inc&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Increment the &amp;#34;value of&amp;#34; inc.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">inc&lt;/span>&lt;span style="color:#f92672">++&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;inc:\tValue Of[&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">inc&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]\tAddr Of[&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">inc&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序执行时，运行时（runtime）创建 main goroutine 来初始化代码。goroutine 最终在操作系统线程（os threads）上执行，从 golang 1.8 开始，每个 goroutine 的栈空间是 2048 字节连续的内存空间，栈空间大小未来可能还会变化。&lt;/p>&lt;p>栈空间为每个函数的帧边界提供了物理内存空间，main goroutine 执行程序1中的 &lt;code>main()&lt;/code> 方法时栈空间看起来应该是如图1这样的：&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_stack_and_pointer/1.png" alt="">图 1&lt;/p>&lt;p>如图 1 所示，栈空间已经划出了一块作为 main frame，这块区域叫「栈帧」，界定了 main 函数在栈上的边界。这块栈空间随着代码的执行而被创建，变量 &lt;code>count&lt;/code> 在这块栈空间的地址是 &lt;code>0x10429fa4&lt;/code>。&lt;/p>&lt;p>图1还展示了一点，在活跃的栈帧外的内存空间是不可用的，可以内存空间和不可用内存空间的边界需要明确一下。&lt;/p>&lt;h2 id="地址">地址&lt;/h2>&lt;p>变量名表示一个内存地址，如果存在变量值那么内存中一定存在变量值，变量值一定会有内存地址。程序 1 的第 9 行打印出了 &lt;code>count&lt;/code> 变量的值和地址：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>println(&lt;span style="color:#e6db74">&amp;#34;count:\tValue Of[&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]\tAddr Of[&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>golang 中使用 &lt;code>&amp;amp;&lt;/code> 操作符获取变量的内存地址，这一行代码的输出如下（每次运行变量的地址可能不一样）：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">count&lt;/span>: &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">10&lt;/span> ] &lt;span style="color:#a6e22e">Addr&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">0x10429fa4&lt;/span> ]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="函数调用">函数调用&lt;/h2>&lt;p>程序 1 的第 12 行调用了 &lt;code>increment&lt;/code> 函数。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">increment&lt;/span>(&lt;span style="color:#a6e22e">count&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>函数调用意味着需要在栈上开辟新的空间，除此之外，需要将参数跨越帧边界传到新的栈帧中。这里需要将 &lt;code>count&lt;/code> 变量传递给&lt;code>increment&lt;/code>函数。程序 1 的第 12 行调用 &lt;code>increment&lt;/code> 函数传递的是 &lt;code>count&lt;/code> 变量的值，会复制 count 变量的值并传递到 &lt;code>increment&lt;/code> 函数的栈帧。而 &lt;code>increment&lt;/code> 只能修改自己栈帧的 &lt;code>count&lt;/code> 变量的副本。调用 &lt;code>increment&lt;/code> 方法栈空间如图 2:&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_stack_and_pointer/2.png" alt="">图2&lt;/p>&lt;p>现在栈空间有两个栈帧，&lt;code>main&lt;/code> 函数栈帧和 &lt;code>increment&lt;/code> 函数栈帧。在 &lt;code>increment&lt;/code> 函数栈帧，可以看到 &lt;code>inc&lt;/code> 变量，变量值是 10，地址是 &lt;code>0x10429f98&lt;/code>。因为栈是从上往下使用栈空间，所以 &lt;code>inc&lt;/code> 变量地址值比 &lt;code>count&lt;/code> 变量地址值小（这只是实现细节）。简单来说，goroutine 把函数 &lt;code>main&lt;/code> 栈帧中的 &lt;code>count&lt;/code> 变量的值拷贝并传递给了函数 &lt;code>increment&lt;/code> 栈帧中的 &lt;code>inc&lt;/code> 变量。&lt;/p>&lt;p>&lt;code>increment&lt;/code> 函数中将 inc 变量的值加 1 并打印：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">inc&lt;/span>&lt;span style="color:#f92672">++&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(&lt;span style="color:#e6db74">&amp;#34;inc:\tValue Of[&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">inc&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]\tAddr Of[&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">inc&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序 1 中第 22 行代码输出应该是：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">inc&lt;/span>: &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">11&lt;/span> ] &lt;span style="color:#a6e22e">Addr&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">0x10429f98&lt;/span> ]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行完 &lt;code>incr&lt;/code> 变量自增后，栈空间变成图 3:&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_stack_and_pointer/3.png" alt="">图3&lt;/p>&lt;p>程序 1 执行完第 21 和 22 行代码之后，&lt;code>increment&lt;/code> 函数返回，流程控制权又回到了 &lt;code>main&lt;/code> 函数，&lt;code>main&lt;/code> 函数执行第14行代码，打印 &lt;code>count&lt;/code> 变量的值和地址。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>println(&lt;span style="color:#e6db74">&amp;#34;count:\tValue Of[&amp;#34;&lt;/span>,&lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]\tAddr Of[&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序1的完整的输出如下：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">count&lt;/span>: &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">10&lt;/span> ] &lt;span style="color:#a6e22e">Addr&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">0x10429fa4&lt;/span> ]&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">inc&lt;/span>: &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">11&lt;/span> ] &lt;span style="color:#a6e22e">Addr&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">0x10429f98&lt;/span> ]&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">count&lt;/span>: &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">10&lt;/span> ] &lt;span style="color:#a6e22e">Addr&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">0x10429fa4&lt;/span> ]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>main&lt;/code> 函数栈帧中 &lt;code>count&lt;/code> 变量的值在调用 &lt;code>increment&lt;/code> 函数前后值没变。&lt;/p>&lt;h2 id="函数返回">函数返回&lt;/h2>&lt;p>被调用的函数返回并将控制权交还给调用函数时栈空间发生了什么？简单的回答是，什么也没发生。图 4 是 increment 函数返回后的栈空间：&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_stack_and_pointer/4.png" alt="">图4&lt;/p>&lt;p>图 4 所示栈空间看起来和图3相似，只是 &lt;code>increment&lt;/code> 栈空间现在变成了不可用内存，这是因为现在 &lt;code>main&lt;/code> 函数栈帧是活跃的栈帧。函数返回之后，没有立即清理函数的栈空间，因为不确定是否还需要使用这块内存空间，只有再次有函数被调用并且使用到了这块内存空间时，才会去清理。&lt;/p>&lt;h2 id="值的共享">值的共享&lt;/h2>&lt;p>如果想在 &lt;code>increment&lt;/code> 函数直接操作 &lt;code>main&lt;/code> 函数栈帧的 &lt;code>count&lt;/code> 变量要怎么办？这时候就需要用到指针。指针可以和函数共享变量，让函数可以直接读写这个共享变量的值，即使共享变量不在自己的栈帧内。&lt;/p>&lt;p>如果不需要共享变量，那么就不需要使用指针，使用指针是为了共享，并且当阅读代码时，也应该把 &lt;code>&amp;amp;&lt;/code> 操作符当做共享来看。&lt;/p>&lt;h2 id="指针类型">指针类型&lt;/h2>&lt;p>任何类型（无论是自定义的类型还是内置类型）都有一个与之对应的指针类型，用来共享数据。比如内置类型 &lt;code>int&lt;/code> 的指针类型是 &lt;code>*int&lt;/code>，自定义的 &lt;code>User&lt;/code> 类型的指针类型是 &lt;code>*User&lt;/code>。&lt;/p>&lt;p>指针类型以 &lt;code>*&lt;/code> 开头，并且所有指针类型用相同的内存大小（4 个字节或 8 个字节）来表示内存地址。在 32 为系统（比如 playground），指针类型大小是 4 个字节，在 64 位系统中，指针类型大小是 8 个字节。&lt;/p>&lt;p>规范的说， 指针类型被认为是字面类型（type literals），也就是说指针类型是通过已有类型组合而成的。&lt;/p>&lt;h2 id="直接内存访问">直接内存访问&lt;/h2>&lt;p>程序 2 展示了以变量的地址作为参数来调用函数，在 main 函数栈和 increment 函数栈之间共享 count 变量&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 2&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Declare variable of type int with a value of 10.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Display the &amp;#34;value of&amp;#34; and &amp;#34;address of&amp;#34; count.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> println(&lt;span style="color:#e6db74">&amp;#34;count:\tValue Of[&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]\t\tAddr Of[&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Pass the &amp;#34;address of&amp;#34; count.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">increment&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;count:\tValue Of[&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]\t\tAddr Of[&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//go:noinline&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">increment&lt;/span>(&lt;span style="color:#a6e22e">inc&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Increment the &amp;#34;value of&amp;#34; count that the &amp;#34;pointer points to&amp;#34;. (dereferencing)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">inc&lt;/span>&lt;span style="color:#f92672">++&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;inc:\tValue Of[&amp;#34;&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inc&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]\tAddr Of[&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">inc&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]\tValue Points To[&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">inc&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在程序 2 的第 12 行，调用 &lt;code>increment&lt;/code> 函数传递的参数是 &lt;code>count&lt;/code> 变量的地址而不是 &lt;code>count&lt;/code> 变量的副本，通过&amp;amp;操作符来获取了 &lt;code>count&lt;/code> 变量的地址。这里依然是「按值传递（pass by value）」，不同的是，传递的是地址的值而不是int类型变量的值。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">increment&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 increment 函数中，需要能接受 int 类型地址参数的形式参数，所以程序 2 的第 18 行函数参数类型声明为 &lt;code>*int&lt;/code>：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">increment&lt;/span>(&lt;span style="color:#a6e22e">inc&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>) {&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用了 increment 函数之后，栈空间如图 5 所示：&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_stack_and_pointer/5.png" alt="">图 5&lt;/p>&lt;p>&lt;code>increment&lt;/code> 函数栈空间中的 &lt;code>*int&lt;/code> 类型的 &lt;code>inc&lt;/code> 变量指向了 main 函数栈空间中的 &lt;code>count&lt;/code> 变量。使用这个指针类型变量，&lt;code>increment&lt;/code> 函数可以间接读写 &lt;code>main&lt;/code> 函数空间的 &lt;code>count&lt;/code> 变量。&lt;/p>&lt;p>在程序 2 的 21 行，&lt;code>*&lt;/code> 符号和指针类型变量一起使用时，表示取指针变量指向的值的操作，在这里就是获取 main 函数中的 count 变量。指针类型变量允许在函数栈帧空间外间接读写指针变量指向的内存空间，我们把通过 &lt;code>*&lt;/code> 符号间接访问内存空间的方式叫指针的解引用。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">inc&lt;/span>&lt;span style="color:#f92672">++&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当程序 2 执行到 21 行时，栈空间如图 6 所示：&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_stack_and_pointer/6.png" alt="">图 6&lt;/p>&lt;p>程序 2 的完整输出：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">count&lt;/span>: &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">10&lt;/span> ] &lt;span style="color:#a6e22e">Addr&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">0x10429fa4&lt;/span> ]&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">inc&lt;/span>: &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">0x10429fa4&lt;/span> ] &lt;span style="color:#a6e22e">Addr&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">0x10429f98&lt;/span> ] &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#a6e22e">Points&lt;/span> &lt;span style="color:#a6e22e">To&lt;/span>[ &lt;span style="color:#ae81ff">11&lt;/span> ]&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">count&lt;/span>: &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">11&lt;/span> ] &lt;span style="color:#a6e22e">Addr&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>[ &lt;span style="color:#ae81ff">0x10429fa4&lt;/span> ]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，inc 指针变量的值和 count 变量的地址值相同，通过指针类型可以间接的访问栈空间外的内存，increment 函数通过指针修改了 inc 指针变量指向的值（也就是 count 变量），当 main 函数重新获得控制权后，就可以读取到 count 变量的新值。&lt;/p>&lt;h2 id="指针变量并不特别">指针变量并不特别&lt;/h2>&lt;p>指针变量和其他变量一样，并不特别，同样需要内存空间，同样存储这值。除了指针类型指向的类型和指针类型大小相同外，唯一让我们感到疑惑的是 &lt;code>*&lt;/code> 字符，在函数 increment 中，&lt;code>*&lt;/code> 表示操作符，表示指针解引用，而在函数声明中用来声明指针类型变量。如果可以愤青指针类型声明和指针解引用操作，应该就没那么困惑了。&lt;/p>&lt;h2 id="总结">总结&lt;/h2>&lt;p>这篇文章描述了指针背后的目的以及 golang 中栈和指针机制的工作方式，这是理解 golang 语言机制、设计哲学的第一步，也有助于写出一致的、可读性好的代码。&lt;/p>&lt;p>从这篇文章我们学到了：&lt;/p>&lt;ul>&lt;li>帧边界为每个函数提供了独立的内存空间，函数在自己的帧边界内执行&lt;/li>&lt;li>如果函数被调用，会存在两个栈空间的转换&lt;/li>&lt;li>值传递（by value）的好处是可读性高&lt;/li>&lt;li>栈空间很重要，栈为帧边界提供物理空间&lt;/li>&lt;li>在活跃栈帧以下的栈空间是不可用的，只有活跃栈帧和它以上的栈空间可用&lt;/li>&lt;li>函数调用意味着 goroutine 需要在栈空间上开辟一块新的栈帧&lt;/li>&lt;li>在函数调用时，如果被分配的栈用到了栈空间，相应的栈空间才会被初始化&lt;/li>&lt;li>指针是用来共享变量的，以便于函数可以间接访问自己栈帧外的变量&lt;/li>&lt;li>所有类型都可以通过其指针类型来共享&lt;/li>&lt;li>指针类型变量允许间接访问函数栈帧外的内存空间&lt;/li>&lt;li>指针变量和其他变量一样，并不特别，占用内存空间，并且存放值&lt;/li>&lt;/ul>&lt;h2 id="参考资料">参考资料&lt;/h2>&lt;ol>&lt;li>&lt;a href="https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html">https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html&lt;/a>&lt;/li>&lt;/ol></description></item><item><title>理解Golang channel</title><link>https://sunpe.github.io/posts/2020-07-03-golang-channel/</link><pubDate>Fri, 03 Jul 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-07-03-golang-channel/</guid><description>&lt;p>channel 是 golang 的核心特性之一，提供了 goroutine 通信的机制，简化了并发模式。&lt;/p>&lt;h2 id="csp">CSP&lt;/h2>&lt;p>golang 通过 goroutine 和 channel 部分实现了 CSP（Communicating Sequential Process）。CSP 即通信顺序进程，是 Tony Hoare 于 1977 年提出的一种并发模型。CSP 模型由并发执行的实体（线程或者进程）所组成，实体之间通过发送消息进行通信，这里发送消息时使用的就是通道，或者叫 channel。CSP 模型的关键是关注 channel，而不关注发送消息的实体，golang 中 goroutine 对应 CSP 中并发执行的实体，channel 也就对应着 CSP 中的 channel。&lt;/p>&lt;h2 id="channel基础">channel基础&lt;/h2>&lt;p>channel 底层是 hchan 结构体，源码在 src/runtime/chan.go。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 1&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">hchan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">qcount&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#75715e">// total data in the queue&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">dataqsiz&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#75715e">// 队列大小, 值大于0表示有缓冲, 值等于0表示没有缓冲&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span> &lt;span style="color:#75715e">// 缓冲队列buffer的指针&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">elemsize&lt;/span> &lt;span style="color:#66d9ef">uint16&lt;/span> &lt;span style="color:#75715e">// 单个元素大小&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">closed&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span> &lt;span style="color:#75715e">// 关闭标识符&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">elemtype&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">_type&lt;/span> &lt;span style="color:#75715e">// 元素类型&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sendx&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#75715e">// 发送数据索引&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">recvx&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#75715e">// 接收数据索引&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">recvq&lt;/span> &lt;span style="color:#a6e22e">waitq&lt;/span> &lt;span style="color:#75715e">// 等待接收数据的sudog(goroutine)链表&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sendq&lt;/span> &lt;span style="color:#a6e22e">waitq&lt;/span> &lt;span style="color:#75715e">// 等待发送数据的sudog(goroutine)链表&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// lock protects all fields in hchan, as well as several&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// fields in sudogs blocked on this channel.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Do not change another G&amp;#39;s status while holding this lock&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// (in particular, do not ready a G), as this can deadlock&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// with stack shrinking.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">lock&lt;/span> &lt;span style="color:#a6e22e">mutex&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>sudog 表示在等待队列中的 goroutine。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 2&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">sudog&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The following fields are protected by the hchan.lock of the&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// channel this sudog is blocking on. shrinkstack depends on&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// this for sudogs involved in channel ops.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">g&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// isSelect indicates g is participating in a select, so&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// g.selectDone must be CAS&amp;#39;d to win the wake-up race.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">isSelect&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">prev&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">elem&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span> &lt;span style="color:#75715e">// data element (may point to stack)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// The following fields are never accessed concurrently.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// For channels, waitlink is only accessed by g.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// For semaphores, all fields (including the ones above)&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// are only accessed when holding a semaRoot lock.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">acquiretime&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">releasetime&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ticket&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">parent&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span> &lt;span style="color:#75715e">// semaRoot binary tree&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">waitlink&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span> &lt;span style="color:#75715e">// g.waiting list or semaRoot&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">waittail&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span> &lt;span style="color:#75715e">// semaRoot&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hchan&lt;/span> &lt;span style="color:#75715e">// channel&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建channel">创建channel&lt;/h2>&lt;p>通过内置的 make 函数可以创建带缓冲区或不带缓冲区的 channel：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 3&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">Task&lt;/span>) &lt;span style="color:#75715e">// 创建非缓冲channel&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">Task&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e">// 创建缓冲channel&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_channel/1.png" alt="">&lt;/p>&lt;p>make 函数创建并实例化 hchan 结构体，并返回 hchan 的指针，所以我们可以直接将 channel 作为方法的参数。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_channel/2.png" alt="">&lt;/p>&lt;p>创建 channel 的函数是 &lt;code>func makechan(t *chantype, size int) *hchan&lt;/code>&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 4&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">makechan&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">chantype&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hchan&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">elem&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">elem&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 安全检测&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// compiler checks this but be safe.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">throw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;makechan: invalid channel element type&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">hchanSize&lt;/span>&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">maxAlign&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">align&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">maxAlign&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">throw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;makechan: bad alignment&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mem&lt;/span>, &lt;span style="color:#a6e22e">overflow&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">MulUintptr&lt;/span>(&lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>, uintptr(&lt;span style="color:#a6e22e">size&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">overflow&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">mem&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">maxAlloc&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">hchanSize&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">plainError&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;makechan: size out of range&amp;#34;&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hchan&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">mem&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果队列或元素大小是0，则不分配buffer&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Queue or element size is zero.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> = (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hchan&lt;/span>)(&lt;span style="color:#a6e22e">mallocgc&lt;/span>(&lt;span style="color:#a6e22e">hchanSize&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 将buf指向自身，不分配缓存空间&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Race detector uses this location for synchronization.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">buf&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">raceaddr&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">ptrdata&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果元素不包含指针，则分配一整块内存，用于hchan和buf&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Elements do not contain pointers.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Allocate hchan and buf in one call.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> = (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hchan&lt;/span>)(&lt;span style="color:#a6e22e">mallocgc&lt;/span>(&lt;span style="color:#a6e22e">hchanSize&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">mem&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">buf&lt;/span> = &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>), &lt;span style="color:#a6e22e">hchanSize&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果是指针类型，正常创建结构体，buf单独分配空间&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Elements contain pointers.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> = new(&lt;span style="color:#a6e22e">hchan&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">buf&lt;/span> = &lt;span style="color:#a6e22e">mallocgc&lt;/span>(&lt;span style="color:#a6e22e">mem&lt;/span>, &lt;span style="color:#a6e22e">elem&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 设置channel的属性&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">elemsize&lt;/span> = uint16(&lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">elemtype&lt;/span> = &lt;span style="color:#a6e22e">elem&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">dataqsiz&lt;/span> = uint(&lt;span style="color:#a6e22e">size&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">debugChan&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;makechan: chan=&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;; elemsize=&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;; &lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> dataqsiz=&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用channel">使用channel&lt;/h2>&lt;h3 id="发送和接收数据过程">发送和接收数据过程&lt;/h3>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_channel/3.png" alt="">&lt;/p>&lt;p>G1 是生产者，G2 是消费者，&lt;code>ch&lt;/code> 是容量为 3 的带缓冲 channel，初始的时候 &lt;code>hchan&lt;/code> 结构体的 buf 为空，&lt;code>sendx&lt;/code> 和 &lt;code>recvx&lt;/code> 都为0。G1 获取锁，并将 task 发送到 channel，并增加 sendx，发送到 channel 中的数据其实是task的副本。然后 G2 获取锁，并从 channel 中获取数据，并增加 recvx，取到的数据依旧是 task 的副本。channel 受互斥锁保护，传递副本可以保证数据的安全。&lt;/p>&lt;p>整个过程没有内存共享（shared memory），充分体现了 CSP 的 do not communicate by sharing memory; instead, share memory by communicating。&lt;/p>&lt;h3 id="blockingunblocking过程">blocking/unblocking过程&lt;/h3>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_channel/4.png" alt="">&lt;/p>&lt;p>如果 G2 的读取速度比 G1 的写入速度慢，那么一段时间之后，channe l的 buffer 会被塞满。当 channel 满了之后 G1 继续往 channel 中发送数据。G1 会 block。基于 golang 的调度模型，暂停的其实是 goroutine，而不是 os 线程。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_channel/5.png" alt="">&lt;/p>&lt;p>如果需要 block G1，G1 会创建一个 sudog，放到 channel 的 &lt;code>sendq&lt;/code> 中，当 channel 的 buffer 有了空间时，G2 会从 &lt;code>sendq&lt;/code> 中 pop 出 &lt;code>sudog&lt;/code>，取出 elem，将 G1 状态变成 &lt;code>runnable&lt;/code>，调度器就可以再次调度 G1 了。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_channel/6.png" alt="">&lt;/p>&lt;p>如果 G2 先运行，这时候 channel 中没有数据，G2 从一个空的 channel 中读取数据，G2 也会 block，和 G1 block 的逻辑相似，G2 也会创建 &lt;code>sudog&lt;/code>，然后放到 &lt;code>recvq&lt;/code> 中。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_channel/7.png" alt="">&lt;/p>&lt;p>当此时 G1 向 channel 发送数据，runtime 会直接将 G1 要发送的数据 copy 到 G2 的栈空间，看起来就好像是 G1 直接将数据发送给了 G2，这个过程叫「direct send」，整个过程 G1 和 G2 都不需要再获取锁和读写 buffer。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_channel/8.png" alt="">&lt;/p>&lt;p>非缓冲 channel 总是「direct send」的，如果 receiver 先运行，sender 直接将数据写入 receiver 的栈空间，如果 sennder 先运行，receiver 直接从 sudog 接收数据。&lt;/p>&lt;h2 id="向channel发送数据的源码">向channel发送数据的源码&lt;/h2>&lt;p>发送数据对应的方法是 &lt;code>func chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool&lt;/code>。&lt;/p>&lt;ol>&lt;li>如果向 nil channel 发送数据，会一直block：&lt;/li>&lt;/ol>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 5&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">block&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gopark&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">waitReasonChanSendNilChan&lt;/span>, &lt;span style="color:#a6e22e">traceEvGoStop&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">throw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unreachable&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>gopark&lt;/code> 表示将当前 goroutine 休眠，但是 unlockf 是 nil，所以 goroutine 会一直休眠。如果所有 goroutine 都处于休眠状态，在 runtime 的 &lt;code>checkdead()&lt;/code> 会检测异常情况, 抛出 &lt;code>all goroutines are asleep - deadlock!&lt;/code>&lt;/p>&lt;ol start="2">&lt;li>如果 &lt;code>recvq&lt;/code> 中有等待的 sudog：&lt;/li>&lt;/ol>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 6&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">recvq&lt;/span>.&lt;span style="color:#a6e22e">dequeue&lt;/span>(); &lt;span style="color:#a6e22e">sg&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Found a waiting receiver. We pass the value we want to send&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// directly to the receiver, bypassing the channel buffer (if any).&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">send&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">sg&lt;/span>, &lt;span style="color:#a6e22e">ep&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>() { &lt;span style="color:#a6e22e">unlock&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>) }, &lt;span style="color:#ae81ff">3&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里直接将数据复制给 receiver，即上文提到的「direct send」。&lt;/p>&lt;ol start="3">&lt;li>如果 buffered channel 并且 buffer 有空间：&lt;/li>&lt;/ol>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 7&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">qcount&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">dataqsiz&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Space is available in the channel buffer. Enqueue the element to send.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">qp&lt;/span>: = &lt;span style="color:#a6e22e">chanbuf&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">sendx&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">raceenabled&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">raceacquire&lt;/span>(&lt;span style="color:#a6e22e">qp&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">racerelease&lt;/span>(&lt;span style="color:#a6e22e">qp&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">typedmemmove&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">elemtype&lt;/span>, &lt;span style="color:#a6e22e">qp&lt;/span>, &lt;span style="color:#a6e22e">ep&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">sendx&lt;/span>&lt;span style="color:#f92672">++&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">sendx&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">dataqsiz&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">sendx&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">qcount&lt;/span>&lt;span style="color:#f92672">++&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">unlock&lt;/span>( &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>qcount&lt;/code> 和 &lt;code>dataqsiz&lt;/code> 属性判断 &lt;code>hchan.buf&lt;/code> 是否有可用空间，如果 buffer 有空间，则将数据 copy 进 buffer。&lt;/p>&lt;ol start="4">&lt;li>如果 buffer 满了，或者没开启 buffer，则 block。&lt;/li>&lt;/ol>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 8&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Block on the channel. Some receiver will complete our operation for us.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">gp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getg&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mysg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">acquireSudog&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">releasetime&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">t0&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">releasetime&lt;/span> = &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// No stack splits between assigning elem and enqueuing mysg&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// on gp.waiting where copystack can find it.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">elem&lt;/span> = &lt;span style="color:#a6e22e">ep&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">waitlink&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">g&lt;/span> = &lt;span style="color:#a6e22e">gp&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">isSelect&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">c&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">gp&lt;/span>.&lt;span style="color:#a6e22e">waiting&lt;/span> = &lt;span style="color:#a6e22e">mysg&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">gp&lt;/span>.&lt;span style="color:#a6e22e">param&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">sendq&lt;/span>.&lt;span style="color:#a6e22e">enqueue&lt;/span>(&lt;span style="color:#a6e22e">mysg&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">gopark&lt;/span>(&lt;span style="color:#a6e22e">chanparkcommit&lt;/span>, &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>), &lt;span style="color:#a6e22e">waitReasonChanSend&lt;/span>, &lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">traceEvGoBlockSend&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="从channel读取数据的源码">从channel读取数据的源码&lt;/h2>&lt;p>读取数据对应的方法是 &lt;code>func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool)&lt;/code>。&lt;/p>&lt;ol>&lt;li>如果从 nil channel 中接受数据会一直 block。&lt;/li>&lt;/ol>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 9&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">block&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gopark&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">waitReasonChanReceiveNilChan&lt;/span>, &lt;span style="color:#a6e22e">traceEvGoStop&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">throw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unreachable&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>和向 nil channel 发送数据类似，从 nil channel 接收数据也会一直 block。&lt;/p>&lt;ol start="2">&lt;li>从 closed 状态的channel接受数据：&lt;/li>&lt;/ol>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 10&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">closed&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">qcount&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">raceenabled&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">raceacquire&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">raceaddr&lt;/span>())&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">unlock&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ep&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">typedmemclr&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">elemtype&lt;/span>, &lt;span style="color:#a6e22e">ep&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 buffer 中有数据（&lt;code>if raceenabled&lt;/code>），则返回 buffer 中的数据；如果 buffer 中没数据了，则返回默认值，并且第二个返回参数返回 false。&lt;/p>&lt;ol start="3">&lt;li>如果 &lt;code>sendq&lt;/code> 中有等待发送的 &lt;code>sudgo&lt;/code>&lt;/li>&lt;/ol>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 11&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">sendq&lt;/span>.&lt;span style="color:#a6e22e">dequeue&lt;/span>(); &lt;span style="color:#a6e22e">sg&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Found a waiting sender. If buffer is size 0, receive value&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// directly from sender. Otherwise, receive from head of queue&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and add sender&amp;#39;s value to the tail of the queue (both map to&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the same buffer slot because the queue is full).&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">recv&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">sg&lt;/span>, &lt;span style="color:#a6e22e">ep&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>() { &lt;span style="color:#a6e22e">unlock&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>) }, &lt;span style="color:#ae81ff">3&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>说明队列已满，如果没开启 buffer，则直接从 sender 读取数据。否则，从队列头读取数据，并把 sender 的数据放到队列尾（由于 buffer 是循环队列, 所以队列尾就是刚才读取数据的位置）。&lt;/p>&lt;ol start="4">&lt;li>如果队列中有数据&lt;/li>&lt;/ol>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 12&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">qcount&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Receive directly from queue&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">qp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">chanbuf&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">recvx&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">raceenabled&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">raceacquire&lt;/span>(&lt;span style="color:#a6e22e">qp&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">racerelease&lt;/span>(&lt;span style="color:#a6e22e">qp&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ep&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">typedmemmove&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">elemtype&lt;/span>, &lt;span style="color:#a6e22e">ep&lt;/span>, &lt;span style="color:#a6e22e">qp&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">typedmemclr&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">elemtype&lt;/span>, &lt;span style="color:#a6e22e">qp&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">recvx&lt;/span>&lt;span style="color:#f92672">++&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">recvx&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">dataqsiz&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">recvx&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">qcount&lt;/span>&lt;span style="color:#f92672">--&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">unlock&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果队列中有数据，则直接从队列中读取数据。&lt;/p>&lt;ol start="5">&lt;li>如果队列中没数据，也没有 goroutine 向队列中发送数据&lt;/li>&lt;/ol>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 13&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">gp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getg&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mysg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">acquireSudog&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">releasetime&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">t0&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">releasetime&lt;/span> = &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// No stack splits between assigning elem and enqueuing mysg&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// on gp.waiting where copystack can find it.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">elem&lt;/span> = &lt;span style="color:#a6e22e">ep&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">waitlink&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">gp&lt;/span>.&lt;span style="color:#a6e22e">waiting&lt;/span> = &lt;span style="color:#a6e22e">mysg&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">g&lt;/span> = &lt;span style="color:#a6e22e">gp&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">isSelect&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mysg&lt;/span>.&lt;span style="color:#a6e22e">c&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">gp&lt;/span>.&lt;span style="color:#a6e22e">param&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">recvq&lt;/span>.&lt;span style="color:#a6e22e">enqueue&lt;/span>(&lt;span style="color:#a6e22e">mysg&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">gopark&lt;/span>(&lt;span style="color:#a6e22e">chanparkcommit&lt;/span>, &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>), &lt;span style="color:#a6e22e">waitReasonChanReceive&lt;/span>, &lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">traceEvGoBlockRecv&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果队列中没数据，也没有 goroutine 向队列中发送数据，goroutine 会 block。&lt;/p>&lt;h2 id="channel是否必须close">channel是否必须close&lt;/h2>&lt;p>channel 可以不关闭，如果 channel 不再被使用，即使不关闭也会被回收。通常 close channel 会作为 channel 不会再有数据的控制信号，如果接收方不关心 channel 中是否还会有数据，那么没必要主动关闭 channel。可以参考 &lt;a href="https://groups.google.com/d/msg/golang-nuts/pZwdYRGxCIk/qpbHxRRPJdUJ">Design Question: Channel Closing&lt;/a>。如果要关闭 channel，则最好是由发送方来关闭。&lt;/p>&lt;blockquote>&lt;p>Note that it is only necessary to close a channel if the receiver is looking for a close. Closing the channel is a control signal on the channel indicating that no more data follows.&lt;/p>&lt;/blockquote>&lt;h2 id="总结">总结&lt;/h2>&lt;p>这篇文章描述了 channel 的基本用法和内部的机制，我们从这篇文章了解到了：&lt;/p>&lt;ul>&lt;li>channel 的零值是nil，必须初始化才能使用。&lt;/li>&lt;li>发送的是数据的副本，但是发送指针或引用类型不是 goroutine 安全的，receiver 接收到的数据可能被 sender 修改。&lt;/li>&lt;li>往一个已经 closed 的 channel 中发送数据会导致 panic，往 nil channel 发送数据会 block。从一个 nil channel 中接收数据会 block，从一个被 close 的 channel 中接收数据不会 block，如果队列中有数据，则正常读取，否则立即返元素类型的零值。&lt;/li>&lt;li>&lt;code>select case&lt;/code> 中，如果有多个 case 就绪，那么会随机选择一个 case 执行，select 中的 break 只能跳到 select 这一层，select 中一般配合 label 来使用 break。&lt;/li>&lt;li>channel 使用完可以不关闭, 如果要关闭, 最好是发送方来关闭.&lt;/li>&lt;/ul>&lt;h2 id="参考资料">参考资料&lt;/h2>&lt;ol>&lt;li>&lt;a href="https://about.sourcegraph.com/go/understanding-channels-kavya-joshi">https://about.sourcegraph.com/go/understanding-channels-kavya-joshi&lt;/a>&lt;/li>&lt;li>&lt;a href="https://github.com/gophercon/2017-talks/blob/master/KavyaJoshi-UnderstandingChannels/Kavya%20Joshi%20-%20Understanding%20Channels.pdf">https://github.com/gophercon/2017-talks/blob/master/KavyaJoshi-UnderstandingChannels/Kavya Joshi - Understanding Channels.pdf&lt;/a>&lt;/li>&lt;/ol></description></item><item><title>golang中的defer, panic和recover</title><link>https://sunpe.github.io/posts/2020-06-18-golang-panic-defer-recover/</link><pubDate>Thu, 18 Jun 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-06-18-golang-panic-defer-recover/</guid><description>&lt;p>Go提供了 &lt;code>defer&lt;/code>, &lt;code>panic&lt;/code> 和 &lt;code>recover&lt;/code> 三个内置方法。其中 &lt;code>panic&lt;/code> 会让程序崩溃，&lt;code>defer&lt;/code> 可以在函数 return 之前执行操作， &lt;code>defer&lt;/code> 和 &lt;code>recover&lt;/code> 配合可以捕获 panic。&lt;/p>&lt;h2 id="defer">defer&lt;/h2>&lt;p>&lt;code>defer&lt;/code> 声明的语句可以在函数或方法返回（不管是正常返回或异常返回）之前调用，类似于 Java 里面的 &lt;code>finally&lt;/code>，可以做一些清理的工作，比如关闭文件、 释放资源等操作。&lt;/p>&lt;p>程序 1 展示了 &lt;code>defer&lt;/code> 的一般的用法，通过 &lt;code>defer&lt;/code> 语句保证 &lt;code>src&lt;/code> 和 &lt;code>dst&lt;/code> 最终会被释放。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 1&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CopyFile&lt;/span>(&lt;span style="color:#a6e22e">dstName&lt;/span>, &lt;span style="color:#a6e22e">srcName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">written&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">src&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">srcName&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dst&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">dstName&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">dst&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Copy&lt;/span>(&lt;span style="color:#a6e22e">dst&lt;/span>, &lt;span style="color:#a6e22e">src&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>defer 语句有三个约定：&lt;/p>&lt;ol>&lt;li>&lt;p>defer 语句参数的值在 defer 语句声明时就已经确定了&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 2&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>defer 语句并不是简单的延迟执行，程序 2 中的 &lt;code>a()&lt;/code> 方法执行到 &lt;code>defer fmt.Println(i)&lt;/code> 时，会将i的值 copy 一份和defer语句的声明一起入栈，在 return 之前，声明的 defer 语句出栈执行，所以程序 2 最终打印出i的值是&lt;code>0&lt;/code>。&lt;/p>&lt;/li>&lt;li>&lt;p>defer 语句的执行顺序是后进先出（LIFO）&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 3&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">4&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Print&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>defer 语句的声明和执行可以看作是 defer 语句块的「入栈」和「出栈」操作，先声明的 defer 语句最后执行，所以程序 3 的输出是 &lt;code>3201&lt;/code>&lt;/p>&lt;/li>&lt;li>&lt;p>defer 语句可以读取并修改外部函数命名的返回值（named return values）&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 4&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>() (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() { &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> }()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>defer 语句可以在 return 之前执行, 并且可以修改外部函数命名的返回值（named return values）。程序 4 在 return 之前会执行 defer 语句，所以程序 4 最终返回的是 &lt;code>1&lt;/code>。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 5&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() { &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> }()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但程序 5 最终输出的是 &lt;code>0&lt;/code>。&lt;/p>&lt;/li>&lt;/ol>&lt;h2 id="panic和recover">panic和recover&lt;/h2>&lt;p>&lt;code>panic&lt;/code> 内置函数可以让让当前 goroutine 崩溃，当函数 F 中调用了或者触发了 &lt;code>panic&lt;/code>，F 会立即终止运行，然后执行 F 中的 &lt;code>defer&lt;/code> 语句，然后 F 返回到调用者 G，G 也会立即终止运行，然后执行 G 中的 &lt;code>defer&lt;/code> 语句，这样一层一层的向上返回，直到顶层的 goroutine（函数调用链的顶层 goroutine，不一定是 main goroutine），然后程序崩溃。&lt;/p>&lt;p>&lt;code>recover&lt;/code> 内置方法可以再次控制 panic 的 goroutine。&lt;code>recover&lt;/code> 方法只有在 &lt;code>defer&lt;/code> 中才有效果。正常情况下，&lt;code>recover&lt;/code> 会返回 &lt;code>nil&lt;/code>，如果当前 goroutine 发生了 panic，&lt;code>recover&lt;/code> 方法会捕获 panic 的值，并且再次获得程序的控制权。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 6&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Returned normally from f.&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> recover(); &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Recovered in f&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Calling g.&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Returned normally from g.&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">3&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Panicking!&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Defer in g&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Printing in g&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>程序 6 中 g 的逻辑是如果 &lt;code>i&amp;gt;3&lt;/code>，则 panic，否则递归进行 &lt;code>i+1&lt;/code>，f 在 &lt;code>defer&lt;/code> 中调用了 &lt;code>recover&lt;/code>，并打印了 recover 信息，程序的输出：&lt;/p>&lt;pre tabindex="0">&lt;code>Calling g.Printing in g 0Printing in g 1Printing in g 2Printing in g 3Panicking!Defer in g 3Defer in g 2Defer in g 1Defer in g 0Recovered in f 4Returned normally from f&lt;/code>&lt;/pre>&lt;p>如果去掉f中的 &lt;code>defer&lt;/code> 声明，panic 不会 recover，一层一层的返回 &lt;code>panic&lt;/code>，直到 goroutine 调用栈的顶端，然后程序崩溃。去掉 defer 语句之后的输出:&lt;/p>&lt;pre tabindex="0">&lt;code>Calling g.Printing in g 0Printing in g 1Printing in g 2Printing in g 3Panicking!Defer in g 3Defer in g 2Defer in g 1Defer in g 0panic: 4panic PC=0x2a9cd8[stack trace omitted]&lt;/code>&lt;/pre>&lt;p>&lt;code>recover&lt;/code> 返回的是 &lt;code>panic&lt;/code> 的值，以下三种情况，&lt;code>recover&lt;/code> 的值是 &lt;code>nil&lt;/code>：&lt;/p>&lt;ul>&lt;li>&lt;code>panic&lt;/code> 的值是 &lt;code>nil&lt;/code>&lt;/li>&lt;li>&lt;code>goroutine&lt;/code> 没有 panic&lt;/li>&lt;li>&lt;code>recover&lt;/code> 没有直接在 &lt;code>defer&lt;/code> 中调用&lt;/li>&lt;/ul>&lt;p>前两种情况好理解，第三种情况，如果 &lt;code>recover&lt;/code> 没有在 &lt;code>defer&lt;/code> 中直接调用，那么 &lt;code>recover&lt;/code> 就不能捕获 &lt;code>panic&lt;/code>。下面三段代码，程序 7 中的 &lt;code>recover()&lt;/code> 可以正常捕获 panic，而程序 8 和程序 9 则会 panic。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 7&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> recover(); &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 8&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> recover(); &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 程序 9&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> recover(); &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>&lt;p>这篇文章介绍了 golang 内置的 defer、panic 和 recover 函数，我们了解到：&lt;/p>&lt;ul>&lt;li>&lt;code>defer&lt;/code> 声明时参数就确定了，不会随着方法内部代码的执行而变化。&lt;/li>&lt;li>&lt;code>defer&lt;/code> 执行顺序是后进先出（LIFO）。&lt;/li>&lt;li>&lt;code>defer&lt;/code> 可以读取并修改外部函数命名的返回值（named return values）。&lt;/li>&lt;li>&lt;code>recover&lt;/code> 必须在 &lt;code>defer&lt;/code> 中，并且是 &lt;code>defer&lt;/code> 直接调用才能捕获 &lt;code>panic&lt;/code>。&lt;/li>&lt;/ul>&lt;h2 id="参考">参考&lt;/h2>&lt;ol>&lt;li>&lt;a href="https://golang.org/ref/spec#Handling_panics">https://golang.org/ref/spec#Handling_panics&lt;/a>&lt;/li>&lt;li>&lt;a href="https://blog.golang.org/defer-panic-and-recover">https://blog.golang.org/defer-panic-and-recover&lt;/a>&lt;/li>&lt;/ol></description></item><item><title>理解 golang 运行时调度</title><link>https://sunpe.github.io/posts/2020-06-05-golang-runtime-schedule/</link><pubDate>Fri, 05 Jun 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-06-05-golang-runtime-schedule/</guid><description>&lt;p>操作系统线程（OS thread）对于 golang 来说太重了。而且最重要的是操作系统（OS）无法基于 golang 模型做出正确的调度。比如，GC的时候要暂停所有的线程（go中对应的是 groutine）， 而且内存要处于一致的状态，这需要等待运行中的线程执行到内存一致状态的点（安全点）。当有许多线程时, 为了达到一致状态, 就需要等待这些可能处于任意状态的线程达到一致状态。Golang 的调度器可以做到仅在已知的内存一致状态的点上进行调度。&lt;/p>&lt;h2 id="golang调度器">golang调度器&lt;/h2>&lt;p>目前有3种常见的线程模型，一个是N:1模型，即几个用户级线程运行在一个 os 线程，这种模型的优势是可以非常快的进行上下文切换（context switch），缺点是不能充分利用多核 CPU 的优势；另外一个是 1:1 模型，即一个用户级线程对应一个 os 线程，好处是可以利用多核 CPU 的优势，缺点是上下文切换（Content switch）成本比较高。&lt;/p>&lt;p>Golang采用第三种模型 — M:N，即M个用户级线程（goroutine）运行在 N 个 OS 线程上，这样既可以快速的进行上下文切换（context switch），又可以利用多核 CPU 的优势。&lt;/p>&lt;p>如图1所示，Golang 调度器中主要有三种角色：&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_schedule/1.png" alt="">图1&lt;/p>&lt;p>三角形M代表 OS 线程，可以理解为 machine 的缩写，由系统管理和执行，是 runtime 代码中的 M。&lt;/p>&lt;p>圆形 G 代表 goroutine，有自己的栈、计数器（instruction pointer）和其他调度需要的重要信息，像在等待的 channel 等，是 runtime 代码中的 G。&lt;/p>&lt;p>正方形P代表调度上下文（context），可以理解为 Processor（处理单元），P 表示在单个 os 线程上运行 Go 代码，是实现 N:1 到 M:N 调度的关键，是 runtime 代码中的 P。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_schedule/2.png" alt="">图2&lt;/p>&lt;p>如图 2 所示，有两个 os 线程（M），每个 M 有一个 context（P），每个 P 运行一个 goroutine（G）。os 线程（M）要执行 goroutine（G），必须要拿到 context（P）。P 的数量可以在程序启动时, 通过环境变量 GOMAXPROCS 或者 runtime.GOMAXPROCS() 设置，默认值是系统的线程数，而且在程序执行期间通常不会变动，任何时刻只有 GOMAXPROCS 数量的的 P 在执行 go 代码。&lt;/p>&lt;p>灰色的 G 表示没在运行但处于就绪状态的 goroutine，这些 goroutine 在 runqueues 队列中排队等待执行。当代码中调用 go 表达式时，新创建的 goroutine 会添加到 runqueues 队列尾，P 会从 runqueues 队列头取出一个 G，并设置好栈和计数器（instruction pointer），然后开始运行 goroutine。为了降低锁的竞争，除了全局的 runqueues，每个 P 都有自己的 runqueue（早期版本的 Golang 调度器只有一个全局的 runqueue，以至于调度的时候经常因为锁而 block）。&lt;/p>&lt;p>为什么要有 P(context)，直接把 runqueue 放到 M 上不是挺好吗？设计 P(context) 的原因是，运行中的 goroutine 如果由于某种原因 block，通过P可以将其移交给其他线程。例如, 当一个系统调用 block 了，也就是 M 被 block 了，这时候需要将 P 从这个 M 上移走，以便 M 可以继续执行其他 P。图 3 中左半部分，M0 执行 G0 时，调用了一个 syscall，而被阻塞了，为了不影响后续 G 的运行，P 将其移交给 M1，M0 继续执行其他 G。当 G0 的 syscall 返回时，M1 尝试获取 P，以便能继续执行 G0，如果获取失败，M1 会将 G0 放到全局的 runqueue 中。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_schedule/3.png" alt="">图3&lt;/p>&lt;p>每当P执行完自己的 runqueue 时都会从全局的 runqueue 中获取新的 G，P 也就定时检查全局 runqueue，防止全局 runqueue 上有永远执行不到的 G。如果 Context（P）本地 runqueue 空了，全局的 runqueue 中也没待执行的 G，P 会尝试从别的 P 的 runqueue 队列中窃取（work steal）一半的 groutine，这样就保证了每个 P 都有事做，也就让 M 最大限度的工作。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/golang_schedule/4.png" alt="">&lt;/p>&lt;h2 id="总结">总结&lt;/h2>&lt;p>这篇文章简单描述了 golang 运行时调度，我们了解到：&lt;/p>&lt;ul>&lt;li>golang 线程模型是 M:N 的&lt;/li>&lt;li>M 执行 goroutine 的必要条件是必须获取 processor&lt;/li>&lt;li>如果 goroutine 被阻塞，阻塞的不是 M，而是 processor&lt;/li>&lt;li>每个 P 都有自己的 runqueues，除此之外还有一个全局的 runqueues&lt;/li>&lt;li>P 实现了 work steal&lt;/li>&lt;/ul>&lt;h2 id="参考资料">参考资料&lt;/h2>&lt;ol>&lt;li>&lt;a href="https://morsmachine.dk/go-scheduler">https://morsmachine.dk/go-scheduler&lt;/a>&lt;/li>&lt;/ol></description></item><item><title>golang 项目结构</title><link>https://sunpe.github.io/posts/2020-05-22-golang-project-struct/</link><pubDate>Fri, 22 May 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-05-22-golang-project-struct/</guid><description>&lt;p>常见的golang代码布局方式通常有扁平化布局和模块化布局。&lt;/p>&lt;h2 id="扁平化布局">扁平化布局&lt;/h2>&lt;p>扁平化布局很简单，代码之间不分层，所有代码放在同一个目录。这种布局风格适合比较简单的项目。我们见到的工具包通常就是这种布局，例如 &lt;a href="https://github.com/pkg/errors">errors&lt;/a> 项目的结构：&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>project&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|- bench_test.go&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-errors.go&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-errors_test.go&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-example_test.go&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-format_test.go&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-go113.go&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-go113_test.go&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-json_test.go&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-stack.go&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-stack_test.go&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得注意的是，工具包中尽量不要有第三方依赖，否则，维护工具包中的第三方依赖会很麻烦，也很容易给其他项目带来版本冲突等问题。&lt;/p>&lt;h2 id="模块化布局">模块化布局&lt;/h2>&lt;p>项目稍微复杂一些之后，扁平化布局会显得比较混乱，我们通常会按功能将代码放到不同的目录中，也就是模块化的布局方式。从 1.14 版本之后，官方推荐使用 &lt;code>[Go Modules](https://blog.golang.org/using-go-modules)&lt;/code> 管理依赖，项目一般会由 &lt;code>cmd&lt;/code>、 &lt;code>internal&lt;/code>、 &lt;code>pkg&lt;/code>、 &lt;code>vendor&lt;/code> 等目录组成，当然这不是官方建议的项目结构，只是目前比较常见的布局方式。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>project&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-- cmd/&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |-- app1/&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| | |&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| | |- main.go&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| | |&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| | |- handler/&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |-- app2/&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |- main.go&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |- handler/&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-- internal/&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |-- pkg&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| | |&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| | |-- data&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| | |&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| | |-- log&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |-- router&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |-- service&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-- pkg/&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| |-- kit&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-- vendor/&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-- go.mod&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>|-- go.sum&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cmd">cmd/&lt;/h3>&lt;p>&lt;code>cmd&lt;/code> 目录项目中的可执行程序的入口，主要放置 &lt;code>main()&lt;/code> 函数，每个可执行程序对应一个子文件夹，文件夹应以程序的名称命名，可以在名字后面加字母 &lt;code>d&lt;/code>，表示程序将以守护进程的方式运行。应用程序中必须包含一个 &lt;code>main()&lt;/code> 函数的源文件，即 demo 中的 &lt;code>main.go&lt;/code>，文件名字最好与程序名字一致。&lt;code>cmd&lt;/code> 包可能会导入 &lt;code>internal&lt;/code>、&lt;code>pkg&lt;/code> 或 &lt;code>vendor&lt;/code> 包中的代码。&lt;/p>&lt;h2 id="internal">internal/&lt;/h2>&lt;p>&lt;code>internal&lt;/code> 目录是项目私有的代码。 1.4 版本新增了 &lt;a href="https://golang.org/doc/go1.4#internalpackages">Internal packages&lt;/a> 特性，&lt;code>internal&lt;/code> 目录中的代码只能被 &lt;code>internal&lt;/code> 目录的父目录下的子目录引用，举个例子 &lt;code>.../a/b/c/internal/d/e/f&lt;/code> 仅仅可以被 &lt;code>.../a/b/c&lt;/code> 下的目录导入，&lt;code>.../a/b/g&lt;/code> 则不允许。除了 &lt;code>internal&lt;/code> 根目录之外，也可以在任何目录下创建 &lt;code>internal&lt;/code> 目录。&lt;/p>&lt;h2 id="pkg">pkg/&lt;/h2>&lt;p>放在 &lt;code>pkg&lt;/code> 目录下的代码可以被其他项目直接导入。可以理解为 &lt;code>internal&lt;/code> 目录下的代码是项目的私有代码，而 &lt;code>pkg&lt;/code> 目录下的代码是开放的代码。如果项目中不包含公共的代码，则可以不需要 &lt;code>pkg&lt;/code> 包。而且如果项目足够小，或者项目只是一个工具包，也完全不需要 &lt;code>pkg&lt;/code> 包。&lt;/p>&lt;h3 id="vendor">vendor/&lt;/h3>&lt;p>存放项目依赖的目录，通常是依赖管理工具自己来维护。例如, &lt;code>go mod vendor&lt;/code> 命令会将项目的依赖放到 &lt;code>vendor&lt;/code> 目录。&lt;/p>&lt;h3 id="其他目录">其他目录&lt;/h3>&lt;p>不同类型的项目通常还包括其他的一些目录，比如服务型项目通常会有一个 &lt;code>api&lt;/code> 目录，web 项目通常会有一个 &lt;code>web&lt;/code> 目录以存放静态资源，工具包类型的项目通常会包含一个 &lt;code>examples&lt;/code> 目录。&lt;/p>&lt;h2 id="总结">总结&lt;/h2>&lt;p>这篇文章简单的描述了常见的 golang 项目布局方式，实际项目中，不一定要按照这两种方式来组织代码结构，一切以实际项目为准。先让代码能跑起来， 再试图让它变得更好，最后再试着让它变得更快。&lt;/p></description></item><item><title>死锁条件</title><link>https://sunpe.github.io/posts/2020-04-30-dead-lock/</link><pubDate>Thu, 30 Apr 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-04-30-dead-lock/</guid><description>&lt;p>死锁（deadlock）是指两个进程被相互阻塞，并且一直处于这样的状态。&lt;/p>&lt;p>大部分死锁都和资源有关，按占用方式来看，资源分为两类：可抢占资源和不可抢占资源。可抢占资源（preemptable resource）可以从拥有它的进程中抢占而不会产生任何副作用；不可抢占资源（nonpreemptable resource）是指不能从当前占用它的进程中强行抢占的资源，必须由拥有者主动释放。&lt;/p>&lt;p>Coffman 总结了发生死锁的四个必要条件：&lt;/p>&lt;ul>&lt;li>相互排斥，并发进程同时拥有资源的独占权。&lt;/li>&lt;li>等待条件，并发进程必须同时拥有一个资源，并等待额外的资源。&lt;/li>&lt;li>不可抢占，并发进程拥有的资源只能被该进程释放。&lt;/li>&lt;li>循环等待，一个并发进程（P1）必须等待一系列的其他并发进程（P2）这些并发进程同时也在等待进程（P1）&lt;/li>&lt;/ul>&lt;p>死锁发生时，一定同事满足这四个条件，如果其中某一条件不满足，死锁就不会发生。&lt;/p></description></item><item><title>数据结构--队列</title><link>https://sunpe.github.io/posts/2020-04-17-data-struct-queue/</link><pubDate>Fri, 17 Apr 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-04-17-data-struct-queue/</guid><description>&lt;p>和栈相似，队列（queue）也是表，所不同的是队列的插入在表的一端进行而删除则在另一端进行。与栈的后进先出（LIFO）不同，队列中的元素特性是先进先出（FIFO）。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/data_struct_queue/1.png" alt="">图 1&lt;/p>&lt;p>队列的基本操作：&lt;/p>&lt;ul>&lt;li>入队，在表的末端，也叫队尾（rear），插入一个元素&lt;/li>&lt;li>出队，删除或返回表的开头，也叫队头（front）的元素&lt;/li>&lt;/ul>&lt;h2 id="队列的实现">队列的实现&lt;/h2>&lt;p>如同栈一样，对于队列而言，任何表的实现都是合法的。对于入队和出队操作，链表和数组的实现都能给出 O(1) 的运行时间。&lt;/p>&lt;h3 id="队列的数组slice实现">队列的数组slice实现&lt;/h3>&lt;p>对于队列数据结构，我们保留一个数组 []interface、 队头位置 front、 队尾位置 rear 以及队列中元素的个数 size. 如果有元素 X 入队，可以让 size 和 rear 加 1，然后设置 Queue[rear]=X。如果有元素出队，需要返回 Queue[front]，然后size减1，front加1。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/data_struct_queue/2.png" alt="">图 2&lt;/p>&lt;p>通过数组实现队列有一个潜在的问题，经过几次入队和出队操作之后，front 和 rear 会到数组的边界。简单的解决方式是，如果 front 或 rear 到达数组的尾端，就绕到开头。这种方式叫循环数组实现。&lt;/p>&lt;p>通过 slice 实现队列也需要限制 slice 的容量，在 front 和 rear 到达边界时，可以采用和数组同样的逻辑，以免 slice 不断扩容。&lt;/p>&lt;h3 id="队列的链表实现">队列的链表实现&lt;/h3>&lt;p>和数组的实现方式类似，我们需要定义一个链表，指向队列头元素的指针 front，指向队列尾元素的指针 rear，以及队列元素个数 size。如果有元素 X 入队，可以将 X 添加到链表的尾部，然后将rear 指向 X。如果元素出对，返回并删除 front 指向的元素，然后将 front 指向 front 的前驱元素。&lt;/p>&lt;h2 id="参考资料">参考资料&lt;/h2>&lt;ol>&lt;li>数据结构与算法分析&lt;/li>&lt;/ol></description></item><item><title>数据结构--栈</title><link>https://sunpe.github.io/posts/2020-04-03-data-struct-stack/</link><pubDate>Fri, 03 Apr 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-04-03-data-struct-stack/</guid><description>&lt;p>栈（stack）是限制插入和删除只能在一个位置上进行的表，该位置叫表的末端，或者叫栈顶（top）。由于对栈中所有元素的操作都是在栈顶，所以栈有后进先出（LIFO）的特性。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/data_struct_stack/1.png" alt="">图 1&lt;/p>&lt;p>栈的基本操作有：&lt;/p>&lt;ul>&lt;li>元素入栈操作 &lt;code>push&lt;/code>&lt;/li>&lt;li>元素出栈操作 &lt;code>pop&lt;/code>&lt;/li>&lt;li>查看栈顶元素 &lt;code>top&lt;/code>&lt;/li>&lt;/ul>&lt;p>入栈是指在栈顶插入元素，出栈是指删除栈顶元素。&lt;/p>&lt;h2 id="栈的实现">栈的实现&lt;/h2>&lt;h2 id="通过链表实现">通过链表实现&lt;/h2>&lt;p>可以使用单链表来实现栈，链表的前端作为栈顶，通过在链表头插入元素来实现 push，删除表头元素来实现 pop，top 操作只是返回链表头部元素的指。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;container/list&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;sync&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Stack&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">RWMutex&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">List&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">New&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Stack&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Stack&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>: &lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(),&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Stack&lt;/span>) &lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">PushFront&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Stack&lt;/span>) &lt;span style="color:#a6e22e">Pop&lt;/span>() &lt;span style="color:#66d9ef">interface&lt;/span>{} {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ele&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Front&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Remove&lt;/span>(&lt;span style="color:#a6e22e">ele&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Stack&lt;/span>) &lt;span style="color:#a6e22e">Top&lt;/span>() &lt;span style="color:#66d9ef">interface&lt;/span>{} {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RLock&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RUnlock&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Front&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="通过-slice-实现">通过 slice 实现&lt;/h3>&lt;p>使用 slice 实现栈比较简单，先声明一个初始容量比较大的 slice，空栈时栈顶 index(top) 可以设置为 -1，有新元素 x 入栈操作，可以将栈顶index(top) 的值加 1，然后设置 stack[top]=x；元素出栈操作，可以先返回 stack[top]，然后将栈顶 index(top) 的值减 1。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;sync&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Stack&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">RWMutex&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span> []&lt;span style="color:#66d9ef">interface&lt;/span>{}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">top&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">capacity&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Stack&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Stack&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>: make([]&lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">capacity&lt;/span>),&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>: &lt;span style="color:#a6e22e">capacity&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">top&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Stack&lt;/span>) &lt;span style="color:#a6e22e">Push&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">top&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">c&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;stack over flow&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">top&lt;/span>&lt;span style="color:#f92672">++&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">top&lt;/span>] = &lt;span style="color:#a6e22e">v&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Stack&lt;/span>) &lt;span style="color:#a6e22e">Pop&lt;/span>() &lt;span style="color:#66d9ef">interface&lt;/span>{} {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">top&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;empty stack&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ele&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">top&lt;/span>]&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">top&lt;/span>&lt;span style="color:#f92672">--&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ele&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Stack&lt;/span>) &lt;span style="color:#a6e22e">Top&lt;/span>() &lt;span style="color:#66d9ef">interface&lt;/span>{} {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RLock&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RUnlock&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">top&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;empty stack&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">top&lt;/span>]&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>&lt;p>栈实现简单，效率很高，通常 push 和 pop 都是 O(1) 的操作。错误检测和线程安全方面的考虑可能会拖慢栈的执行效率，对空栈的 pop 和对满栈的 push 可能都会导致程序异常。在golang中实现栈还有一个问题是，golang目前没有支持泛型（generic）或者类型参数（type params），所以编写通用的数据结构只能使用 interface，这样带来的问题是，无法在数据结构的实现中来保证数据类型的安全，使用时需要多加注意。&lt;/p>&lt;h2 id="参考资料">参考资料&lt;/h2>&lt;ol>&lt;li>数据结构与算法分析&lt;/li>&lt;/ol></description></item><item><title>数据结构--列表</title><link>https://sunpe.github.io/posts/2020-03-20-data-struct-list/</link><pubDate>Fri, 20 Mar 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-03-20-data-struct-list/</guid><description>&lt;p>形如 A1, A2, A3, … AN这样的表，表大小是 N，大小为 0 的表叫空表。对于空表之外的表 Ai+1 是 Ai 的后继，Ai-1 (i&amp;gt;=1) 是 Ai 的前驱。A1 是表的第一个元素，AN 是表的最后一个元素，A1 没有前驱元素，AN 也没有后继元素。&lt;/p>&lt;p>表的操作通常有：&lt;/p>&lt;ul>&lt;li>查找元素位置的操作&lt;code>find&lt;/code>&lt;/li>&lt;li>返回某个位置上的元素的操作&lt;code>findKth&lt;/code>&lt;/li>&lt;li>插入元素的操作&lt;code>insert&lt;/code>&lt;/li>&lt;li>删除元素的操作&lt;code>delete&lt;/code>&lt;/li>&lt;/ul>&lt;h2 id="表的实现">表的实现&lt;/h2>&lt;h3 id="通过数组或slice实现">通过数组或slice实现&lt;/h3>&lt;p>表的所有操作都可以基于数组或 slice 来实现，数组需要指定数组的大小，而 slice 底层数据也是数组，在空间上也有一定的局限性，特别是在处理未知大小的表的情况下。数组实现的表，&lt;code>find&lt;/code> 操作基于实现的不同时间复杂度可能会是 O(N) 或者 O(logN)，&lt;code>findKth&lt;/code> 会是 O(1) 的操作，&lt;code>insert&lt;/code> 和 &lt;code>delete&lt;/code> 操作可能会有很大的开销，比如在表头位置插入新元素或删除表头元素，需要表中的所有元素顺移一位。&lt;/p>&lt;p>所以基于数组实现的表适合于随机读的情况，而不适于随机写的情况。&lt;/p>&lt;h3 id="链表">链表&lt;/h3>&lt;p>为了避免 insert 和 delete 的开销，可以让表的元素不连续，链表（linked list）是由一系列不必在内存中连续的结构组成，每个结构包含表的元素和后继元素的指针（Next），表尾元素的 next 指针是 nil。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/data_struct_list/1.png" alt="">图 1&lt;/p>&lt;p>这种情况下，insert 和 delete 操作只需要修改 next 指针就可以实现了。比如删除「99」这个元素，只需要将「12」元素的 next 指针指向「37」元素就可以了；要在「99」元素和「37」元素中间插入元素，则需要将「99」元素的 next 指向新的元素，并且将新元素的 next 指向「37」。&lt;/p>&lt;p>有时候需要倒序遍历链表，单链表的方式显得无能为力，然而解决方法却很简单，只需要在链表的元素中添加一个指针域，指向链表元素的前驱即可。这样就形成了双向链表（double linked list）。&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/data_struct_list/2.png" alt="">图 2&lt;/p>&lt;p>让链表的最后一个链表元素反过来指向第一个链表元素, 就形成了循环链表.&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/data_struct_list/3.png" alt="">图 3&lt;/p>&lt;p>同样的, 如果让双向循环链表的最后一个元素的后继指针指向第一个元素, 第一个元素的前驱指针指向最后一个元素, 就形成了双向循环链表.&lt;/p>&lt;p>&lt;img src="https://sunpe.github.io/images/data_struct_list/3.png" alt="">图 4&lt;/p>&lt;h2 id="链表实现">链表实现&lt;/h2>&lt;p>golang 的 &lt;code>container/list/List.go&lt;/code> 提供了一个双向链表的实现，如下是其中的部分代码。&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Copyright 2009 The Go Authors. All rights reserved.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Use of this source code is governed by a BSD-style&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// license that can be found in the LICENSE file.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Package list implements a doubly linked list.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// To iterate over a list (where l is a *List):&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// for e := l.Front(); e != nil; e = e.Next() {&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// // do something with e.Value&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// }&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Element is an element of a linked list.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Element&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Next and previous pointers in the doubly-linked list of elements.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// To simplify the implementation, internally a list l is implemented&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// as a ring, such that &amp;amp;l.root is both the next element of the last&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// list element (l.Back()) and the previous element of the first list&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// element (l.Front()).&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>, &lt;span style="color:#a6e22e">prev&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The list to which this element belongs.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The value stored with this element.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Next returns the next list element or nil.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#a6e22e">Next&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>; &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Prev returns the previous list element or nil.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#a6e22e">Prev&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span>; &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// List represents a doubly linked list.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The zero value for List is an empty list ready to use.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">List&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#a6e22e">Element&lt;/span> &lt;span style="color:#75715e">// sentinel list element, only &amp;amp;root, root.prev, and root.next are used&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">len&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// current list length excluding (this) sentinel element&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Init initializes or clears list l.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">Init&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">len&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// New returns an initialized list.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">New&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> new(&lt;span style="color:#a6e22e">List&lt;/span>).&lt;span style="color:#a6e22e">Init&lt;/span>() }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Len returns the number of elements of list l.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The complexity is O(1).&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">Len&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">len&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Front returns the first element of list l or nil if the list is empty.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">Front&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">len&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Back returns the last element of list l or nil if the list is empty.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">Back&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">len&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// lazyInit lazily initializes a zero List value.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">lazyInit&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Init&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// insert inserts e after at, increments l.len, and returns e.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">insert&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">at&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">at&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">at&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span> = &lt;span style="color:#a6e22e">e&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span> = &lt;span style="color:#a6e22e">at&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span> = &lt;span style="color:#a6e22e">n&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span> = &lt;span style="color:#a6e22e">e&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> = &lt;span style="color:#a6e22e">l&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">len&lt;/span>&lt;span style="color:#f92672">++&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// insertValue is a convenience wrapper for insert(&amp;amp;Element{Value: v}, at).&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">insertValue&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">at&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">insert&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>{&lt;span style="color:#a6e22e">Value&lt;/span>: &lt;span style="color:#a6e22e">v&lt;/span>}, &lt;span style="color:#a6e22e">at&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// remove removes e from its list, decrements l.len, and returns e.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">remove&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span> = &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span> = &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#75715e">// avoid memory leaks&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#75715e">// avoid memory leaks&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">len&lt;/span>&lt;span style="color:#f92672">--&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// move moves e to next to at and returns e.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">at&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">at&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span> = &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span> = &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">at&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">at&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span> = &lt;span style="color:#a6e22e">e&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span> = &lt;span style="color:#a6e22e">at&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span> = &lt;span style="color:#a6e22e">n&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span> = &lt;span style="color:#a6e22e">e&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Remove removes e from l if e is an element of list l.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// It returns the element value e.Value.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The element must not be nil.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">Remove&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#66d9ef">interface&lt;/span>{} {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// if e.list == l, l must have been initialized when e was inserted&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// in l or l == nil (e is a zero Element) and l.remove will crash&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">remove&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// PushFront inserts a new element e with value v at the front of list l and returns e.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">PushFront&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">lazyInit&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">insertValue&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// PushBack inserts a new element e with value v at the back of list l and returns e.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">PushBack&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">lazyInit&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">insertValue&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// InsertBefore inserts a new element e with value v immediately before mark and returns e.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// If mark is not an element of l, the list is not modified.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The mark must not be nil.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">InsertBefore&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">mark&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">mark&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// see comment in List.Remove about initialization of l&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">insertValue&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">mark&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// InsertAfter inserts a new element e with value v immediately after mark and returns e.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// If mark is not an element of l, the list is not modified.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The mark must not be nil.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">InsertAfter&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">mark&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">mark&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// see comment in List.Remove about initialization of l&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">insertValue&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">mark&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// MoveToFront moves element e to the front of list l.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// If e is not an element of l, the list is not modified.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The element must not be nil.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">MoveToFront&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// see comment in List.Remove about initialization of l&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// MoveToBack moves element e to the back of list l.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// If e is not an element of l, the list is not modified.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The element must not be nil.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">MoveToBack&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// see comment in List.Remove about initialization of l&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// MoveBefore moves element e to its new position before mark.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// If e or mark is not an element of l, or e == mark, the list is not modified.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The element and mark must not be nil.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">MoveBefore&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">mark&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">mark&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">mark&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">mark&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// MoveAfter moves element e to its new position after mark.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// If e or mark is not an element of l, or e == mark, the list is not modified.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The element and mark must not be nil.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">MoveAfter&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">mark&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Element&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">mark&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">mark&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>, &lt;span style="color:#a6e22e">mark&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// PushBackList inserts a copy of an other list at the back of list l.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The lists l and other may be the same. They must not be nil.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">PushBackList&lt;/span>(&lt;span style="color:#a6e22e">other&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">lazyInit&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">other&lt;/span>.&lt;span style="color:#a6e22e">Len&lt;/span>(), &lt;span style="color:#a6e22e">other&lt;/span>.&lt;span style="color:#a6e22e">Front&lt;/span>(); &lt;span style="color:#a6e22e">i&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">insertValue&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>, &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>.&lt;span style="color:#a6e22e">prev&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// PushFrontList inserts a copy of an other list at the front of list l.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The lists l and other may be the same. They must not be nil.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) &lt;span style="color:#a6e22e">PushFrontList&lt;/span>(&lt;span style="color:#a6e22e">other&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">List&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">lazyInit&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">other&lt;/span>.&lt;span style="color:#a6e22e">Len&lt;/span>(), &lt;span style="color:#a6e22e">other&lt;/span>.&lt;span style="color:#a6e22e">Back&lt;/span>(); &lt;span style="color:#a6e22e">i&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Prev&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">insertValue&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考资料">参考资料&lt;/h2>&lt;ol>&lt;li>数据结构与算法分析&lt;/li>&lt;/ol></description></item><item><title>使用 Jekyll 和 Git Page 搭建个人博客</title><link>https://sunpe.github.io/posts/2020-02-29-build-blog-with-jekyll/</link><pubDate>Sat, 29 Feb 2020 22:00:00 +0800</pubDate><guid>https://sunpe.github.io/posts/2020-02-29-build-blog-with-jekyll/</guid><description>&lt;p>jekyll 是一个简单的静态网站生成器，可以将 markdown 文档或 html 文档转换成一个完整的可发布的静态网站。并且内置 GitHub Pages 支持。&lt;/p>&lt;p>GitHub Pages 是一项静态站点托管服务，直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，可以通过构建过程运行文件，发布网站。目前 github 支持 3 种类型的 GitHub Pages 站点：project，user 和 organization，具体可以参考&lt;a href="https://help.github.com/en/github/working-with-github-pages/about-github-pages">github的帮助文档&lt;/a>。&lt;/p>&lt;h2 id="创建git仓库">创建git仓库&lt;/h2>&lt;p>创建个人博客是 user 类型的 GitHub Pages 站点。首先需要在 github 上创建 repository。&lt;/p>&lt;ol>&lt;li>点击 github 页面右上角的「New repository」选项。&lt;/li>&lt;/ol>&lt;p>&lt;img src="https://sunpe.github.io/images/build_blog_with_jekyll/1.png" alt="">图 1&lt;/p>&lt;ol start="2">&lt;li>输入仓库名称和说明，个人博客的仓库名称必须为 &lt;code>&amp;lt;user&amp;gt;.github.io&lt;/code>。&lt;/li>&lt;/ol>&lt;p>&lt;img src="https://sunpe.github.io/images/build_blog_with_jekyll/2.png" alt="">图 2&lt;/p>&lt;ol start="3">&lt;li>选择仓库的可见性，一般是「public」。&lt;/li>&lt;/ol>&lt;p>&lt;img src="https://sunpe.github.io/images/build_blog_with_jekyll/3.png" alt="">图 3&lt;/p>&lt;ol start="4">&lt;li>创建ReadMe文件。&lt;/li>&lt;/ol>&lt;p>&lt;img src="https://sunpe.github.io/images/build_blog_with_jekyll/4.png" alt="">图 4&lt;/p>&lt;ol start="5">&lt;li>点击「Create repository」按钮，仓库就创建完成。&lt;/li>&lt;/ol>&lt;h2 id="通过jeykll创建github-page">通过jeykll创建github page&lt;/h2>&lt;p>建议使用 Bundler 安装和运行 Jekyll。Bundler 可管理 &lt;code>Ruby gem&lt;/code> 依赖项，减少 Jekyll 构建错误和阻止环境相关的bug。&lt;/p>&lt;ul>&lt;li>安装 Ruby，可参考&lt;a href="https://www.ruby-lang.org/en/documentation/installation/">文档&lt;/a>&lt;/li>&lt;li>安装 Bundler，可参考&lt;a href="https://bundler.io/">文档&lt;/a>&lt;/li>&lt;li>安装 jekyll &lt;code>gem install bundler jekyll&lt;/code>&lt;/li>&lt;li>使用jeykll创建站点&lt;code>jekyll new my-awesome-site&lt;/code>。执行完之后在目录下会又一个 &lt;code>my-awesome-site&lt;/code> 目录，包含了最基本的站点文件。其中 &lt;code>_config.yml&lt;/code> 是站点配置文件，&lt;code>_posts&lt;/code>是文章目录。&lt;/li>&lt;/ul>&lt;pre tabindex="0">&lt;code>-----||- 404.html|- Gemfile|- _config.yml|- _posts| |-YYYY-mm-DD-welcome-to-jekyll.markdown|- about.markdown|- index.markdown&lt;/code>&lt;/pre>&lt;ul>&lt;li>在 &lt;code>my-awesome-site&lt;/code> 目录使用 &lt;code>jekyll serve&lt;/code> 命令就可以编译并启动一个内置的 server，本地会多一个 &lt;code>_site&lt;/code> 目录，存放的是编译后的站点文件。可以在浏览器输入 &lt;code>localhost:4000&lt;/code> 预览站点了。&lt;/li>&lt;li>将 &lt;code>my-awesome-site&lt;/code> 目录提交到 github 仓库（&lt;code>_site&lt;/code>目录和&lt;code>Gemfile.lock&lt;/code>文件可以不用提交），就可以通过&lt;code>&amp;lt;user&amp;gt;.github.io&lt;/code> 访问页面了。&lt;/li>&lt;/ul>&lt;h2 id="发布文章">发布文章&lt;/h2>&lt;p>jekyll 创建的站点 post 文件名格式为 &lt;code>YEAR-MONTH-DAY-title.md&lt;/code>，post 文件需要添加 matter 头，指定 layout 和其他 meta 数据。将编写好的 post 放到 &lt;code>_post&lt;/code> 文件，重新发布站点，就可以看到新发布的 post 了。&lt;/p>&lt;pre tabindex="0">&lt;code>---layout: posttitle: &amp;#34;Welcome to Jekyll!&amp;#34;---# Welcome**Hello world**, this is my first Jekyll blog post.I hope you like it!&lt;/code>&lt;/pre>&lt;h2 id="drafts目录">Drafts目录&lt;/h2>&lt;p>如果 post 没写完，只想保存草稿，可以将 post 文件放在 &lt;code>_drafts&lt;/code> 目录（需要新建），而且文件 title 可以不带日期。可以在 &lt;code>jekyll serve&lt;/code> 或 &lt;code>jekyll build&lt;/code> 命令后添加 &lt;code>--drafts&lt;/code> 参数，来预览草稿。&lt;/p>&lt;h2 id="更换主题">更换主题&lt;/h2>&lt;p>通过 &lt;code>jekyll new&lt;/code> 创建的页面默认的主题是 &lt;a href="https://github.com/jekyll/minima">Minima&lt;/a> 。另外 jeykll 有大量优质的主题，可以从以下网站获取 jekyll 主题：&lt;/p>&lt;ul>&lt;li>&lt;a href="https://jamstackthemes.dev/ssg/jekyll/">jamstackthemes.dev&lt;/a>&lt;/li>&lt;li>&lt;a href="http://jekyllthemes.org/">jekyllthemes.org&lt;/a>&lt;/li>&lt;li>&lt;a href="https://jekyllthemes.io/">jekyllthemes.io&lt;/a>&lt;/li>&lt;li>&lt;a href="https://jekyll-themes.com/">jekyll-themes.com&lt;/a>&lt;/li>&lt;/ul>&lt;p>详细可以参考&lt;a href="https://jekyllrb.com/docs/themes/g">jekyll theme文档&lt;/a>。&lt;/p>&lt;h2 id="自定义域名">自定义域名&lt;/h2>&lt;p>github page 支持自定义域名或子域名。可以再阿里云或腾讯云购买一个自己的域名。可以参考&lt;a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">git page文档&lt;/a>。&lt;/p>&lt;h2 id="参考资料">参考资料&lt;/h2>&lt;ol>&lt;li>&lt;a href="https://jekyllrb.com/docs/">https://jekyllrb.com/docs/&lt;/a>&lt;/li>&lt;li>&lt;a href="https://help.github.com/cn/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll">https://help.github.com/cn/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll&lt;/a>&lt;/li>&lt;/ol></description></item></channel></rss>