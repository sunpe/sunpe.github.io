
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>golang on hello world</title>
   <link>https://sunpe.github.io/tags/golang/</link>
   <description>Recent content in golang on hello world</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en</language>
   <copyright>Copyright &amp;copy; 2020 - sunpeng</copyright>
   <lastBuildDate>Sat, 17 Oct 2020 22:00:00 +0800</lastBuildDate>
   
       <atom:link href="https://sunpe.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>面向对象的设计原则-SOLID</title>
       <link>https://sunpe.github.io/posts/2020-12-12-solid/</link>
       <pubDate>Sat, 12 Dec 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-12-12-solid/</guid>
       <description>&lt;h2 id=&#34;单一职责原则single-responsibility-principlesrp&#34;&gt;单一职责原则（Single responsibility principle，SRP）&lt;/h2&gt;&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;&lt;p&gt;就一个类而言，应该仅有一个引起它变化的原因。&lt;/p&gt;&lt;p&gt;如果一个类承担的职责过多，就等于把这些职责耦合在了一起，一个职责变化可能会抑制或消弱类完成其他职责的能力，这种耦合会导致脆弱的设计，当变化发生时，设计会遭到意想不到的破坏。&lt;/p&gt;&lt;p&gt;图 1 所示，Retangle 类具有两个方法，一个方法用来绘制矩形，一个方法用来计算矩形面积。有两个应用程序使用 Rectangle 类，只会使用 Rectangle 类计算矩形面积的方法，另外一个应用程序只会在屏幕上绘制矩形。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/1.png&#34; alt=&#34;&#34;&gt;图1 多于一个的职责&lt;/p&gt;&lt;p&gt;Rectangle 类具有两个职责，违反了 SRP。带来的问题，首先，必须在 ComputationalGeometryApplication 中包含 绘制矩形 代码；其次，如果 GraphicalApplication 的改变由于一些原因导致 Rectangle 类的改变，这个改变需要重新构建、测试并部署 ComputationalGeometryApplication，否则 ComputationalGeometryApplication 可能会以不可预测的方式出现问题。&lt;/p&gt;&lt;p&gt;一个较好的设计是把这两个职责拆分到两个不同的类中，如图 2 所示，将Rectangle中计算逻辑移到 GeometricRectangle 类中，现在 GraphicalApplication 的改变不会对 ComputationalGeometryApplication 造成影响。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/2.png&#34; alt=&#34;&#34;&gt;图2 分离的职责&lt;/p&gt;&lt;p&gt;SRP中，职责定义为「变化的原因」，如果有多于一个动机可以改变一个类，那么这个类就具有多于一个职责。程序 1 的 Modem 接口，接口声明的 4 个函数确实是 Modem 所具有的功能。但 Modem 接口有两个职责，dial 和 hangup 是用来连接管理，send 和 recv 是用来数据通信。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Modem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dial&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String pno&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hangup&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两个两个职责是否应该分开呢？这依赖于程序变化的方式。如果应用程序变化会影响连接函数的签名，那么调用 send 和 recv 函数的类都需要重新测试、编译和部署，这样的设计就具有僵化性。这种情况下，这两个职责应该分开，如图 3 所示，这样就避免了客户应用程序和这两个职责耦合在一起了。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/3.png&#34; alt=&#34;&#34;&gt;图3 分离的Modem接口&lt;/p&gt;&lt;p&gt;如果应用程序的变化方式总是导致这两个职责同时变化，那么就不必将这两个职责拆分开，拆分了之后会增加不必要的复杂性。&lt;/p&gt;&lt;p&gt;因此，「变化」只有「变化」实际发生时才具有意义，如果没有变化的征兆，那么去应用SRP活着其他原则都是不明智的。&lt;/p&gt;&lt;p&gt;单一职责原则（SRP）是其他原则的基础，是SOLID中最简单的原则，也是最难正确运用的原则，软件设计中许多工作就是发现职责并把这些职责互相分离。&lt;/p&gt;&lt;h2 id=&#34;开放-封闭原则open-closed-principleocp&#34;&gt;开放-封闭原则（Open-Closed principle，OCP）&lt;/h2&gt;&lt;p&gt;软件实体（类、模块、函数等）应该是可以扩展的，并且是不可修改的。&lt;/p&gt;&lt;p&gt;如果程序中一处改动就会产生连锁反应，导致一系列相关模块的改动，那么这样的设计是僵化的。OCP 建议对僵化的程序进行重构，如果正确的运用了 OCP，那么进行改动时，只需要添加代码，而不必改动已经正常运行的代码。&lt;/p&gt;&lt;p&gt;遵循开放-封闭原则而设计出的模块具有两个特征：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;对于扩展开放（open for extension）。 模块的行为是可扩展的，当需求改变时，可以对模块进行扩展，使其具有满足那些改变的新行为。&lt;/li&gt;&lt;li&gt;对于修改关闭（closed for modification）。对模块进行扩展时，不必改动模块的源代码。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这两个特征好像是互相矛盾的，通常扩展模块行为的方法就是修改模块的源代码。怎样才能不改动模块源代码的情况下去更改模块的行为呢？关键是运用&lt;strong&gt;抽象&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;抽象基类或接口可以描述一组行为，派生类或实现类可以继承基类或接口来实现接口的行为。模块可以依赖抽象基类或接口，由于模块依赖固定的抽象基类或接口，所以对于模块的更改可以是关闭的，通过从基类或接口来实现派生类或实现类，也可以扩展模块的行为。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/4.png&#34; alt=&#34;&#34;&gt;图 4 即不开放有不封闭的 Client&lt;/p&gt;&lt;p&gt;图 4 展示了一个简单的不遵循 OCP 的设计，Client 类和 Server 类都是具体类，client 类依赖 Server 类，如果 Client 对象需要依赖其他的服务器对象，则需要把 Client 类中依赖 Server 类的地方更改给新的服务器类。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/5.png&#34; alt=&#34;&#34;&gt;图 5 strategy模式，即开放又封闭的 Client&lt;/p&gt;&lt;p&gt;图 5 展示了遵循 OCP 的设计，Client 类依赖 IClient 接口，Server 类实现 IClient 声明的方法，如果 Client 对象需要依赖另外的服务器时，只需要从 IClient 接口重新实现一个新的类，无需修改 Client 类。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/6.png&#34; alt=&#34;&#34;&gt;图 6 template method 模式，即开放又封闭的基类&lt;/p&gt;&lt;p&gt;图 6 展示了另一个可选的结构，Policy 类是一个抽象类，声明了公有的 policyFunction 方法，函数在子类中实现，这样可以通过从 Policy 类派生出新类的方式，对 Policy 中的行为进行扩展。&lt;/p&gt;&lt;p&gt;图 5 和图 6 两种模式是实现 OCP 的常用方法，通过这两种方法，可以将模块的通用部分和可能会改动的部分分离开来。&lt;/p&gt;&lt;p&gt;一般而言，无论模块多么「封闭」，都会存在一些无法对之封闭的变化，没有对所有情况都贴切的模型，设计人员必须对其设计的模块要对哪种变化封闭作出选择，必须先根据经验猜测出最有可能发生变化的种类，然后构造抽象来隔离变化。设计人员需要了解程序的用户和应用领域，以此来判断各种变化的可能性，让设计对于最有可能发生变化遵循 OCP。&lt;/p&gt;&lt;p&gt;通常很难判断变化的可能性，而且遵循 OCP 的代价也是高昂的，创建抽象需要花费精力和时间，抽象也增加了设计的复杂性。比起过渡设计而带来的不必要的复杂性来说，在变化发生时才应用 OCP 原则重构程序的方式可能会更好。&lt;/p&gt;&lt;p&gt;OCP 是面向对象设计的核心所在，遵循这个原则可以带来灵活性、可重用性以及可维护性，然而对程序中的每个部分都肆意的进行抽象同样不可取。正确的做法是，开放人员应该仅仅对程序中表现出频繁变化的那部分做抽象，拒绝不成熟的抽象和创建抽象一样重要。&lt;/p&gt;&lt;h2 id=&#34;里氏替代原则liskov-substitution-principlelsp&#34;&gt;里氏替代原则（Liskov substitution principle，LSP）&lt;/h2&gt;&lt;p&gt;LSP 是关于基类继承（inheritance）的原则。Barbara Liskov 指出，若对于&lt;em&gt;每个类型 S 的对象 o1，都存在一个类型 T 的对象 o2，使得对于所有针对 T 编写的程序 P 中，用 o1 替换 o2 后，程序 P 的行为功能不变，那么 S 是 T 的子类型&lt;/em&gt;。对里氏替代原则的简单解释是： 子类型（subtype）必须能够替换掉他们的基类型（base type）。&lt;/p&gt;&lt;p&gt;继承是 IS-A 的关系，如果一个新类型的对象和一个已知类型的对象之间满足 IS-A 关系，那么这个新对象的类应该是从这个已知对象的类派生的。&lt;/p&gt;&lt;p&gt;一般来说，正方形是一个（IS-A）矩形，因此 Square 类可以作为 Rectangle 类的子类，如图 7。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/7.png&#34; alt=&#34;&#34;&gt;图 7  Square 类是 Rectangle 类的子类&lt;/p&gt;&lt;p&gt;这样的设计可能会存在一些问题，首先 Square 类并不需要同时具有 setWidth 和 setHeight 方法，而且对于 Square 类来说 width 和 height 应该始终是相同的，更为严重的是，对于程序 2 的测试用例来说，如果把 Square 作为测试的参数是错误的。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Rectangle r&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setWidth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setWidth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;area&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 20&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个模型，如果孤立的看，并不具有真正意义上的有效性，模型的有效性是通过模型的使用者来表现的。例如，如果孤立的看，图 7 的模型是有效的，但是从模型的使用者来说，图 7 这个模型是有问题的，在考虑一个设计是否恰当时，不能完全孤立的看设计，必须要在设计的使用者的视角来审视这个设计。&lt;/p&gt;&lt;p&gt;对于图 7 的设计这来说，正方形可以是长方形，但对于使用这来说，Square 对象 绝对不是 Rectangle 对象，因为 Square 对象的行为方式和使用者所期望的 Rectangle 对象的行为方式不相容，从行为方式的角度来看，Square 不是 Rectangle，对象的行为方式才是软件设计真正需要关注的问题。LSP清晰的指出，面向对象设计的 IS-A 关系是就行为方式而言的，行为方式才是使用者所需要的。&lt;/p&gt;&lt;h2 id=&#34;依赖倒置原则dependency-inversion-principledip&#34;&gt;依赖倒置原则（Dependency Inversion principle，DIP）&lt;/h2&gt;&lt;p&gt;高层模块不应该依赖低层模块，二者都应该依赖抽象；抽象不应该依赖细节，细节应该依赖抽象。&lt;/p&gt;&lt;p&gt;许多的传统软件开发方法，比如结构化分析和设计，总是倾向于创建一些高层模块依赖低层模块、业务逻辑依赖低层细节的软件结构，实际上些传统的开发方法的目的之一是要定义程序层次的结构，该层次结构描述了高层模块怎样调用低层模块。一个良好的面向对象的程序，其依赖层次结构相对于传统的过程式方法设计来说就是被「倒置」了。&lt;/p&gt;&lt;p&gt;如果高层模块直接依赖了低层模块，那么低层模块的改动就会直接影响高层模块，这种情形是非常荒谬的，本应该是高层模块去影响低层的细节实现模块，包含业务逻辑的高层模块应该优先并独立于包含细节的低层模块。而且如果高层模块依赖了低层模块，会导致重用高层模块难以被重用。所以高层模块不应该直接依赖于低层模块。&lt;/p&gt;&lt;p&gt;传统的分析和设计方法的知道思想是，「所有结构良好的面向对象架构都具有清晰的层次定义，每个层次通过一个定义良好的、受控的接口向外提供一组内聚的服务」。根据这个思想可能设计出类似于图 8 的接口，高层的 Policy Layer 依赖了低层的 Mechanism Layer，而 Mechanism Layer 又依赖了更细节的 Utility Layer。这样的设计使得高层模块 Policy Layer 对于其下一直到 Utility Layer 的改动都是敏感的。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/8.png&#34; alt=&#34;&#34;&gt;图 8 简单的层次化方案&lt;/p&gt;&lt;p&gt;图 9  展示了依赖关系倒置的模型，每个较高层次 Policy Layer 和 Mechanism Layer 为其需要的服务声明了抽象接口，较低的层次 Mechanism Layer 和 Utility 实现了较高层次模块的接口，高层类通过抽象接口来使用下一层，这样高层不依赖低层，低层反而依赖于在高层中声明的抽象接口。依赖关系被倒置了，接口所有权也倒置了，我们通常认为工具库应该拥有自己的接口，但使用了 DIP 后，客户拥有抽象接口，而服务这需要从这些抽象接口中派生。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/9.png&#34; alt=&#34;&#34;&gt;图 9 倒置的依赖关系&lt;/p&gt;&lt;p&gt;Hollywood 原则 —「don&amp;rsquo;t call us, we&amp;rsquo;ll call you」,低层模块实现了高层模块中声明的接口，通过接口所有权倒置， Mechanism Layer 和 Utility 的任何改动都不会再影响 Policy Layer，而且 Policy Layer 可以在实现了 IPolicyService 的任何上下文中重用。&lt;/p&gt;&lt;p&gt;对于 DIP 稍微简单的解释— 「依赖于抽象」。即不依赖于具体类，程序中的所有依赖关系都应该终止于抽象类或接口。任何变量都不应该持有一个指向具体类的指针或引用，任何类都不应该从具体类派生，任何派生类都不应该覆写基类中已实现的方法。&lt;/p&gt;&lt;p&gt;凡事皆有例外，程序中有时候必须要创建具体类的派生类；而且依赖具体但是稳定的类也不会造成什么问题。比如，Java 中直接依赖 String 类就不会造成什么问题。&lt;/p&gt;&lt;p&gt;然而我们我们程序中的大多数具体类都不是稳定的，我们不应该依赖于不稳定的具体类，通过抽象接口隐藏不稳定的具体类，可以隔离不稳定性。&lt;/p&gt;&lt;p&gt;图 10 展示了使用 Button 控制 Lamp 对象的模型，Button 接收 Poll 消息，然后向调用 Lamp 的 turnOn 或 turnOff 方法。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/10.png&#34; alt=&#34;&#34;&gt;图 10 不成熟的 Button 和 Lamp 模型&lt;/p&gt;&lt;p&gt;图 10 模型对应的代码如 程序 3。Button 类直接依赖 Lamp 类，这个依赖关系意味着当 Lamp 类改动时 Button 类会受影响，而且要重用 Button 来控制另外的设备是不可能的。程序中高层和低层没有实现分离，抽象和具体也没有分离，高层依赖了低层模块，抽象依赖了具体细节。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Lamp lamp&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* some condition */&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;            lamp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;turnOn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过倒置 Lamp 对象的依赖关系，得到图 11 的设计，Button 现在和 ButtonService 接口关联，ButtonService 声明了一些方法，Button 可以使用 ButtonService 的方法开启或关闭一些设备，Lamp 实现了 ButtonService 接口，这样 Lamp 不再被 Button 直接依赖，而且 Button 可以控制任何实现了 ButtonService 接口的设备。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/11.png&#34; alt=&#34;&#34;&gt;图 11 对 Lamp 应用依赖倒置原则&lt;/p&gt;&lt;p&gt;面向对象的程序设计倒置了依赖关系，细节和高层模块都依赖于抽象，并且常常是接口使用方提供服务接口，即接口所有权也倒置了。首相和细节彼此隔离，代码也更容易维护。&lt;/p&gt;&lt;h2 id=&#34;接口隔离原则interface-segregation-principlesisp&#34;&gt;接口隔离原则（Interface-Segregation principles，ISP）&lt;/h2&gt;&lt;p&gt;不应该强迫客户程序依赖于它们不使用的方法。&lt;/p&gt;&lt;p&gt;接口隔离原则用来处理「胖接口」的缺点。如果接口不是内聚的，就表示该接口是「胖接口」。「胖接口」可以分解成多组方法，每组方法服务于一组不同的客户程序。&lt;/p&gt;&lt;p&gt;如果强迫客户程序依赖于它们不使用的方法，那么客户程序就可能会由于这些未使用的方法的改变而变更，无意中导致了所有客户程序之间的耦合。换句话说，如果一个客户程序依赖于一个包含它不使用的方法的类，但是其他客户程序却要使用这个方法，那么当其他客户要求这个类改变时，就会影响到这个客户程序。我们希望尽可能的避免这种耦合，因此需要分离接口。&lt;/p&gt;&lt;p&gt;设计一个安全系统，有一些 Door 对象，可以被加锁和解锁，并且 Door 对象知道自己的开关状态；设计一个 TimeDoor 对象，如果们开着时间过长，则发出警告声。所以 TimeDoor 对象需要和定时器 Timer交互。定时器 Timer  如程序 4。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Timer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; timeout&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; TimeClient client&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// ...&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TimeClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;怎么将 TimeClient 和 TimeDoor 联系起来呢？图 12 展示了一个易于理解的方案，让 Door 派生自 TimeClient，这样 TimeDoor 就自然的可以注册到 Timer 中，并接收到 Timeout 消息。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/12.png&#34; alt=&#34;&#34;&gt;图 12&lt;/p&gt;&lt;p&gt;图 12 方案的主要问题是，Door 类需要依赖于 TimeClient 了，并不是所有的 Door 都需要定时功能，如果存在无需定时的 Door，那么在新的 Door 中需要提供 timeout 方法的退化实现。而且其他的 Door 也不需要 TimeClient 对象，但是依然需要引入 TimeClient。这样 Door 具有了不必要的复杂性以及不必要的重复，Door 被污染了。&lt;/p&gt;&lt;p&gt;Door 和 TimeClient 接口是被不同的客户程序使用的，Timer 使用 TimeClient，TimeDoor 使用 Door，既然客户程序是分离的，那么接口也应该保持分离。&lt;/p&gt;&lt;p&gt;一种分离方式是创建一个 TimeClient的派生类 DoorTimeAdapter，依赖 TimeDoor，如 图13 所示。DoorTimeAdapter 注册到 Timer，当 Timer 对象发送 timeout 消息给 DoorTimeAdapter 时，DoorTimeAdapter  把这个消息委托给 TimeDoor。这个方案避免了 Door 和 Timer 之间的耦合，Timer 的改动不会影响到 Door 的使用者，DoorTimeAdapter 会将 TimeDoor 转换成 TimeClient，TimeDoor 也无需实现 TimeClient 的方法。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/13.png&#34; alt=&#34;&#34;&gt;图 13&lt;/p&gt;&lt;p&gt;但是这种 adapter 的处理方式有些复杂，我们可以让 TimeDoor 同时派生自 TimeClient 和 Door，如图 14 所示，这样 Timer 和 Door 也可以做到解藕。通常我们会优先选择这个方案。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/solid/14.png&#34; alt=&#34;&#34;&gt;图 14&lt;/p&gt;&lt;p&gt;「胖接口」会导致客户程序之间产生不必要的耦合关系，「胖接口」的改动可能会影响所有客户程序。客户程序应该仅仅依赖他们实际需要的方法，可以通过把「胖接口」分解为多个接口来实现客户程序和不需要的方法间的解藕，并使客户程序之间互不依赖。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>敏捷软件开发原则</title>
       <link>https://sunpe.github.io/posts/2020-11-25-principles-of-agile-software-development/</link>
       <pubDate>Wed, 25 Nov 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-11-25-principles-of-agile-software-development/</guid>
       <description>&lt;h2 id=&#34;我们最优先要做的是通过连续不断的及早的交付有价值的软件使客户满意&#34;&gt;我们最优先要做的是通过连续不断的及早的交付有价值的软件使客户满意&lt;/h2&gt;&lt;p&gt;《Product-Development Practices That Work: How Internet Companies Build Software》论文分析了对于公司构建高质量产品方面有帮助的软件开发实践, 发现尽早交付具有部分功能的系统和系统质量之间具有很强的相关性, 论文指出 初期交付的系统中所包含的功能越少, 最终交付的系统质量就会越高. 该论文的另一项发现是, 以逐渐增加功能的方式经常性的交付系统和最终质量之间有着非常强的相关性, 交付的越频繁, 最终产品的质量就越高.&lt;/p&gt;&lt;p&gt;敏捷实践会尽早、经常的进行交付, 我们努力在项目刚开始的几周内交付一个具有基本功能的系统, 然后努力坚持每两周就交付一个功能渐增的系统.&lt;/p&gt;&lt;h2 id=&#34;欣然面对需求变化-即使到了开发后期也一样-敏捷过程利用变化来为客户创造竞争优势&#34;&gt;欣然面对需求变化, 即使到了开发后期也一样. 敏捷过程利用变化来为客户创造竞争优势&lt;/h2&gt;&lt;p&gt;敏捷过程的参与者不惧怕变化, 他们认为改变需求是好的事情. 敏捷团队会非常努力的保持软件结构的灵活性, 这样当需求变化时, 对于系统造成的影响是最小的.&lt;/p&gt;&lt;h2 id=&#34;经常性的交付可以工作的软件-交付的间隔可以从几周到几个月-倾向于采取较短的周期&#34;&gt;经常性的交付可以工作的软件, 交付的间隔可以从几周到几个月, 倾向于采取较短的周期&lt;/h2&gt;&lt;p&gt;我们交付可以工作的软件, 并且尽早的(项目刚开始的几周后)、 经常性的(此后每隔几周)交付它. 我们不赞成交付大量的文档或者计划, 我们认为那不是真正要交付的东西, 我们关注的目标是交付满足客户需要的软件.&lt;/p&gt;&lt;h2 id=&#34;业务人员和开发人员必须相互合作-项目的每一天都不例外&#34;&gt;业务人员和开发人员必须相互合作, 项目的每一天都不例外&lt;/h2&gt;&lt;p&gt;为了能够以敏捷的方式进行项目的开发, 客户、 开发人员以及涉众之间就必须要进行有意义的频繁的交互&lt;/p&gt;&lt;h2 id=&#34;激发个体的斗志-以他们为核心搭建项目-提供所需的环境和支持并且信任他们能够完成工作&#34;&gt;激发个体的斗志, 以他们为核心搭建项目. 提供所需的环境和支持，并且信任他们能够完成工作&lt;/h2&gt;&lt;p&gt;敏捷项目中, 人被认为是项目取得成功的最重要的因素. 所有其他因素—过程、环境、管理等等—都被认为是次要的, 并且当它们对于人有负面的影响时, 就要对它们进行改变. 例如如果办公环境对阮对的工作造成阻碍, 就必须对办公环境进行改变; 如果某些过程步骤对团队的工作造成阻碍, 就必须对那些过程和步骤进行改变.&lt;/p&gt;&lt;h2 id=&#34;不论团队内外-最有效果并且富有效率的传递信息的方法-就是面对面交谈&#34;&gt;不论团队内外, 最有效果并且富有效率的传递信息的方法, 就是面对面交谈&lt;/h2&gt;&lt;p&gt;敏捷项目中, 人们之间相互沟通, 首要的方式就是交谈. 团队可能会编写文档, 但文档不是默认的沟通方式, 团队成员进党迫切需要并意义重大的情况下才去编写文档, 默认的沟通方式是交谈&lt;/p&gt;&lt;h2 id=&#34;可工作的软件是进度的首要度量标准&#34;&gt;可工作的软件是进度的首要度量标准&lt;/h2&gt;&lt;p&gt;敏捷项目通过度量当前软件满足客户需求的数量来度量开发进度.&lt;/p&gt;&lt;h2 id=&#34;敏捷过程倡导可持续的开发速度-责任人开发者和用户应该保持一个长期的-恒定的开发速度&#34;&gt;敏捷过程倡导可持续的开发速度. 责任人、开发者和用户应该保持一个长期的、 恒定的开发速度&lt;/h2&gt;&lt;p&gt;敏捷项目不是50m短跑, 而是马拉松长跑. 跑的过快会导致团队精力耗尽. 敏捷团队不允许自己过于疲惫, 不会借用明天的精力来在今天多完成一点工作. 他们工作在一个可以使在整个项目开发期间保持最高质量标准的速度上.&lt;/p&gt;&lt;h2 id=&#34;不断关注优秀的技能和好的设计会增强敏捷能力&#34;&gt;不断关注优秀的技能和好的设计会增强敏捷能力&lt;/h2&gt;&lt;p&gt;快速开发的关键是高的产品质量, 保持软件尽可能的简洁、健壮才能做到快速开发. 因此所有团队成员都致力于只编写他们能够编写的最高质量的代码. 他们不会编写混乱的代码然后告诉自己等有更多的实践再来清理他们.&lt;/p&gt;&lt;h2 id=&#34;以简洁为本是极力减少不必要工作量的艺术&#34;&gt;以简洁为本,是极力减少不必要工作量的艺术&lt;/h2&gt;&lt;p&gt;敏捷团队不会试图构建华而不实的系统, 他们更愿意采用和目标一致的最简单的方法. 他们不会看重明天会不会出现问题, 也不会在今天就对那些可能出现的问题进行防卫. 相反, 他们在今天以最高质量完成最简单的工作, 身心如果明天发生了问题, 也会很容易处理.&lt;/p&gt;&lt;h2 id=&#34;最好的架构-需求和设计出自于自组织的团队&#34;&gt;最好的架构、 需求和设计出自于自组织的团队&lt;/h2&gt;&lt;p&gt;敏捷团队是自组织的团队, 任务不是从外部分配给单个团队成员, 而是分配给整个团队, 然后再有团队来确定完成任务的最好方法. 敏捷团队的成员共同解决项目中所有的问题. 每一个成员都具有项目中所有方面的参与权利. 不存在单一的团队成员对系统的架构、需求或者测试负责的情况, 整个团队共同承担那些责任, 每一个团队成员都能够影响它们&lt;/p&gt;&lt;h2 id=&#34;团队定期的反思如何能提高成效-并以此调整自身的举止表现&#34;&gt;团队定期的反思如何能提高成效, 并以此调整自身的举止表现&lt;/h2&gt;&lt;p&gt;敏捷团队会不断的对团队的组织方式、规则、规范、关系等进行调整, 敏捷团队直到团队所处的环境在不断变化, 并且直到为了保持团队的敏捷性, 团队需要随着环境一起变化.&lt;/p&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&lt;p&gt;每一位软件开发人员、每一个开发团队的职业目标都是给客户交付最大可能的价值. 可是, 我们的项目以令人沮丧的速度失败, 或者未能交付任何价值. 虽然在项目中采用过程方法是出于好意, 但是膨胀的过程对与项目的失败或多或少的应该负一些责任. 敏捷软件开发的原则和价值观构成了一个可以帮助团队打破过程膨胀循环的方法, 这个方法关注的是可以达到团队目标的一些简单技术。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>敏捷软件开发宣言</title>
       <link>https://sunpe.github.io/posts/2020-11-20-manifesto-for-agile-software-development/</link>
       <pubDate>Fri, 20 Nov 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-11-20-manifesto-for-agile-software-development/</guid>
       <description>&lt;p&gt;由于看到众多团队陷入了不断增长的过程的泥潭，一批业界专家概括出了一些可以让软件开发团队具有快速工作、响应变化能力的价值观和原则，这些专家称自己为敏捷（Agile）联盟，并创造出了一份价值观声明，也就是敏捷联盟宣言。&lt;/p&gt;&lt;h2 id=&#34;个体和交互胜过过程和工具&#34;&gt;个体和交互胜过过程和工具&lt;/h2&gt;&lt;p&gt;人是获得成功的最主要因素。如果团队中没有优秀的成员，那么就是再好的过程也不能挽救失败的项目。但是不好的过程可以使优秀的团队成员失去作用。如果团队成员不能作为一个团队进行工作，那么即使拥有一批优秀的成员也一样会失败。&lt;/p&gt;&lt;p&gt;一个优秀的团队成员不一定要是一个一流的程序员，可以是一个平均水平的程序员，但是却能够很好的和他人合作。合作、 沟通以及交互能力要比单纯的编程能力更重要。&lt;/p&gt;&lt;p&gt;合适的工具非常重要，比如编译器、 IDE、 源码管理系统等。然而使用过多的庞大、笨重的工具和缺少工具一样，都是不好的。大而笨重的工具带来的障碍往往大于带来的帮助。从使用小工具开始，感觉工具不够用了再去寻找先进的、价格昂贵的工具。&lt;/p&gt;&lt;p&gt;团队的构建比环境构建要重要的多。许多管理者往往希望先构建环境，然后期望团队可以自动凝聚在一起， 然而往往事与愿违。应该首先致力于团队建设，然后再让团队基于需要来配置环境。&lt;/p&gt;&lt;h2 id=&#34;可以工作的软件胜过面面俱到的文档&#34;&gt;可以工作的软件胜过面面俱到的文档&lt;/h2&gt;&lt;p&gt;没有文档的软件是一种灾难，代码不是传达系统原理和结构的理想媒介，团队更需要编写易于阅读的文档，来描述系统以及其他设计决策的依据。&lt;/p&gt;&lt;p&gt;然而，过多的文档比过少的文档更糟糕。编制众多的文档需要花费大量时间，并且要使文档和代码保持同步就需要花费更多时间，如果代码和文档之间失去了同步，那么文档就失去了作用，甚至会造成误导。&lt;/p&gt;&lt;p&gt;对于团队来说，有必要编写并维护一份系统原理和结构方面的文档，文档应该是篇幅短小的并且主题突出的，应该仅论述系统的高层结构和概括的设计原理。&lt;/p&gt;&lt;p&gt;在给新的团队成员传授知识方面，最好的两份文档就是代码和团队。代码真实的表达了它所做的事情，是唯一没有二义性的信息源。在团队成员的大脑中，保存着市场变化的系统脉络图，人和人之间的交互是把这份脉络图传授给他人的最快、最有效的方式。&lt;/p&gt;&lt;p&gt;所以直到迫切需要并且意义重大时，才来编制文档。&lt;/p&gt;&lt;h2 id=&#34;客户合作胜过合同谈判&#34;&gt;客户合作胜过合同谈判&lt;/h2&gt;&lt;p&gt;告诉研发团队想要的东西，然后期望研发团队消失一段时间后就能够交付一个需要的系统，这对于公司的管理者来说是具有诱惑力的，然后这种模式终将导致低劣的质量和失败。成功的项目需要有序、频繁的客户反馈。&lt;/p&gt;&lt;p&gt;一个指明了需求、进度以及项目成本的合同存在根本上的缺陷，那些为研发团队和客户的协同工作方式提供指导的合同才是最好的合同。&lt;/p&gt;&lt;h2 id=&#34;响应变化胜过遵循计划&#34;&gt;响应变化胜过遵循计划&lt;/h2&gt;&lt;p&gt;响应变化的能力常常决定着一个软件的成败，当我们构建计划时，应当确保计划是灵活的，并且易于适应商务和技术方面的变化。&lt;/p&gt;&lt;p&gt;计划不能考虑的过远。首先，商务环境可能会变化，会引起需求的变动；其次，客户看到系统后，他们很可能会修改需求；最后，即使我们熟悉需求，并且确信他们不会改变，我们仍然不能很好的估算出开发他们需要的时间。&lt;/p&gt;&lt;p&gt;为未来两周做详细的计划，为未来三个月做粗略的计划，更远的时间就做更为粗糙的计划。我们应该清楚的知道未来两周要完成的任务，粗略的了解一下未来三个月的计划，至于半年后甚至更久远的时间，有一个模糊的想法就行了。由近及远逐渐降低细致程度，仅仅对于迫切的任务才耗费时间进行详细的计划，一旦制定了这个详细的计划，就尽量不要改变。计划仅仅支配了几周的时间，计划的其余部分仍然保持着灵活性。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>设计的臭味—软件腐化的气味</title>
       <link>https://sunpe.github.io/posts/2020-11-10-the-smell-of-software-corruption/</link>
       <pubDate>Tue, 10 Nov 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-11-10-the-smell-of-software-corruption/</guid>
       <description>&lt;p&gt;设计不是一组和代码分离的UML图, UML图也许描绘了设计的一部分, 但是它不是设计. 软件项目的设计是一个抽象的概念, 和程序的概括形状(shape)、结构、以及每一个模块、类和方法的详细形状和结构有关, 可以使用不同的媒介去描绘它, 但最终体现为源码, 最后, 源码就是设计.&lt;/p&gt;&lt;h2 id=&#34;设计的臭味软件腐化的气味&#34;&gt;设计的臭味—软件腐化的气味&lt;/h2&gt;&lt;p&gt;项目刚开始甚至首次发布时, 系统设计是清晰的, 随着时间流失, 丑陋的设计和弊病在代码中积累, 使其越来越难以维护, 最后仅仅是最简单的更改也要花费巨大的代价, 以至于开发人员和一线管理人员强烈要求重新设计. 这样的设计很少会成功, 老系统不断发展和变化, 新的设计必须跟上这些变化, 所以新系统第一次发布就积累了很多瑕疵和弊病.&lt;/p&gt;&lt;p&gt;当软件出现下面任何一种坏味道时, 就表明软件正在腐化.&lt;/p&gt;&lt;h3 id=&#34;1-僵化性&#34;&gt;1. 僵化性&lt;/h3&gt;&lt;p&gt;很难对软件进行改动, 即便是简单的改动. 如果单一的改动会导致有依赖关系的模块中的连锁改动, 那么这样的设计就是僵化的, 要改动的模块越多, 设计就越僵化&lt;/p&gt;&lt;h3 id=&#34;2-脆弱性&#34;&gt;2. 脆弱性&lt;/h3&gt;&lt;p&gt;对系统进行改动时, 会导致系统中和改动地方在概念上无关的许多地方出现问题, 要修正这些问题又会引入更多的问题. 随着脆弱性的增加, 改动会越容易引出意想不到的问题. 开发人员知道需要对它们进行重新设计, 但是越修正, 就变得越糟.&lt;/p&gt;&lt;h3 id=&#34;3-牢固性&#34;&gt;3. 牢固性&lt;/h3&gt;&lt;p&gt;设计中包含了对其他系统有用的部分, 但是很难解开系统间的纠结, 要把这部分从系统中分离出来需要的努力和风险都是巨大的.&lt;/p&gt;&lt;h3 id=&#34;4-粘滞性&#34;&gt;4. 粘滞性&lt;/h3&gt;&lt;p&gt;粘滞性有两种表现: 软件的粘滞性和环境的粘滞性&lt;/p&gt;&lt;p&gt;进行系统改动时, 开发人员会有多种改动方式, 其中一些会保持设计, 另外一些会破坏设计. 当那些可以保持系统设计的方法比那些破坏系统设计的方法更难应用时, 就表明系统具有高的粘滞性. 做错误的事情很容易, 而做正确的事情很难. 我们系统在软件设计中可以容易的进行那些保持设计的改动.&lt;/p&gt;&lt;p&gt;当开发环境迟钝、低效时, 就会产生环境粘滞性. 例如, 如果编译花费时间很长, 那么开发人员就会被引诱去做不会导致大规模重新编译的改动, 即使那些改动不再保持设计; 如果源码控制系统check in很困难, 那么开发人员就会被引诱去做那些需要尽可能少check in的改动, 而不管改动是否会保持设计.&lt;/p&gt;&lt;p&gt;无论项目具有哪种粘滞性, 都很难保持项目中的软件设计. 我们希望创建易于保持设计的系统和项目环境.&lt;/p&gt;&lt;h3 id=&#34;5-不必要的复杂性&#34;&gt;5. 不必要的复杂性&lt;/h3&gt;&lt;p&gt;如果设计中包含当前没用的组成部分, 就含有了不必要的复杂性. 开发人员常常预测需求的变化, 并在软件中放置了处理那些潜在变化的代码. 起初, 看起来像是一件好事, 但过多的可能性准备导致设计中包含绝不会用到的结构, 从而变得混乱. 一些准备可能会带来回报, 但更多的不会有作用. 设计背负这这些不会用到的部分, 是软件变的复杂, 并难以理解&lt;/p&gt;&lt;h3 id=&#34;6-不必要的重复性&#34;&gt;6. 不必要的重复性&lt;/h3&gt;&lt;p&gt;复制和粘贴操作常常会导致重复的代码片段, 当同样的代码以稍微不同的形式重复出现时, 就表示开发人员忽略了抽象. 发现所有的重复并通过适当的抽象去消除重复, 会使系统的更加易于理解和维护. 当系统有重复的代码时, 对系统进行改动会变得困难, 在一个重复的代码体中发现的错误总是需要在每个重复体中一一修正, 由于每个重复体之间都有细微的区别, 所以修正的方式也不尽相同.&lt;/p&gt;&lt;h3 id=&#34;7-晦涩性&#34;&gt;7. 晦涩性&lt;/h3&gt;&lt;p&gt;晦涩性是指模块难以理解。代码可以是清晰、富有表现力的，也可以是晦涩的费解的，代码随着时间往往会变得越来越晦涩，为了是代码晦涩性保持最低，就需要持续的保持代码清晰并富有表现力。开发者最初编写模块时，可能会很熟悉代码，随着时间推移，熟悉减退，再看这个模块，同样会觉得代码很糟糕，为了避免这种情况，开发者需要站在代码阅读者的角度，对他们代码进行重构，这样代码阅读者就可以理解代码。&lt;/p&gt;&lt;h2 id=&#34;敏捷团队不允许软件腐化&#34;&gt;敏捷团队不允许软件腐化&lt;/h2&gt;&lt;p&gt;在非敏捷环境中，需求没有按照初始设计和计划的方式进行变化，从而导致了设计的退化。通常改动痘痕急迫，并且进行改动的开发人员对于原始设计思路可能并不熟悉，因而虽然改动可以工作，但是却以某种方式违反了原始的设计。随着改动的不断进行，这些违反设计的行为不断积累，设计开始出现臭味。&lt;/p&gt;&lt;p&gt;敏捷团队依靠变化来获取活力，团队几乎不进行预先设计，因此不需要一个成熟的设计。他们更愿意保持系统尽可能干净、简单，并使用许多单元测试和验收测试，保持了设计的灵活性和可理解性。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>缓存常见问题</title>
       <link>https://sunpe.github.io/posts/2020-10-30-use-case-of-cache/</link>
       <pubDate>Fri, 30 Oct 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-10-30-use-case-of-cache/</guid>
       <description>&lt;p&gt;Redis 一个比较常见的场景就是作为应用的缓存，合理的利用缓存可以提升系统性能，使用过程中比较常见的问题有：缓存穿透、 缓存雪崩、 热点key问题。&lt;/p&gt;&lt;h2 id=&#34;缓存击穿&#34;&gt;缓存击穿&lt;/h2&gt;&lt;p&gt;在做数据库缓存的使用场景中，我们通常会先从 Redis 中查询数据，如果在 Redis 中查询不到数据，则会查询数据库中的数据。如果查询的是不存在的数据，比如 id 是「-1」的用户，则会导致每次请求都会去数据库中查询，如果这种请求过多，会导致数据库压力过大，造成缓存击穿问题。&lt;/p&gt;&lt;p&gt;解决「缓存击穿」问题大致有三种方案，从业务角度解决、缓存空值和采用布隆过滤器。&lt;/p&gt;&lt;h3 id=&#34;从业务角度解决&#34;&gt;从业务角度解决&lt;/h3&gt;&lt;p&gt;可以判断查询的数据是否符合规范，比如小于 0 的 ID 可以不进行查询。查询前先校验要查询的 ID 是否是符合规范的 ID。&lt;/p&gt;&lt;h3 id=&#34;缓存空值&#34;&gt;缓存空值&lt;/h3&gt;&lt;p&gt;查询数据库之后，对于数据库中不存在的数据我们可以把 Redis 中对应的 key 设置为一个空值，这样再次收到相同的请求就可以命中缓存了。需要注意的是如果对应的 key 设置了新的有效的值，则需要将缓存中的数据删掉。这种方案有一个问题是，如果攻击者采用不同的伪造请求进行攻击时，可能会导致缓存空间暴涨，进而影响了正常的数据查询。&lt;/p&gt;&lt;h3 id=&#34;采用布隆过滤器&#34;&gt;采用布隆过滤器&lt;/h3&gt;&lt;p&gt;布隆过滤器（Bloom Filter）实际上是一个很长的二进制向量和一些列映射函数，可以检测一个元素是否在一个集合中。优点是空间利用率和查询效率都比较高；缺点是有一定的误识别率和删除困难。在4.0以上版本 Redis 中可以通过 module 加载 RedisBloom 来实现布隆过滤器。&lt;/p&gt;&lt;h2 id=&#34;缓存雪崩&#34;&gt;缓存雪崩&lt;/h2&gt;&lt;p&gt;我们使用 Redis 通常会设置 key 的过期时间，如果大量的 key 设置了相同的过期时间，可能会导致同一时间大量key失效，导致大量请求到了数据库，造成数据库瞬时压力过大，造成缓存雪崩的问题。另外缓存故障也可能导致缓存雪崩问题，比如Redis不可用等。&lt;/p&gt;&lt;h3 id=&#34;解决方案&#34;&gt;解决方案&lt;/h3&gt;&lt;p&gt;缓存失效导致的缓存雪崩问题可以通过设置不同的过期时间的方式来解决。比如设置缓存 key 的过期时间可以采用「固定的时间」加随机数的方式。另外应当使用集群模式，比如 Redis Sentinel 和  Redis Cluster ，避免单点问题。&lt;/p&gt;&lt;h2 id=&#34;热点key&#34;&gt;热点key&lt;/h2&gt;&lt;p&gt;某些场景，比如秒杀、 微博大V、 热点新闻等，会导致缓存中某个key访问量特别大，极端情况可能会超出单台 server 的承载能力。&lt;/p&gt;&lt;h3 id=&#34;服务端缓存&#34;&gt;服务端缓存&lt;/h3&gt;&lt;p&gt;对于读多写少的场景，可以将热点数据缓存到服务端本地，可以减少对后端缓存或数据库的压力。本地缓存可以使用 Map 数据结构，或者使用成熟的开源方案，比如 Guava 中的 &lt;code&gt;LocalCache&lt;/code&gt;，&lt;code&gt;LocalCache&lt;/code&gt; 自带key过期功能，使用也比较方便。&lt;/p&gt;&lt;p&gt;本地缓存方案简单，可以明显提升系统系能，但也可能带来「脏数据」问题，比如数据库和全局缓存中某条数据更新或删除，本地缓存更新不及时，依旧返回的是旧数据。可以搭配「定时轮询」或「发布-订阅」的方式来解决本地缓存更新不及时的问题。本地server可以定期轮询缓存和数据库中相应key的数据，来更新本地缓存；或者当数据变更时通过消息队列「广播」或者 zk 来通知所有 server 更新数据。&lt;/p&gt;&lt;h3 id=&#34;拆分key&#34;&gt;拆分key&lt;/h3&gt;&lt;p&gt;在 Redis 集群中，key 按一定的分片算法分布在不同的分片上，我们可以将热点的 key 拆分成多个 key，比如将 key 加上后缀或前缀，以让key分布在不同的分片，来分担单个分片的压力。热点 key 按「读多写少」或「写多读少」可以分为「读热点key」和「写热点key」。对于读取热点 key，更新时需要更新所有 key 的数据，通过放大写入的方式来提高读取性能；对于写热点key，更新时选择其中一个key做更新，读取时需要合并所有key，采用读放大的方式来提高写入性能。&lt;/p&gt;&lt;h2 id=&#34;热点key发现&#34;&gt;热点key发现&lt;/h2&gt;&lt;h3 id=&#34;人工判断&#34;&gt;人工判断&lt;/h3&gt;&lt;p&gt;某些特定的场景可以预测出可能存在的热点 key，比如秒杀的产品或者大V等等，可以提前在系统中提前配置热点 key，通过配置中心或队列下发到服务端。&lt;/p&gt;&lt;h3 id=&#34;自动发现热key&#34;&gt;自动发现热key&lt;/h3&gt;&lt;p&gt;可以通过监控打点来检测热点 key，当 key 的访问频率达到某个阈值后，将其标记为热点 key，通过配置中心或队列下发到服务端。此外 Redis 4.0 新增了 allkey-lfu 和 volatile-lfu 两种数据过期策略，并且可以通过 OBJECT 命令获取某个 key 的访问频率，在客户端可以通过&lt;code&gt;--hotkeys&lt;/code&gt;快速找到热点 key, 使用方式 &lt;code&gt;redis-cli -h &amp;lt;host&amp;gt; -a &amp;lt;password&amp;gt; --hotkeys&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/use_case_of_cache/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;通常会采用人工配置和自动发现一起的方式来发现热点key，通过人工的方式提前配置已知的热key，并通过流式计算等方式自动发现潜在的热key。&lt;/p&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&lt;p&gt;应用缓存是提升系统性能的有效手段，由缓存引入的问题可以根据业务和现实情况不同，应该选择适合自己的方案来解决。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>开启goroutine前确保goroutine可以退出</title>
       <link>https://sunpe.github.io/posts/2020-10-17-make-sure-goroutine-willstop/</link>
       <pubDate>Sat, 17 Oct 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-10-17-make-sure-goroutine-willstop/</guid>
       <description>&lt;p&gt;golang 可以通过 goroutine 来实现高并发，并且创建 goroutine 的开销很小，可以很轻松的创建成千上万的 goroutine。但有个问题需要注意，在创建 goroutine 之前，必须要清楚创建的 goroutine 将如何退出，否则 goroutine 将常驻内存，可能会导致内存泄漏等问题。&lt;/p&gt;&lt;p&gt;程序 1 展示了因为 goroutine 导致内存泄漏的 demo。leak 函数中，创建一个channel，并启动一个goroutine 来消费这个channel。这个 goroutine 结束的唯一条件是关闭 ch。但是 leak 函数返回之后，ch 没有被关闭，这样 goroutine 会一直在内存中，随着 leak 函数调用次数的增多，占用内存也随着增长，最终导致内存泄漏。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leak&lt;/span&gt;() {    &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; { }    }()    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以在使用 go 关键词开启 goroutine 之前，必须要清楚 goroutine 的退出条件。&lt;/p&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://dave.cheney.net/2016/12/22/never-start-a-goroutine-without-knowing-how-it-will-stop&#34;&gt;https://dave.cheney.net/2016/12/22/never-start-a-goroutine-without-knowing-how-it-will-stop&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description>
     </item>
   
     <item>
       <title>热点账户处理</title>
       <link>https://sunpe.github.io/posts/2020-09-26-hot-account/</link>
       <pubDate>Sat, 26 Sep 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-09-26-hot-account/</guid>
       <description>&lt;p&gt;互联网交易中，当某一商家交易量大的时候，商家对应的账户更新的比较频繁，该商家对应的账户记录会变成热点行，该商家的账户就是热点账户。通常热点账户会导致各种系统问题，对数据库也会造成很大压力。&lt;/p&gt;&lt;h2 id=&#34;热点账户分类&#34;&gt;热点账户分类&lt;/h2&gt;&lt;p&gt;根据资金流动的方向可以把热点账户分为「加频账户」、「减频账户」和「双频账户」。 其中「加频账户」是指资金流入比较频繁的账户，比如商家的收款账户；「减频账户」是指资金流出比较频繁的账户，比如商家的退款账户；「双频账户」指流入和流出都比较频繁的账户，比如商家在电商平台开设的内部户。&lt;/p&gt;&lt;h2 id=&#34;热点账户识别&#34;&gt;热点账户识别&lt;/h2&gt;&lt;p&gt;在交易系统中可以通过提前配置、 实时统计和同步的方式来识别热点账户。历史的热点账户可以提前配置到系统中，在交易过程中可以利用流式计算的思路实时统计账户请求量，当请求量达到阈值将账户信息同步到系统的热点账户名单中。系统整体架构如图 1 所示。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/hot_account/1.png&#34; alt=&#34;&#34;&gt;图 1&lt;/p&gt;&lt;h2 id=&#34;热点账户问题解决方案&#34;&gt;热点账户问题解决方案&lt;/h2&gt;&lt;h3 id=&#34;1-限流&#34;&gt;1. 限流&lt;/h3&gt;&lt;p&gt;热点账户问题的根源是大量请求并发竞争账户的操作权，账户的操作权是稀缺资源，所以我们可以减少单位时间内对账户的操作次数，所以「限流」通常是最直接有效的解决方式。限流简单来说就是超出我能力范围的不处理。如图 2 所示。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/hot_account/2.png&#34; alt=&#34;&#34;&gt;图 2&lt;/p&gt;&lt;p&gt;虽然限流能明显减少对账户的操作，但限流是通过拒绝交易来达到目的，通常会影响客户体验，这种方式通常作为系统保障的兜底措施。&lt;/p&gt;&lt;h3 id=&#34;2-缓冲&#34;&gt;2. 缓冲&lt;/h3&gt;&lt;p&gt;缓冲的方式就是同步转异步来处理交易请求。互联网交易热点通常具有瞬时性，可以先把请求接下来，比如缓冲到消息队列中，并将结果返回给调用方。然后在从消息队列中取出交易数据进行处理，借助消息队列的「削峰填谷」的特性来消除瞬时的热点。如图 3 所示。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/hot_account/3.png&#34; alt=&#34;&#34;&gt;图 3&lt;/p&gt;&lt;p&gt;但缓冲的方式可能会导致请求大量积压，如果积压的量超过日处理能力的上限，可能会导致循环积压的问题。由于缓冲队列消费不及时可能会导致账户金额更新不及时，这种情况下可以采用全局缓存来缓存账户信息，将数据放到缓冲队列前，先更新缓存中账户数据。这种方式比较适合处理瞬时的热点数据。&lt;/p&gt;&lt;h3 id=&#34;3-合并请求数据&#34;&gt;3. 合并请求数据&lt;/h3&gt;&lt;p&gt;我们还可以合并用户的请求的方式来削减单位时间内对账户的操作次数。先将明细数据保存下来，然后使用单独的 worker 来汇总明细数据，并更新账户数据。如图 4 所示。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/hot_account/4.png&#34; alt=&#34;&#34;&gt;图 4&lt;/p&gt;&lt;p&gt;这种方式也会造成账户数据更新上的延迟，同样可以采用全局缓存的方式来缓存账户信息，保存明细数据的同时更新缓存中的账户信息。&lt;/p&gt;&lt;h3 id=&#34;4-分治&#34;&gt;4. 分治&lt;/h3&gt;&lt;p&gt;账户的操作权是稀缺资源，除了减少账户操作次数这一思路之外，我们还可以利用分治的思想，给主账户创建多个影子账户，将主账户的资金分散到影子账户中，通过一定的路由规则，将交易请求发送到不同的影子账户上。如图 5 所示。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/hot_account/5.png&#34; alt=&#34;&#34;&gt;图 5&lt;/p&gt;&lt;p&gt;这种方式带来的问题是，如何来平衡影子账户的资金和如果账户资金不足要扣减多个账户的时候怎么处理。&lt;/p&gt;&lt;h3 id=&#34;缓存&#34;&gt;缓存&lt;/h3&gt;&lt;p&gt;缓存是高并发系统的又一大利器，在以上方案中也有缓存的应用，总体思路是将账户数据同步到缓存中，缓存数据异步刷新到数据库中。这种方式需要考虑缓存和数据库数据一致性的问题，如果发生数据不一致的情况，可能需要根据明细数据进行对账操作。&lt;/p&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&lt;p&gt;处理热点账户的问题需要根据具体业务和应用场景来具体处理，选择合适的解决方案，最重要的是需要保证账户数据的一致性。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>golang 语言机制之内存剖析</title>
       <link>https://sunpe.github.io/posts/2020-09-04-golang-memory-analyst/</link>
       <pubDate>Fri, 04 Sep 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-09-04-golang-memory-analyst/</guid>
       <description>&lt;p&gt;《&lt;a href=&#34;https://sunpe.github.io/posts/golang-escape/&#34;&gt;Golang 语言机制之逃逸分析&lt;/a&gt;》中介绍了编译器逃逸分析的基础知识，除了共享变量这种情况之外，还有其他情况也会导致变量逃逸。&lt;/p&gt;&lt;h2 id=&#34;示例代码&#34;&gt;示例代码&lt;/h2&gt;&lt;p&gt;示例代码是读取byte数组，找到 &lt;code&gt;elvis&lt;/code&gt; 字符串并替换成 &lt;code&gt;Elvis&lt;/code&gt;。示例代码在 &lt;a href=&#34;https://play.golang.org/p/n_SzF4Cer4&#34;&gt;https://play.golang.org/p/n_SzF4Cer4&lt;/a&gt;，benchmark 在 &lt;a href=&#34;https://play.golang.org/p/TnXrxJVfLV&#34;&gt;https://play.golang.org/p/TnXrxJVfLV&lt;/a&gt;。示例代码中有两个函数实现这个功能，这篇文章只关注其中的 &lt;code&gt;algOne&lt;/code&gt; 函数。&lt;/p&gt;&lt;p&gt;以下是入参和期望 &lt;code&gt;algOne&lt;/code&gt; 函数输出的结果。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Input:abcelvisaElvisabcelviseelvisaelvisaabeeeelvise l v i saa bb e l v i saa elviselvielviselvielvielviselvi1elvielviselvisOutput:abcElvisaElvisabcElviseElvisaElvisaabeeeElvise l v i saa bb e l v i saa elviselviElviselvielviElviselvi1elviElvisElvis&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;程序 1 是 &lt;code&gt;algOne&lt;/code&gt; 函数代码。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;algOne&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;repl&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;) { &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Use a bytes Buffer to provide a stream to process.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewBuffer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// The number of bytes we are looking for.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Declare the buffers we need to process the stream.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Read in an initial number of bytes we need to get started.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFull&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;]); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;]) &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;     } &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Read in one byte from the input stream.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFull&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;:]); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;// Flush the reset of the bytes we have.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;])&lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;         }&lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// If we have a match, replace the bytes.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Compare&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;repl&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;// Read a new initial number of bytes.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFull&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;]); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;])&lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;             }&lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;         }&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Write the front byte since it has been compared.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WriteByte&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Slice that front byte out.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;         copy(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])&lt;span style=&#34;color:#ae81ff&#34;&gt;126&lt;/span&gt;     }&lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们通过 benchmark 来了解 &lt;code&gt;algOne&lt;/code&gt; 函数的性能表现和对堆的压力。&lt;/p&gt;&lt;h2 id=&#34;benchmarking&#34;&gt;Benchmarking&lt;/h2&gt;&lt;p&gt;程序2是 &lt;code&gt;algOne&lt;/code&gt; 函数的 benchmark 代码。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BenchmarkAlgorithmOne&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;) {    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;assembleInputStream&lt;/span&gt;()    &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;elvis&amp;#34;&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;repl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Elvis&amp;#34;&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResetTimer&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;N&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Reset&lt;/span&gt;()        &lt;span style=&#34;color:#a6e22e&#34;&gt;algOne&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;repl&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;)    }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们通过 &lt;code&gt;go test -run none -bench AlgorithmOne -benchtime 3s -benchmem&lt;/code&gt; 运行 benchmark，输出如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$go test -run none -bench AlgorithmOne -benchtime 3s -benchmemBenchmarkAlgorithmOne-8   2000000     2522 ns/op    117 B/op     2 allocs/op&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以看到 &lt;code&gt;algOne&lt;/code&gt; 函数有两次内存分配，每次分配了 117 个字节。我们通过 profiling 数据来看一下哪行代码造成了内存分配。&lt;/p&gt;&lt;h2 id=&#34;profiling&#34;&gt;Profiling&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;go test&lt;/code&gt; 后加上 &lt;code&gt;memprofile&lt;/code&gt; 参数，重新执行测试。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ go test -run none -bench AlgorithmOne -benchtime 3s -benchmem -memprofile mem.outBenchmarkAlgorithmOne-8    2000000    2570 ns/op    117 B/op         2 allocs/op&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;benchmark 执行结束后，会生成两个新文件。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;~/code/go/src/.../memcpu$ ls -ltotal 9248-rw-r--r--  1 bill  staff      209 May 22 18:11 mem.out       (NEW)-rwxr-xr-x  1 bill  staff  2847600 May 22 18:10 memcpu.test   (NEW)-rw-r--r--  1 bill  staff     4761 May 22 18:01 stream.go-rw-r--r--  1 bill  staff      880 May 22 14:49 stream_test.go&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;源码在 memcpu 目录中，&lt;code&gt;algOne&lt;/code&gt; 函数在 stream.go 文件中，benchmark 测试在 stream_test.go 文件中。mem.out 和 memcpu.test 是新生成的文件，内容是profile数据，有了这俩文件，就可以使用 &lt;code&gt;pprof&lt;/code&gt; 工具进行分析了&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pprof&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;alloc_space&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;memcpu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Entering&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;interactive&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mode&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;commands&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;pprof&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我们使用 &lt;code&gt;-alloc_space&lt;/code&gt; 来分析内存分配。我们使用 &lt;code&gt;list algOne&lt;/code&gt; 命令查看 &lt;code&gt;algOne&lt;/code&gt; 函数的内存分配。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pprof&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;algOne&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Total&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;335.03&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MB&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ROUTINE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;========================&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.../&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;memcpu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;algOne&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/.../&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;memcpu&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;335.03&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MB&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;335.03&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MB&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;flat&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cum&lt;/span&gt;)   &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Total&lt;/span&gt;        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;:        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;:&lt;span style=&#34;color:#75715e&#34;&gt;// algOne is one way to solve the problem.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;algOne&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;repl&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;) {        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;:        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;// Use a bytes Buffer to provide a stream to process.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;318.53&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MB&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;318.53&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MB&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewBuffer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;)        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;:        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;// The number of bytes we are looking for.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;)        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;:        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;// Declare the buffers we need to process the stream.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16.50&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MB&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;16.50&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MB&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;)        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;:        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;// Read in an initial number of bytes we need to get started.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFull&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;]); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; {        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;:       &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;])(&lt;span style=&#34;color:#a6e22e&#34;&gt;pprof&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分析信息展示了 &lt;code&gt;input&lt;/code&gt; 变量和 &lt;code&gt;buf&lt;/code&gt; slice在堆上创建。&lt;/p&gt;&lt;p&gt;&lt;code&gt;input&lt;/code&gt; 变量是指针，即 &lt;code&gt;input&lt;/code&gt; 指向的 &lt;code&gt;bytes.Buffer&lt;/code&gt; 值分配在堆上。flat列（pprof输出的第一列）展示由于 &lt;code&gt;algOne&lt;/code&gt; 函数共享导致变量逃逸，而 &lt;code&gt;algOne&lt;/code&gt; 函数在 benchmark 中调用，我们用 &lt;code&gt;list  Benchmark&lt;/code&gt; 函数看一下 Benchmark 的内存分配。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pprof&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Benchmark&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Total&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;335.03&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MB&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ROUTINE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;========================&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.../&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;memcpu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BenchmarkAlgorithmOne&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/.../&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;memcpu&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream_test&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;335.03&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MB&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;flat&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cum&lt;/span&gt;)   &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Total&lt;/span&gt;        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;elvis&amp;#34;&lt;/span&gt;)        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;repl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Elvis&amp;#34;&lt;/span&gt;)        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;:        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResetTimer&lt;/span&gt;()        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;:        .   &lt;span style=&#34;color:#ae81ff&#34;&gt;335.03&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MB&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;N&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;:       &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Reset&lt;/span&gt;()        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;:       &lt;span style=&#34;color:#a6e22e&#34;&gt;algOne&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;repl&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;)        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;: }        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;:}        .          .     &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;:(&lt;span style=&#34;color:#a6e22e&#34;&gt;pprof&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;cum列（pprof信息的第二列）只有一个值，所以 Benchmark 函数没有直接进行内存分配，内存分配全部发生在for循环中。pprof 工具只能分析出有变量逃逸，我们需要通过 &lt;code&gt;go build gcflags &amp;quot;-m -m&amp;quot;&lt;/code&gt; 命令来看一下 &lt;code&gt;bytes.Buffer&lt;/code&gt; 的值为什么会发生逃逸。&lt;/p&gt;&lt;h2 id=&#34;编译器报告compiler-reporting&#34;&gt;编译器报告（Compiler Reporting）&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gcflags&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-m -m&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;go build&lt;/code&gt; 输出信息很多，由于是在第83行创建的 &lt;code&gt;bytes.buffer&lt;/code&gt; 值，所以我们只关注 &lt;code&gt;stream.go:83。&lt;/code&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;inlining&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewBuffer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;literal&lt;/span&gt; }.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;literal&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escapes&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heap&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;r0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;assign&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pair&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; .&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;assigned&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; .&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;converted&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; .&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;passed&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;argument&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escapes&lt;/span&gt;]) &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; .&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从第一行信息可以看出来，&lt;code&gt;bytes.Buffer&lt;/code&gt; 值一开始并没逃逸，&lt;code&gt;bytes.NewBuffer&lt;/code&gt; 函数返回 &lt;code&gt;bytes.Buffer&lt;/code&gt; 值的地址，接下来的5行信息展示了第93行导致 &lt;code&gt;bytes.Buffer&lt;/code&gt; 值从&lt;code&gt;algOne&lt;/code&gt; 栈逃逸，&lt;code&gt;input&lt;/code&gt; 变量被赋值给一个接口变量。&lt;/p&gt;&lt;h2 id=&#34;接口interface&#34;&gt;接口（interface）&lt;/h2&gt;&lt;p&gt;&lt;code&gt;algOne&lt;/code&gt; 函数的第 93 行代码调用 &lt;code&gt;io.ReadFull&lt;/code&gt; 函数造成了接口赋值。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reader&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {      &lt;span style=&#34;color:#a6e22e&#34;&gt;Read&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFull&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reader&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ReadAtLeast&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;))}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过 &lt;code&gt;ReadFull&lt;/code&gt; 函数代码我们发现，&lt;code&gt;bytes.Buffer&lt;/code&gt; 的指针变量赋值给了 Reader 接口。现在我们知道了使用接口变量的开销：分配和重定向。所以如果没有必须的使用接口变量的原因，可以不使用接口变量。&lt;/p&gt;&lt;p&gt;修改直&lt;code&gt;algOne&lt;/code&gt; 函数，接用 &lt;code&gt;io&lt;/code&gt; 包的 &lt;code&gt;Read&lt;/code&gt; 函数来代替 &lt;code&gt;ReadFull&lt;/code&gt; 函数。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;algOne&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;repl&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;) {    &lt;span style=&#34;color:#75715e&#34;&gt;// Use a bytes Buffer to provide a stream to process.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewBuffer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;// The number of bytes we are looking for.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;// Declare the buffers we need to process the stream.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Read in an initial number of bytes we need to get started.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Read&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;]); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;])        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {        &lt;span style=&#34;color:#75715e&#34;&gt;// Read in one byte from the input stream.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Read&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;:]); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {            &lt;span style=&#34;color:#75715e&#34;&gt;// Flush the reset of the bytes we have.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;])            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;        }        &lt;span style=&#34;color:#75715e&#34;&gt;// If we have a match, replace the bytes.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Compare&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {            &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;repl&lt;/span&gt;)            &lt;span style=&#34;color:#75715e&#34;&gt;// Read a new initial number of bytes.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Read&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;]); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; {                &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;])                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;            }            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;        }        &lt;span style=&#34;color:#75715e&#34;&gt;// Write the front byte since it has been compared.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WriteByte&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])        &lt;span style=&#34;color:#75715e&#34;&gt;// Slice that front byte out.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        copy(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])    }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再次运行 benchmark，每次操作的内存分配次数变成了一次，&lt;code&gt;bytes.Buffer&lt;/code&gt; 变量不再逃逸了。性能提升了29%（从 2570 ns/op 到 1814 ns/op），&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;none&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bench&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AlgorithmOne&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;benchtime&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;benchmem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;memprofile&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BenchmarkAlgorithmOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;2000000&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;1814&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allocs&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们继续来看 &lt;code&gt;buf&lt;/code&gt; 变量。&lt;/p&gt;&lt;h2 id=&#34;栈帧stack-frames&#34;&gt;栈帧（Stack Frames）&lt;/h2&gt;&lt;p&gt;再次运行 &lt;code&gt;go build -gcflags &amp;quot;-m -m&amp;quot;&lt;/code&gt;，并关注 &lt;code&gt;stream.go:89&lt;/code&gt; 。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gcflags&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-m -m&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;: make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;escapes&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heap&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;too&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;large&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; .&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里说 slice 底层的数组对于栈来说太大了（too large for stack）。这个信息有些误导性，其实不是因为数组太大，而是因为编译器在编译阶段不知道数组的大小。&lt;/p&gt;&lt;p&gt;只有编译器在编译期间知道变量的大小的情况下，变量才会被分配在栈上，这是因为函数栈帧的大小是在编译阶段确定的，如果编译器在编译过程中不知道变量的大小，那么变量就会分配到堆上。&lt;/p&gt;&lt;p&gt;修改 89 行代码，将 &lt;code&gt;buf&lt;/code&gt; 变量的初始长度设置为 5，再次运行 benchmark。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;内存分配次数变成了 0 次。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;none&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bench&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AlgorithmOne&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;benchtime&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;benchmem&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BenchmarkAlgorithmOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3000000&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1720&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allocs&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再次运行 &lt;code&gt;go build -gcflags &amp;quot;-m -m&amp;quot;&lt;/code&gt; 会发现，所有变量都没逃逸。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gcflags&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-m -m&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;algOne&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;literal&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;does&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escape&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;algOne&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;does&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escape&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是除非能确认 slice 的长度，否则我们不能通过硬编码来指定 slice 的初始大小，所以这段代码 &lt;code&gt;algOne&lt;/code&gt; 函数可能需要一次内存分配。&lt;/p&gt;&lt;h2 id=&#34;内存分配和性能allocations-and-performance&#34;&gt;内存分配和性能（Allocations and Performance）&lt;/h2&gt;&lt;p&gt;比较一下每次优化过程中的新能提升：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Before&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;optimization&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BenchmarkAlgorithmOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2000000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;2570&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allocs&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Removing&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allocation&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BenchmarkAlgorithmOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2000000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;1814&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allocs&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Removing&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backing&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allocation&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BenchmarkAlgorithmOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3000000&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;1720&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allocs&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;优化掉 &lt;code&gt;bytes.Buffer&lt;/code&gt; 变量的内存分配之后，提升了大约 29% 的性能，所有内存分配都又划掉之后，提升了大约 33% 的性能。由此可见，内存分配是影响应用程序性能的因素之一。&lt;/p&gt;&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;&lt;p&gt;golang有一些很方便的工具来分析内存，基于这些工具，可以重构代码使得变量只分配在栈空间上，而不需要重新分配到堆上。写代码时不要把性能作为第一优先级，因为你并不想在代码序时一直猜测代码的性能，写正确的代码才是第一优先级。我们首先要关注的是完整性、可读性和简单性。有了可以运行的程序，再来确定程序性能是否满足要求。假如程序还不够快，可以使用golang提供的工具来查找和解决性能问题。&lt;/p&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2017/06/language-mechanics-on-memory-profiling.html&#34;&gt;https://www.ardanlabs.com/blog/2017/06/language-mechanics-on-memory-profiling.html&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description>
     </item>
   
     <item>
       <title>golang语言机制之逃逸分析</title>
       <link>https://sunpe.github.io/posts/2020-07-31-golang-escape/</link>
       <pubDate>Fri, 31 Jul 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-07-31-golang-escape/</guid>
       <description>&lt;p&gt;Golang 中逃逸是只栈空间的变量逃逸到了堆空间，逃逸分析是编译器通过静态代码分析决定程序中变量存储位置的过程。代码中没有任何的关键词或者函数可以决定变量放置在栈空间还是堆空间，只能让编译器通过代码来决定变量值的存储位置。&lt;/p&gt;&lt;h2 id=&#34;堆heaps&#34;&gt;堆（Heaps）&lt;/h2&gt;&lt;p&gt;堆是内存中除了栈之外用来存储变量值的区域，堆不能像栈一样自己释放空间，所以使用这块区域会比使用栈有更大的开销。其中开销主要用来进行垃圾回收（GC），当进行垃圾回收时，会消耗 25% 的 CPU，并且很可能会造成微秒级的「stop the world」延迟。而 GC 的好处是不需要再手动来分配和释放内存。Golang 中一部分变量值分配在堆上，而不在使用的变量值都需要清理掉，堆上的数据过多会给 GC 造成压力。&lt;/p&gt;&lt;h2 id=&#34;共享栈sharing-stacks&#34;&gt;共享栈（Sharing Stacks）&lt;/h2&gt;&lt;p&gt;Golang 不允许 goroutine 访问其他 goroutine 的栈空间，这是因为 goroutine 的栈空间增长或收缩时，栈空间会填充进新的内容。&lt;/p&gt;&lt;p&gt;程序1展示了栈被替换好几次的例子。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// All material is licensed under the Apache License Version 2.0, January 2004&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// http://www.apache.org/licenses/LICENSE-2.0&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Sample program to show how stacks grow/change.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Number of elements to grow each stack frame.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Run with 10 and then with 1024&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// main is the entry point for the application.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;stackCopy&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, [&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{})}&lt;span style=&#34;color:#75715e&#34;&gt;// stackCopy recursively runs increasing the size&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// of the stack.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stackCopy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {    println(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;stackCopy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果的第 2 和第 6 行，会看到 &lt;code&gt;main&lt;/code&gt; 函数栈的 &lt;code&gt;s&lt;/code&gt; 变量地址值改变了两次。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc00006ff68&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HELLO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc00006ff68&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HELLO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc00007ff68&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HELLO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc00007ff68&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HELLO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc00007ff68&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HELLO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc00007ff68&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HELLO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc00011ff68&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HELLO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc00011ff68&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HELLO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc00011ff68&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HELLO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc00011ff68&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HELLO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;逃逸机制escape-mechanics&#34;&gt;逃逸机制（Escape Mechanics）&lt;/h2&gt;&lt;p&gt;如果变量值需要在函数栈帧外访问，都会将该变量值重新分配到堆上，这就是逃逸分析算法要做的事情，确保对任何变量值的访问始终是准确、一致和高效的。&lt;/p&gt;&lt;p&gt;让我们通过程序 2 来了解逃逸分析。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {    &lt;span style=&#34;color:#a6e22e&#34;&gt;u1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserV1&lt;/span&gt;()    &lt;span style=&#34;color:#a6e22e&#34;&gt;u2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserV2&lt;/span&gt;()    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u2&lt;/span&gt;)}&lt;span style=&#34;color:#75715e&#34;&gt;//go:noinline&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserV1&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;{        &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bill&amp;#34;&lt;/span&gt;,        &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bill@ardanlabs.com&amp;#34;&lt;/span&gt;,    }    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;V1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;//go:noinline&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserV2&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;{        &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bill&amp;#34;&lt;/span&gt;,        &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bill@ardanlabs.com&amp;#34;&lt;/span&gt;,    }    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;V2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;程序 2 中使用了 &lt;code&gt;[//go:noinline](//go:noinline)&lt;/code&gt; 指令来阻止编译器使用内联代码优化，内联代码优化会将函数调用变成内联代码。程序 2 中有两个版本的 &lt;code&gt;createUserXX&lt;/code&gt; 函数，&lt;code&gt;createUserV1()&lt;/code&gt; 返回的是 &lt;code&gt;user&lt;/code&gt; 变量的副本。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserV1&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;{        &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bill&amp;#34;&lt;/span&gt;,        &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bill@ardanlabs.com&amp;#34;&lt;/span&gt;,    }    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;V1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;createUserV1()&lt;/code&gt; 函数返回之后，栈空间应该是图 1 这样的：&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_escape/1.png&#34; alt=&#34;&#34;&gt;图1&lt;/p&gt;&lt;p&gt;&lt;code&gt;createUserV2()&lt;/code&gt; 函数返回的是 user 变量的指针，所以调用方收到的是 user 变量地址的副本：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserV2&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;{        &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bill&amp;#34;&lt;/span&gt;,        &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bill@ardanlabs.com&amp;#34;&lt;/span&gt;,    }    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;V2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;按《&lt;a href=&#34;https://sunpe.github.io/posts/golang-stack-and-pointer/&#34;&gt;Golang 语言机制之栈与指针&lt;/a&gt;》一文，&lt;code&gt;createUserV2()&lt;/code&gt; 函数返回后栈空间应该如图 2 所示：&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_escape/2.png&#34; alt=&#34;&#34;&gt;图2&lt;/p&gt;&lt;p&gt;但是图 2 所示的栈空间有一个严重的问题，&lt;code&gt;main&lt;/code&gt; 函数栈帧 &lt;code&gt;u2&lt;/code&gt; 指向了无效的内存空间，这段地址空间在下一次函数调用时可能会被重新初始化。 这种情况下，编译器认为在 &lt;code&gt;createUserV2&lt;/code&gt; 函数栈帧中构造 &lt;code&gt;user&lt;/code&gt; 是不安全的，因此会改为在堆中构造 &lt;code&gt;user&lt;/code&gt;，在程序 2 的执行到第 28 行开始构造 user 时就会在堆上构造。&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://sunpe.github.io/posts/golang-stack-and-pointer/&#34;&gt;Golang 语言机制之栈与指针&lt;/a&gt;一文指出，函数只能直接访问自己栈帧内的内存空间，或通过指针间接访问栈帧外的内存空间，所以访问逃逸到堆上的变量值也需要通过指针来间接访问。所以执行完 &lt;code&gt;createUserV2&lt;/code&gt; 函数后栈空间应该开起来如图 3:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_escape/3.png&#34; alt=&#34;&#34;&gt;图3&lt;/p&gt;&lt;p&gt;&lt;code&gt;createUserV2&lt;/code&gt; 函数栈帧的变量 &lt;code&gt;u&lt;/code&gt; 的值存储在堆上而不是在栈上，所以访问变量 &lt;code&gt;u&lt;/code&gt; 的值也需要通过指针来间接访问。&lt;/p&gt;&lt;h2 id=&#34;可读性readability&#34;&gt;可读性（Readability）&lt;/h2&gt;&lt;p&gt;&lt;code&gt;createUserV2&lt;/code&gt; 函数先构建了 &lt;code&gt;user&lt;/code&gt; 变量，然后再通过 &lt;code&gt;&amp;amp;&lt;/code&gt; 操作获取变量地址并返回。如果直接构造成指针，如程序 3 所示。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserV2&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;{        &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bill&amp;#34;&lt;/span&gt;,        &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bill@ardanlabs.com&amp;#34;&lt;/span&gt;,    }    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;V2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们只关注 &lt;code&gt;return&lt;/code&gt;，程序 3 &lt;code&gt;return u&lt;/code&gt;  告诉我们要返回给调用者的是 &lt;code&gt;u&lt;/code&gt; 的副本，程序 2  &lt;code&gt;return &amp;amp;u&lt;/code&gt; 告诉我们返回给调用者的是 &lt;code&gt;u&lt;/code&gt; 的地址值，并且变量 &lt;code&gt;u&lt;/code&gt; 已经逃逸到堆上。所以，读代码时要记住，指针是为了共享变量，&lt;code&gt;&amp;amp;&lt;/code&gt; 操作符对应的单词是「sharing」，这样写有助于提高代码的可读性。&lt;/p&gt;&lt;p&gt;来看一下程序 4 的例子。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;([]byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二行的 &lt;code&gt;json.Unmarshal&lt;/code&gt; 第二个参数必须是指针类型，所以需要传递 &lt;code&gt;&amp;amp;u&lt;/code&gt; 作为参数。这段代码第一行创建了 user 的指针类型并初始化零值，第二行通过 &lt;code&gt;u&lt;/code&gt; 的地址调用 &lt;code&gt;json.Unmarshal&lt;/code&gt;，第三行和调用者共享 &lt;code&gt;u&lt;/code&gt; 的副本。&lt;/p&gt;&lt;p&gt;这段代码并不直观，可以稍作修改，得到程序5.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;([]byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;程序 5 的第一行创建了 user 变量并初始化零值，第二行通过 &lt;code&gt;u&lt;/code&gt; 的地址调用 &lt;code&gt;json.Unmarshal&lt;/code&gt;，第三行和调用者共享 &lt;code&gt;u&lt;/code&gt;，比程序 4 更直观，返回 &lt;code&gt;&amp;amp;u&lt;/code&gt; 说明 &lt;code&gt;u&lt;/code&gt; 会逃逸到堆上。&lt;/p&gt;&lt;p&gt;如果需要和调用者共享变量值时，在构造值的时候使用值语义，利用 &lt;code&gt;&amp;amp;&lt;/code&gt; 操作符的可读性来明确值是被共享的。&lt;/p&gt;&lt;h2 id=&#34;编译器日志compiler-reporting&#34;&gt;编译器日志（Compiler Reporting）&lt;/h2&gt;&lt;p&gt;在构建时，可以通过编译器日志（Compiler Reporting）来查看编译器的逃逸分析，在 &lt;code&gt;go build&lt;/code&gt; 指令后添加 &lt;code&gt;-gcflags&lt;/code&gt; 指令和 &lt;code&gt;-m&lt;/code&gt; 参数，就可以看到编译器日志：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gcflags&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-m -m&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;cannot&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserV1&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;marked&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;noinline&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;cannot&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserV2&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;marked&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;noinline&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;cannot&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;non&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leaf&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserV1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;does&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escape&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escapes&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heap&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;r0&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; .&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;moved&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heap&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserV2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;does&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escape&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;does&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escape&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u2&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;does&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escape&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上可以使用 4 个 &lt;code&gt;-m&lt;/code&gt;，但是超过 2 个控制台信息就很多，所以这里使用了 2 个 &lt;code&gt;-m&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;可以看到日志里有了逃逸分析的日志。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;createUserV1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;does&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escape&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过日志，我们可以知道程序 2 第 22 行调用 &lt;code&gt;println&lt;/code&gt; 函数时没有发生逃逸。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escapes&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heap&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;r0&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; .&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;moved&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heap&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这几行是说，第 31 行创建的 &lt;code&gt;u&lt;/code&gt; 变量，因为第 34 行的 return 语句发生了逃逸。&lt;/p&gt;&lt;h2 id=&#34;变量逃逸情况总结&#34;&gt;变量逃逸情况总结&lt;/h2&gt;&lt;p&gt;总的来说，如果出现了以下三种情况，则必然发生逃逸：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;函数中new或字面量创建出的变量，将其指针作为函数返回值，则该变量一定发生逃逸（构造函数返回的指针变量一定逃逸）&lt;/li&gt;&lt;li&gt;被已经逃逸的变量引用的指针，一定发生逃逸&lt;/li&gt;&lt;li&gt;被指针类型的slice、map和chan引用的指针，一定发生逃逸&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;而在以下两种情况下，则不会发生逃逸的情况：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;指针被未发生逃逸的变量引用&lt;/li&gt;&lt;li&gt;仅仅在函数内对变量做取址操作，而未将指针传出&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&lt;p&gt;变量是否逃逸是有变量的分享方式决定的，只有当一个变量被共享了（通过变量的地址的方式共享），变量才会逃逸到堆上。变量逃逸到堆上会增加 GC 的压力，而通过变量副本的方式需要存储和维护不同的副本，每种方式都有好处和开销，关键的时要正确、一致且平衡的使用每种语义。&lt;/p&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-escape-analysis.html&#34;&gt;https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-escape-analysis.html&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description>
     </item>
   
     <item>
       <title>golang语言机制之栈与指针</title>
       <link>https://sunpe.github.io/posts/2020-07-17-golang-stack-and-pointer/</link>
       <pubDate>Fri, 17 Jul 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-07-17-golang-stack-and-pointer/</guid>
       <description>&lt;p&gt;学习和使用 golang，就不得不了解 golang 的指针。如果不能很好的理解指针，很难写出简单、整洁并高效的代码。&lt;/p&gt;&lt;h2 id=&#34;帧边界frame-boundaries&#34;&gt;帧边界（Frame Boundaries）&lt;/h2&gt;&lt;p&gt;帧边界为函数执行提供了独有的内存空间、上下文（context）环境和一些流控制。函数可以通过帧边界指针直接访问帧边界的内存，或者间接访问帧边界外的内存（不能直接访问帧边界外的内存）。函数要间接访问帧边界外的内存，被访问的内存必须和函数共享。我们首先来了解一下帧边界建立的机制和限制。&lt;/p&gt;&lt;p&gt;函数调用时，会在两个相关的帧边界间进行切换，从调用函数切换到被调用函数，如果函数调用时需要传递参数，那么这些参数值也要传递到被调用函数的帧边界中。Go 语言中帧边界间的数据传递是按值（by value）传递的。&lt;/p&gt;&lt;p&gt;按值传递的好处是可读性好，函数调用时传入的值就是函数真正接收到的值。按值传递又叫做  WYSIWYG（what you see is what you get）。在发生切换时，我们可以很清楚的了解函数调用将如何影响程序执行。&lt;/p&gt;&lt;p&gt;程序 1 展示了函数调用按值传递。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 1 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {    &lt;span style=&#34;color:#75715e&#34;&gt;// Declare variable of type int with a value of 10.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Display the &amp;#34;value of&amp;#34; and &amp;#34;address of&amp;#34; count.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count:\tValue Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]\tAddr Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;// Pass the &amp;#34;value of&amp;#34; the count.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;)    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count:\tValue Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]\tAddr Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;)}&lt;span style=&#34;color:#75715e&#34;&gt;//go:noinline&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {    &lt;span style=&#34;color:#75715e&#34;&gt;// Increment the &amp;#34;value of&amp;#34; inc.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inc:\tValue Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]\tAddr Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;)}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;程序执行时，运行时（runtime）创建 main goroutine 来初始化代码。goroutine 最终在操作系统线程（os threads）上执行，从 golang 1.8 开始，每个 goroutine 的栈空间是 2048 字节连续的内存空间，栈空间大小未来可能还会变化。&lt;/p&gt;&lt;p&gt;栈空间为每个函数的帧边界提供了物理内存空间，main goroutine 执行程序1中的 &lt;code&gt;main()&lt;/code&gt; 方法时栈空间看起来应该是如图1这样的：&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_stack_and_pointer/1.png&#34; alt=&#34;&#34;&gt;图 1&lt;/p&gt;&lt;p&gt;如图 1 所示，栈空间已经划出了一块作为 main frame，这块区域叫「栈帧」，界定了 main 函数在栈上的边界。这块栈空间随着代码的执行而被创建，变量 &lt;code&gt;count&lt;/code&gt; 在这块栈空间的地址是 &lt;code&gt;0x10429fa4&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;图1还展示了一点，在活跃的栈帧外的内存空间是不可用的，可以内存空间和不可用内存空间的边界需要明确一下。&lt;/p&gt;&lt;h2 id=&#34;地址&#34;&gt;地址&lt;/h2&gt;&lt;p&gt;变量名表示一个内存地址，如果存在变量值那么内存中一定存在变量值，变量值一定会有内存地址。程序 1 的第 9 行打印出了 &lt;code&gt;count&lt;/code&gt; 变量的值和地址：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count:\tValue Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]\tAddr Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;golang 中使用 &lt;code&gt;&amp;amp;&lt;/code&gt; 操作符获取变量的内存地址，这一行代码的输出如下（每次运行变量的地址可能不一样）：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; ] &lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10429fa4&lt;/span&gt; ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;函数调用&#34;&gt;函数调用&lt;/h2&gt;&lt;p&gt;程序 1 的第 12 行调用了 &lt;code&gt;increment&lt;/code&gt; 函数。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;函数调用意味着需要在栈上开辟新的空间，除此之外，需要将参数跨越帧边界传到新的栈帧中。这里需要将 &lt;code&gt;count&lt;/code&gt; 变量传递给&lt;code&gt;increment&lt;/code&gt;函数。程序 1 的第 12 行调用 &lt;code&gt;increment&lt;/code&gt; 函数传递的是 &lt;code&gt;count&lt;/code&gt; 变量的值，会复制 count 变量的值并传递到 &lt;code&gt;increment&lt;/code&gt; 函数的栈帧。而 &lt;code&gt;increment&lt;/code&gt; 只能修改自己栈帧的 &lt;code&gt;count&lt;/code&gt; 变量的副本。调用 &lt;code&gt;increment&lt;/code&gt; 方法栈空间如图 2:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_stack_and_pointer/2.png&#34; alt=&#34;&#34;&gt;图2&lt;/p&gt;&lt;p&gt;现在栈空间有两个栈帧，&lt;code&gt;main&lt;/code&gt; 函数栈帧和 &lt;code&gt;increment&lt;/code&gt; 函数栈帧。在 &lt;code&gt;increment&lt;/code&gt; 函数栈帧，可以看到 &lt;code&gt;inc&lt;/code&gt; 变量，变量值是 10，地址是 &lt;code&gt;0x10429f98&lt;/code&gt;。因为栈是从上往下使用栈空间，所以 &lt;code&gt;inc&lt;/code&gt; 变量地址值比 &lt;code&gt;count&lt;/code&gt; 变量地址值小（这只是实现细节）。简单来说，goroutine 把函数 &lt;code&gt;main&lt;/code&gt; 栈帧中的 &lt;code&gt;count&lt;/code&gt; 变量的值拷贝并传递给了函数 &lt;code&gt;increment&lt;/code&gt; 栈帧中的 &lt;code&gt;inc&lt;/code&gt; 变量。&lt;/p&gt;&lt;p&gt;&lt;code&gt;increment&lt;/code&gt; 函数中将 inc 变量的值加 1 并打印：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inc:\tValue Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]\tAddr Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;程序 1 中第 22 行代码输出应该是：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; ]  &lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10429f98&lt;/span&gt; ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行完 &lt;code&gt;incr&lt;/code&gt; 变量自增后，栈空间变成图 3:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_stack_and_pointer/3.png&#34; alt=&#34;&#34;&gt;图3&lt;/p&gt;&lt;p&gt;程序 1 执行完第 21 和 22 行代码之后，&lt;code&gt;increment&lt;/code&gt; 函数返回，流程控制权又回到了 &lt;code&gt;main&lt;/code&gt; 函数，&lt;code&gt;main&lt;/code&gt; 函数执行第14行代码，打印 &lt;code&gt;count&lt;/code&gt; 变量的值和地址。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count:\tValue Of[&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]\tAddr Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;程序1的完整的输出如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; ]  &lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10429fa4&lt;/span&gt; ]&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; ]  &lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10429f98&lt;/span&gt; ]&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; ]  &lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10429fa4&lt;/span&gt; ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 函数栈帧中 &lt;code&gt;count&lt;/code&gt; 变量的值在调用 &lt;code&gt;increment&lt;/code&gt; 函数前后值没变。&lt;/p&gt;&lt;h2 id=&#34;函数返回&#34;&gt;函数返回&lt;/h2&gt;&lt;p&gt;被调用的函数返回并将控制权交还给调用函数时栈空间发生了什么？简单的回答是，什么也没发生。图 4 是 increment 函数返回后的栈空间：&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_stack_and_pointer/4.png&#34; alt=&#34;&#34;&gt;图4&lt;/p&gt;&lt;p&gt;图 4 所示栈空间看起来和图3相似，只是 &lt;code&gt;increment&lt;/code&gt; 栈空间现在变成了不可用内存，这是因为现在 &lt;code&gt;main&lt;/code&gt; 函数栈帧是活跃的栈帧。函数返回之后，没有立即清理函数的栈空间，因为不确定是否还需要使用这块内存空间，只有再次有函数被调用并且使用到了这块内存空间时，才会去清理。&lt;/p&gt;&lt;h2 id=&#34;值的共享&#34;&gt;值的共享&lt;/h2&gt;&lt;p&gt;如果想在 &lt;code&gt;increment&lt;/code&gt; 函数直接操作 &lt;code&gt;main&lt;/code&gt; 函数栈帧的 &lt;code&gt;count&lt;/code&gt; 变量要怎么办？这时候就需要用到指针。指针可以和函数共享变量，让函数可以直接读写这个共享变量的值，即使共享变量不在自己的栈帧内。&lt;/p&gt;&lt;p&gt;如果不需要共享变量，那么就不需要使用指针，使用指针是为了共享，并且当阅读代码时，也应该把 &lt;code&gt;&amp;amp;&lt;/code&gt; 操作符当做共享来看。&lt;/p&gt;&lt;h2 id=&#34;指针类型&#34;&gt;指针类型&lt;/h2&gt;&lt;p&gt;任何类型（无论是自定义的类型还是内置类型）都有一个与之对应的指针类型，用来共享数据。比如内置类型 &lt;code&gt;int&lt;/code&gt; 的指针类型是 &lt;code&gt;*int&lt;/code&gt;，自定义的 &lt;code&gt;User&lt;/code&gt; 类型的指针类型是 &lt;code&gt;*User&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;指针类型以 &lt;code&gt;*&lt;/code&gt; 开头，并且所有指针类型用相同的内存大小（4 个字节或 8 个字节）来表示内存地址。在 32 为系统（比如 playground），指针类型大小是 4 个字节，在 64 位系统中，指针类型大小是 8 个字节。&lt;/p&gt;&lt;p&gt;规范的说， 指针类型被认为是字面类型（type literals），也就是说指针类型是通过已有类型组合而成的。&lt;/p&gt;&lt;h2 id=&#34;直接内存访问&#34;&gt;直接内存访问&lt;/h2&gt;&lt;p&gt;程序 2 展示了以变量的地址作为参数来调用函数，在 main 函数栈和 increment 函数栈之间共享 count 变量&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {    &lt;span style=&#34;color:#75715e&#34;&gt;// Declare variable of type int with a value of 10.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Display the &amp;#34;value of&amp;#34; and &amp;#34;address of&amp;#34; count.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count:\tValue Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]\t\tAddr Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;// Pass the &amp;#34;address of&amp;#34; count.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;)    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count:\tValue Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]\t\tAddr Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;)}&lt;span style=&#34;color:#75715e&#34;&gt;//go:noinline&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {    &lt;span style=&#34;color:#75715e&#34;&gt;// Increment the &amp;#34;value of&amp;#34; count that the &amp;#34;pointer points to&amp;#34;. (dereferencing)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;    println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inc:\tValue Of[&amp;#34;&lt;/span&gt;,        &lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]\tAddr Of[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]\tValue Points To[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;)}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在程序 2 的第 12 行，调用 &lt;code&gt;increment&lt;/code&gt; 函数传递的参数是 &lt;code&gt;count&lt;/code&gt; 变量的地址而不是 &lt;code&gt;count&lt;/code&gt; 变量的副本，通过&amp;amp;操作符来获取了 &lt;code&gt;count&lt;/code&gt; 变量的地址。这里依然是「按值传递（pass by value）」，不同的是，传递的是地址的值而不是int类型变量的值。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 increment 函数中，需要能接受 int 类型地址参数的形式参数，所以程序 2 的第 18 行函数参数类型声明为 &lt;code&gt;*int&lt;/code&gt;：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用了 increment 函数之后，栈空间如图 5 所示：&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_stack_and_pointer/5.png&#34; alt=&#34;&#34;&gt;图 5&lt;/p&gt;&lt;p&gt;&lt;code&gt;increment&lt;/code&gt; 函数栈空间中的 &lt;code&gt;*int&lt;/code&gt; 类型的 &lt;code&gt;inc&lt;/code&gt; 变量指向了 main 函数栈空间中的 &lt;code&gt;count&lt;/code&gt; 变量。使用这个指针类型变量，&lt;code&gt;increment&lt;/code&gt; 函数可以间接读写 &lt;code&gt;main&lt;/code&gt; 函数空间的 &lt;code&gt;count&lt;/code&gt; 变量。&lt;/p&gt;&lt;p&gt;在程序 2 的 21 行，&lt;code&gt;*&lt;/code&gt; 符号和指针类型变量一起使用时，表示取指针变量指向的值的操作，在这里就是获取 main 函数中的 count 变量。指针类型变量允许在函数栈帧空间外间接读写指针变量指向的内存空间，我们把通过 &lt;code&gt;*&lt;/code&gt; 符号间接访问内存空间的方式叫指针的解引用。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当程序 2 执行到 21 行时，栈空间如图 6 所示：&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_stack_and_pointer/6.png&#34; alt=&#34;&#34;&gt;图 6&lt;/p&gt;&lt;p&gt;程序 2 的完整输出：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; ]          &lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10429fa4&lt;/span&gt; ]&lt;span style=&#34;color:#a6e22e&#34;&gt;inc&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10429fa4&lt;/span&gt; ]      &lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10429f98&lt;/span&gt; ]   &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Points&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;To&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; ]&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; ]          &lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Of&lt;/span&gt;[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10429fa4&lt;/span&gt; ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，inc 指针变量的值和 count 变量的地址值相同，通过指针类型可以间接的访问栈空间外的内存，increment 函数通过指针修改了 inc 指针变量指向的值（也就是 count 变量），当 main 函数重新获得控制权后，就可以读取到 count 变量的新值。&lt;/p&gt;&lt;h2 id=&#34;指针变量并不特别&#34;&gt;指针变量并不特别&lt;/h2&gt;&lt;p&gt;指针变量和其他变量一样，并不特别，同样需要内存空间，同样存储这值。除了指针类型指向的类型和指针类型大小相同外，唯一让我们感到疑惑的是 &lt;code&gt;*&lt;/code&gt; 字符，在函数 increment 中，&lt;code&gt;*&lt;/code&gt; 表示操作符，表示指针解引用，而在函数声明中用来声明指针类型变量。如果可以愤青指针类型声明和指针解引用操作，应该就没那么困惑了。&lt;/p&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&lt;p&gt;这篇文章描述了指针背后的目的以及 golang 中栈和指针机制的工作方式，这是理解 golang 语言机制、设计哲学的第一步，也有助于写出一致的、可读性好的代码。&lt;/p&gt;&lt;p&gt;从这篇文章我们学到了：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;帧边界为每个函数提供了独立的内存空间，函数在自己的帧边界内执行&lt;/li&gt;&lt;li&gt;如果函数被调用，会存在两个栈空间的转换&lt;/li&gt;&lt;li&gt;值传递（by value）的好处是可读性高&lt;/li&gt;&lt;li&gt;栈空间很重要，栈为帧边界提供物理空间&lt;/li&gt;&lt;li&gt;在活跃栈帧以下的栈空间是不可用的，只有活跃栈帧和它以上的栈空间可用&lt;/li&gt;&lt;li&gt;函数调用意味着 goroutine 需要在栈空间上开辟一块新的栈帧&lt;/li&gt;&lt;li&gt;在函数调用时，如果被分配的栈用到了栈空间，相应的栈空间才会被初始化&lt;/li&gt;&lt;li&gt;指针是用来共享变量的，以便于函数可以间接访问自己栈帧外的变量&lt;/li&gt;&lt;li&gt;所有类型都可以通过其指针类型来共享&lt;/li&gt;&lt;li&gt;指针类型变量允许间接访问函数栈帧外的内存空间&lt;/li&gt;&lt;li&gt;指针变量和其他变量一样，并不特别，占用内存空间，并且存放值&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html&#34;&gt;https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description>
     </item>
   
     <item>
       <title>理解Golang channel</title>
       <link>https://sunpe.github.io/posts/2020-07-03-golang-channel/</link>
       <pubDate>Fri, 03 Jul 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-07-03-golang-channel/</guid>
       <description>&lt;p&gt;channel 是 golang 的核心特性之一，提供了 goroutine 通信的机制，简化了并发模式。&lt;/p&gt;&lt;h2 id=&#34;csp&#34;&gt;CSP&lt;/h2&gt;&lt;p&gt;golang 通过 goroutine 和 channel 部分实现了 CSP（Communicating Sequential Process）。CSP 即通信顺序进程，是 Tony Hoare 于 1977 年提出的一种并发模型。CSP 模型由并发执行的实体（线程或者进程）所组成，实体之间通过发送消息进行通信，这里发送消息时使用的就是通道，或者叫 channel。CSP 模型的关键是关注 channel，而不关注发送消息的实体，golang 中 goroutine 对应 CSP 中并发执行的实体，channel 也就对应着 CSP 中的 channel。&lt;/p&gt;&lt;h2 id=&#34;channel基础&#34;&gt;channel基础&lt;/h2&gt;&lt;p&gt;channel 底层是 hchan 结构体，源码在 src/runtime/chan.go。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// total data in the queue&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// 队列大小, 值大于0表示有缓冲, 值等于0表示没有缓冲&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 缓冲队列buffer的指针&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;elemsize&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 单个元素大小&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 关闭标识符&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_type&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 元素类型&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sendx&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// 发送数据索引&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// 接收数据索引&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;recvq&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;waitq&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 等待接收数据的sudog(goroutine)链表&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sendq&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;waitq&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 等待发送数据的sudog(goroutine)链表&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// lock protects all fields in hchan, as well as several&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// fields in sudogs blocked on this channel.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Do not change another G&amp;#39;s status while holding this lock&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// (in particular, do not ready a G), as this can deadlock&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// with stack shrinking.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mutex&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sudog 表示在等待队列中的 goroutine。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {    &lt;span style=&#34;color:#75715e&#34;&gt;// The following fields are protected by the hchan.lock of the&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// channel this sudog is blocking on. shrinkstack depends on&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// this for sudogs involved in channel ops.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// isSelect indicates g is participating in a select, so&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// g.selectDone must be CAS&amp;#39;d to win the wake-up race.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;isSelect&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// data element (may point to stack)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// The following fields are never accessed concurrently.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// For channels, waitlink is only accessed by g.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// For semaphores, all fields (including the ones above)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// are only accessed when holding a semaRoot lock.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;acquiretime&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ticket&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// semaRoot binary tree&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;waitlink&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// g.waiting list or semaRoot&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;waittail&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// semaRoot&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// channel&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;创建channel&#34;&gt;创建channel&lt;/h2&gt;&lt;p&gt;通过内置的 make 函数可以创建带缓冲区或不带缓冲区的 channel：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Task&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 创建非缓冲channel&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Task&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 创建缓冲channel&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_channel/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;make 函数创建并实例化 hchan 结构体，并返回 hchan 的指针，所以我们可以直接将 channel 作为方法的参数。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_channel/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;创建 channel 的函数是 &lt;code&gt;func makechan(t *chantype, size int) *hchan&lt;/code&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makechan&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;chantype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 安全检测&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// compiler checks this but be safe.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makechan: invalid channel element type&amp;#34;&lt;/span&gt;)    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hchanSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;maxAlign&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;align&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxAlign&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makechan: bad alignment&amp;#34;&lt;/span&gt;)    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;mem&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;overflow&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MulUintptr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;, uintptr(&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;))    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;overflow&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mem&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxAlloc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchanSize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {        panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;plainError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makechan: size out of range&amp;#34;&lt;/span&gt;))    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:                &lt;span style=&#34;color:#75715e&#34;&gt;// 如果队列或元素大小是0，则不分配buffer&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Queue or element size is zero.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;mallocgc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hchanSize&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;))                &lt;span style=&#34;color:#75715e&#34;&gt;// 将buf指向自身，不分配缓存空间&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Race detector uses this location for synchronization.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;raceaddr&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptrdata&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:                &lt;span style=&#34;color:#75715e&#34;&gt;// 如果元素不包含指针，则分配一整块内存，用于hchan和buf&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Elements do not contain pointers.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Allocate hchan and buf in one call.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;mallocgc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hchanSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mem&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;))        &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;hchanSize&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:                &lt;span style=&#34;color:#75715e&#34;&gt;// 如果是指针类型，正常创建结构体，buf单独分配空间&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Elements contain pointers.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = new(&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;)        &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mallocgc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mem&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)    }        &lt;span style=&#34;color:#75715e&#34;&gt;// 设置channel的属性&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemsize&lt;/span&gt; = uint16(&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; = uint(&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;debugChan&lt;/span&gt; {        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makechan: chan=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;; elemsize=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                    dataqsiz=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用channel&#34;&gt;使用channel&lt;/h2&gt;&lt;h3 id=&#34;发送和接收数据过程&#34;&gt;发送和接收数据过程&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_channel/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;G1 是生产者，G2 是消费者，&lt;code&gt;ch&lt;/code&gt; 是容量为 3 的带缓冲 channel，初始的时候 &lt;code&gt;hchan&lt;/code&gt; 结构体的 buf 为空，&lt;code&gt;sendx&lt;/code&gt; 和 &lt;code&gt;recvx&lt;/code&gt; 都为0。G1 获取锁，并将 task 发送到 channel，并增加 sendx，发送到 channel 中的数据其实是task的副本。然后 G2 获取锁，并从 channel 中获取数据，并增加 recvx，取到的数据依旧是 task 的副本。channel 受互斥锁保护，传递副本可以保证数据的安全。&lt;/p&gt;&lt;p&gt;整个过程没有内存共享（shared memory），充分体现了 CSP 的 do not communicate by sharing memory; instead, share memory by communicating。&lt;/p&gt;&lt;h3 id=&#34;blockingunblocking过程&#34;&gt;blocking/unblocking过程&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_channel/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;如果 G2 的读取速度比 G1 的写入速度慢，那么一段时间之后，channe l的 buffer 会被塞满。当 channel 满了之后 G1 继续往 channel 中发送数据。G1 会 block。基于 golang 的调度模型，暂停的其实是 goroutine，而不是 os 线程。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_channel/5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;如果需要 block G1，G1 会创建一个 sudog，放到 channel 的 &lt;code&gt;sendq&lt;/code&gt; 中，当 channel 的 buffer 有了空间时，G2 会从 &lt;code&gt;sendq&lt;/code&gt; 中 pop 出 &lt;code&gt;sudog&lt;/code&gt;，取出 elem，将 G1 状态变成 &lt;code&gt;runnable&lt;/code&gt;，调度器就可以再次调度 G1 了。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_channel/6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;如果 G2 先运行，这时候 channel 中没有数据，G2 从一个空的 channel 中读取数据，G2 也会 block，和 G1 block 的逻辑相似，G2 也会创建 &lt;code&gt;sudog&lt;/code&gt;，然后放到 &lt;code&gt;recvq&lt;/code&gt; 中。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_channel/7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;当此时 G1 向 channel 发送数据，runtime 会直接将 G1 要发送的数据 copy 到 G2 的栈空间，看起来就好像是 G1 直接将数据发送给了 G2，这个过程叫「direct send」，整个过程 G1 和 G2 都不需要再获取锁和读写 buffer。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_channel/8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;非缓冲 channel 总是「direct send」的，如果 receiver 先运行，sender 直接将数据写入 receiver 的栈空间，如果 sennder 先运行，receiver 直接从 sudog 接收数据。&lt;/p&gt;&lt;h2 id=&#34;向channel发送数据的源码&#34;&gt;向channel发送数据的源码&lt;/h2&gt;&lt;p&gt;发送数据对应的方法是 &lt;code&gt;func chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool&lt;/code&gt;。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;如果向 nil channel 发送数据，会一直block：&lt;/li&gt;&lt;/ol&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;gopark&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;waitReasonChanSendNilChan&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;traceEvGoStop&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unreachable&amp;#34;&lt;/span&gt;)}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;gopark&lt;/code&gt; 表示将当前 goroutine 休眠，但是 unlockf 是 nil，所以 goroutine 会一直休眠。如果所有 goroutine 都处于休眠状态，在 runtime 的 &lt;code&gt;checkdead()&lt;/code&gt; 会检测异常情况, 抛出 &lt;code&gt;all goroutines are asleep - deadlock!&lt;/code&gt;&lt;/p&gt;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;如果 &lt;code&gt;recvq&lt;/code&gt; 中有等待的 sudog：&lt;/li&gt;&lt;/ol&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dequeue&lt;/span&gt;(); &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {    &lt;span style=&#34;color:#75715e&#34;&gt;// Found a waiting receiver. We pass the value we want to send&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// directly to the receiver, bypassing the channel buffer (if any).&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;) }, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里直接将数据复制给 receiver，即上文提到的「direct send」。&lt;/p&gt;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;如果 buffered channel 并且 buffer 有空间：&lt;/li&gt;&lt;/ol&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; {    &lt;span style=&#34;color:#75715e&#34;&gt;// Space is available in the channel buffer. Enqueue the element to send.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;: = &lt;span style=&#34;color:#a6e22e&#34;&gt;chanbuf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendx&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;raceacquire&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)        &lt;span style=&#34;color:#a6e22e&#34;&gt;racerelease&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;typedmemmove&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendx&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendx&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过 &lt;code&gt;qcount&lt;/code&gt; 和 &lt;code&gt;dataqsiz&lt;/code&gt; 属性判断 &lt;code&gt;hchan.buf&lt;/code&gt; 是否有可用空间，如果 buffer 有空间，则将数据 copy 进 buffer。&lt;/p&gt;&lt;ol start=&#34;4&#34;&gt;&lt;li&gt;如果 buffer 满了，或者没开启 buffer，则 block。&lt;/li&gt;&lt;/ol&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Block on the channel. Some receiver will complete our operation for us.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acquireSudog&lt;/span&gt;()&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;// No stack splits between assigning elem and enqueuing mysg&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// on gp.waiting where copystack can find it.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitlink&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isSelect&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waiting&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enqueue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;gopark&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chanparkcommit&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;waitReasonChanSend&lt;/span&gt;,     &lt;span style=&#34;color:#a6e22e&#34;&gt;traceEvGoBlockSend&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;从channel读取数据的源码&#34;&gt;从channel读取数据的源码&lt;/h2&gt;&lt;p&gt;读取数据对应的方法是 &lt;code&gt;func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool)&lt;/code&gt;。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;如果从 nil channel 中接受数据会一直 block。&lt;/li&gt;&lt;/ol&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 9&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;gopark&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;waitReasonChanReceiveNilChan&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;traceEvGoStop&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unreachable&amp;#34;&lt;/span&gt;)}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和向 nil channel 发送数据类似，从 nil channel 接收数据也会一直 block。&lt;/p&gt;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;从 closed 状态的channel接受数据：&lt;/li&gt;&lt;/ol&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 10&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;raceacquire&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;raceaddr&lt;/span&gt;())    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;typedmemclr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;)    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果 buffer 中有数据（&lt;code&gt;if raceenabled&lt;/code&gt;），则返回 buffer 中的数据；如果 buffer 中没数据了，则返回默认值，并且第二个返回参数返回 false。&lt;/p&gt;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;如果 &lt;code&gt;sendq&lt;/code&gt; 中有等待发送的 &lt;code&gt;sudgo&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 11&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dequeue&lt;/span&gt;(); &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {    &lt;span style=&#34;color:#75715e&#34;&gt;// Found a waiting sender. If buffer is size 0, receive value&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// directly from sender. Otherwise, receive from head of queue&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// and add sender&amp;#39;s value to the tail of the queue (both map to&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// the same buffer slot because the queue is full).&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;) }, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;说明队列已满，如果没开启 buffer，则直接从 sender 读取数据。否则，从队列头读取数据，并把 sender 的数据放到队列尾（由于 buffer 是循环队列, 所以队列尾就是刚才读取数据的位置）。&lt;/p&gt;&lt;ol start=&#34;4&#34;&gt;&lt;li&gt;如果队列中有数据&lt;/li&gt;&lt;/ol&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 12&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {    &lt;span style=&#34;color:#75715e&#34;&gt;// Receive directly from queue&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chanbuf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;raceacquire&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)        &lt;span style=&#34;color:#a6e22e&#34;&gt;racerelease&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;typedmemmove&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;typedmemclr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果队列中有数据，则直接从队列中读取数据。&lt;/p&gt;&lt;ol start=&#34;5&#34;&gt;&lt;li&gt;如果队列中没数据，也没有 goroutine 向队列中发送数据&lt;/li&gt;&lt;/ol&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 13&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acquireSudog&lt;/span&gt;()&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;// No stack splits between assigning elem and enqueuing mysg&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// on gp.waiting where copystack can find it.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitlink&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waiting&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isSelect&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enqueue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;gopark&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chanparkcommit&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;waitReasonChanReceive&lt;/span&gt;,     &lt;span style=&#34;color:#a6e22e&#34;&gt;traceEvGoBlockRecv&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果队列中没数据，也没有 goroutine 向队列中发送数据，goroutine 会 block。&lt;/p&gt;&lt;h2 id=&#34;channel是否必须close&#34;&gt;channel是否必须close&lt;/h2&gt;&lt;p&gt;channel 可以不关闭，如果 channel 不再被使用，即使不关闭也会被回收。通常 close channel 会作为 channel 不会再有数据的控制信号，如果接收方不关心 channel 中是否还会有数据，那么没必要主动关闭 channel。可以参考 &lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/pZwdYRGxCIk/qpbHxRRPJdUJ&#34;&gt;Design Question: Channel Closing&lt;/a&gt;。如果要关闭 channel，则最好是由发送方来关闭。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note that it is only necessary to close a channel if the receiver is looking for a close. Closing the channel is a control signal on the channel indicating that no more data follows.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&lt;p&gt;这篇文章描述了 channel 的基本用法和内部的机制，我们从这篇文章了解到了：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;channel 的零值是nil，必须初始化才能使用。&lt;/li&gt;&lt;li&gt;发送的是数据的副本，但是发送指针或引用类型不是 goroutine 安全的，receiver 接收到的数据可能被 sender 修改。&lt;/li&gt;&lt;li&gt;往一个已经 closed 的 channel 中发送数据会导致 panic，往 nil channel 发送数据会 block。从一个 nil channel 中接收数据会 block，从一个被 close 的 channel 中接收数据不会 block，如果队列中有数据，则正常读取，否则立即返元素类型的零值。&lt;/li&gt;&lt;li&gt;&lt;code&gt;select case&lt;/code&gt; 中，如果有多个 case 就绪，那么会随机选择一个 case 执行，select 中的 break 只能跳到 select 这一层，select 中一般配合 label 来使用 break。&lt;/li&gt;&lt;li&gt;channel 使用完可以不关闭, 如果要关闭, 最好是发送方来关闭.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://about.sourcegraph.com/go/understanding-channels-kavya-joshi&#34;&gt;https://about.sourcegraph.com/go/understanding-channels-kavya-joshi&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/gophercon/2017-talks/blob/master/KavyaJoshi-UnderstandingChannels/Kavya%20Joshi%20-%20Understanding%20Channels.pdf&#34;&gt;https://github.com/gophercon/2017-talks/blob/master/KavyaJoshi-UnderstandingChannels/Kavya Joshi - Understanding Channels.pdf&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description>
     </item>
   
     <item>
       <title>golang中的defer, panic和recover</title>
       <link>https://sunpe.github.io/posts/2020-06-18-golang-panic-defer-recover/</link>
       <pubDate>Thu, 18 Jun 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-06-18-golang-panic-defer-recover/</guid>
       <description>&lt;p&gt;Go提供了 &lt;code&gt;defer&lt;/code&gt;, &lt;code&gt;panic&lt;/code&gt; 和 &lt;code&gt;recover&lt;/code&gt; 三个内置方法。其中 &lt;code&gt;panic&lt;/code&gt; 会让程序崩溃，&lt;code&gt;defer&lt;/code&gt; 可以在函数 return 之前执行操作， &lt;code&gt;defer&lt;/code&gt; 和 &lt;code&gt;recover&lt;/code&gt; 配合可以捕获 panic。&lt;/p&gt;&lt;h2 id=&#34;defer&#34;&gt;defer&lt;/h2&gt;&lt;p&gt;&lt;code&gt;defer&lt;/code&gt; 声明的语句可以在函数或方法返回（不管是正常返回或异常返回）之前调用，类似于 Java 里面的 &lt;code&gt;finally&lt;/code&gt;，可以做一些清理的工作，比如关闭文件、 释放资源等操作。&lt;/p&gt;&lt;p&gt;程序 1 展示了 &lt;code&gt;defer&lt;/code&gt; 的一般的用法，通过 &lt;code&gt;defer&lt;/code&gt; 语句保证 &lt;code&gt;src&lt;/code&gt; 和 &lt;code&gt;dst&lt;/code&gt; 最终会被释放。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CopyFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dstName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;srcName&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;written&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {    &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Open&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;srcName&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()    &lt;span style=&#34;color:#a6e22e&#34;&gt;dst&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Create&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dstName&lt;/span&gt;)    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dst&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Copy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dst&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;)}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;defer 语句有三个约定：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;defer 语句参数的值在 defer 语句声明时就已经确定了&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;() {    &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;defer 语句并不是简单的延迟执行，程序 2 中的 &lt;code&gt;a()&lt;/code&gt; 方法执行到 &lt;code&gt;defer fmt.Println(i)&lt;/code&gt; 时，会将i的值 copy 一份和defer语句的声明一起入栈，在 return 之前，声明的 defer 语句出栈执行，所以程序 2 最终打印出i的值是&lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;defer 语句的执行顺序是后进先出（LIFO）&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;() {    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Print&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)    }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;defer 语句的声明和执行可以看作是 defer 语句块的「入栈」和「出栈」操作，先声明的 defer 语句最后执行，所以程序 3 的输出是 &lt;code&gt;3201&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;defer 语句可以读取并修改外部函数命名的返回值（named return values）&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;() (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; }()    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;defer 语句可以在 return 之前执行, 并且可以修改外部函数命名的返回值（named return values）。程序 4 在 return 之前会执行 defer 语句，所以程序 4 最终返回的是 &lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; }()    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但程序 5 最终输出的是 &lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;panic和recover&#34;&gt;panic和recover&lt;/h2&gt;&lt;p&gt;&lt;code&gt;panic&lt;/code&gt; 内置函数可以让让当前 goroutine 崩溃，当函数 F 中调用了或者触发了 &lt;code&gt;panic&lt;/code&gt;，F 会立即终止运行，然后执行 F 中的 &lt;code&gt;defer&lt;/code&gt; 语句，然后 F 返回到调用者 G，G 也会立即终止运行，然后执行 G 中的 &lt;code&gt;defer&lt;/code&gt; 语句，这样一层一层的向上返回，直到顶层的 goroutine（函数调用链的顶层 goroutine，不一定是 main goroutine），然后程序崩溃。&lt;/p&gt;&lt;p&gt;&lt;code&gt;recover&lt;/code&gt; 内置方法可以再次控制 panic 的 goroutine。&lt;code&gt;recover&lt;/code&gt; 方法只有在 &lt;code&gt;defer&lt;/code&gt; 中才有效果。正常情况下，&lt;code&gt;recover&lt;/code&gt; 会返回 &lt;code&gt;nil&lt;/code&gt;，如果当前 goroutine 发生了 panic，&lt;code&gt;recover&lt;/code&gt; 方法会捕获 panic 的值，并且再次获得程序的控制权。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {    &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;()    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Returned normally from f.&amp;#34;&lt;/span&gt;)}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;() {    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; recover(); &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {            &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Recovered in f&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)        }    }()    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Calling g.&amp;#34;&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Returned normally from g.&amp;#34;&lt;/span&gt;)}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Panicking!&amp;#34;&lt;/span&gt;)        panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Defer in g&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Printing in g&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)    &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;程序 6 中 g 的逻辑是如果 &lt;code&gt;i&amp;gt;3&lt;/code&gt;，则 panic，否则递归进行 &lt;code&gt;i+1&lt;/code&gt;，f 在 &lt;code&gt;defer&lt;/code&gt; 中调用了 &lt;code&gt;recover&lt;/code&gt;，并打印了 recover 信息，程序的输出：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Calling g.Printing in g 0Printing in g 1Printing in g 2Printing in g 3Panicking!Defer in g 3Defer in g 2Defer in g 1Defer in g 0Recovered in f 4Returned normally from f&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果去掉f中的 &lt;code&gt;defer&lt;/code&gt; 声明，panic 不会 recover，一层一层的返回 &lt;code&gt;panic&lt;/code&gt;，直到 goroutine 调用栈的顶端，然后程序崩溃。去掉 defer 语句之后的输出:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Calling g.Printing in g 0Printing in g 1Printing in g 2Printing in g 3Panicking!Defer in g 3Defer in g 2Defer in g 1Defer in g 0panic: 4panic PC=0x2a9cd8[stack trace omitted]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;recover&lt;/code&gt; 返回的是 &lt;code&gt;panic&lt;/code&gt; 的值，以下三种情况，&lt;code&gt;recover&lt;/code&gt; 的值是 &lt;code&gt;nil&lt;/code&gt;：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;panic&lt;/code&gt; 的值是 &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;goroutine&lt;/code&gt; 没有 panic&lt;/li&gt;&lt;li&gt;&lt;code&gt;recover&lt;/code&gt; 没有直接在 &lt;code&gt;defer&lt;/code&gt; 中调用&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;前两种情况好理解，第三种情况，如果 &lt;code&gt;recover&lt;/code&gt; 没有在 &lt;code&gt;defer&lt;/code&gt; 中直接调用，那么 &lt;code&gt;recover&lt;/code&gt; 就不能捕获 &lt;code&gt;panic&lt;/code&gt;。下面三段代码，程序 7 中的 &lt;code&gt;recover()&lt;/code&gt; 可以正常捕获 panic，而程序 8 和程序 9 则会 panic。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {    &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;()}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;() {    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;()    panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;)}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;() {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; recover(); &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)    }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {    &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;()}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;() {    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {        &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;()    }()    panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;)}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;() {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; recover(); &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)    }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 程序 9&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {    &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;()}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;() {    &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;()    panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;)}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;() {    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; recover(); &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {            &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)        }    }()}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&lt;p&gt;这篇文章介绍了 golang 内置的 defer、panic 和 recover 函数，我们了解到：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;defer&lt;/code&gt; 声明时参数就确定了，不会随着方法内部代码的执行而变化。&lt;/li&gt;&lt;li&gt;&lt;code&gt;defer&lt;/code&gt; 执行顺序是后进先出（LIFO）。&lt;/li&gt;&lt;li&gt;&lt;code&gt;defer&lt;/code&gt; 可以读取并修改外部函数命名的返回值（named return values）。&lt;/li&gt;&lt;li&gt;&lt;code&gt;recover&lt;/code&gt; 必须在 &lt;code&gt;defer&lt;/code&gt; 中，并且是 &lt;code&gt;defer&lt;/code&gt; 直接调用才能捕获 &lt;code&gt;panic&lt;/code&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://golang.org/ref/spec#Handling_panics&#34;&gt;https://golang.org/ref/spec#Handling_panics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/defer-panic-and-recover&#34;&gt;https://blog.golang.org/defer-panic-and-recover&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description>
     </item>
   
     <item>
       <title>理解 golang 运行时调度</title>
       <link>https://sunpe.github.io/posts/2020-06-05-golang-runtime-schedule/</link>
       <pubDate>Fri, 05 Jun 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-06-05-golang-runtime-schedule/</guid>
       <description>&lt;p&gt;操作系统线程（OS thread）对于 golang 来说太重了。而且最重要的是操作系统（OS）无法基于 golang 模型做出正确的调度。比如，GC的时候要暂停所有的线程（go中对应的是 groutine）， 而且内存要处于一致的状态，这需要等待运行中的线程执行到内存一致状态的点（安全点）。当有许多线程时, 为了达到一致状态, 就需要等待这些可能处于任意状态的线程达到一致状态。Golang 的调度器可以做到仅在已知的内存一致状态的点上进行调度。&lt;/p&gt;&lt;h2 id=&#34;golang调度器&#34;&gt;golang调度器&lt;/h2&gt;&lt;p&gt;目前有3种常见的线程模型，一个是N:1模型，即几个用户级线程运行在一个 os 线程，这种模型的优势是可以非常快的进行上下文切换（context switch），缺点是不能充分利用多核 CPU 的优势；另外一个是 1:1 模型，即一个用户级线程对应一个 os 线程，好处是可以利用多核 CPU 的优势，缺点是上下文切换（Content switch）成本比较高。&lt;/p&gt;&lt;p&gt;Golang采用第三种模型 — M:N，即M个用户级线程（goroutine）运行在 N 个 OS 线程上，这样既可以快速的进行上下文切换（context switch），又可以利用多核 CPU 的优势。&lt;/p&gt;&lt;p&gt;如图1所示，Golang 调度器中主要有三种角色：&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_schedule/1.png&#34; alt=&#34;&#34;&gt;图1&lt;/p&gt;&lt;p&gt;三角形M代表 OS 线程，可以理解为 machine 的缩写，由系统管理和执行，是 runtime 代码中的 M。&lt;/p&gt;&lt;p&gt;圆形 G 代表 goroutine，有自己的栈、计数器（instruction pointer）和其他调度需要的重要信息，像在等待的 channel 等，是 runtime 代码中的 G。&lt;/p&gt;&lt;p&gt;正方形P代表调度上下文（context），可以理解为 Processor（处理单元），P 表示在单个 os 线程上运行 Go 代码，是实现 N:1 到 M:N 调度的关键，是 runtime 代码中的 P。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_schedule/2.png&#34; alt=&#34;&#34;&gt;图2&lt;/p&gt;&lt;p&gt;如图 2 所示，有两个 os 线程（M），每个 M 有一个 context（P），每个 P 运行一个 goroutine（G）。os 线程（M）要执行 goroutine（G），必须要拿到 context（P）。P 的数量可以在程序启动时, 通过环境变量 GOMAXPROCS 或者 runtime.GOMAXPROCS() 设置，默认值是系统的线程数，而且在程序执行期间通常不会变动，任何时刻只有 GOMAXPROCS 数量的的 P 在执行 go 代码。&lt;/p&gt;&lt;p&gt;灰色的 G 表示没在运行但处于就绪状态的 goroutine，这些 goroutine 在 runqueues 队列中排队等待执行。当代码中调用 go 表达式时，新创建的 goroutine 会添加到 runqueues 队列尾，P 会从 runqueues 队列头取出一个 G，并设置好栈和计数器（instruction pointer），然后开始运行 goroutine。为了降低锁的竞争，除了全局的 runqueues，每个 P 都有自己的 runqueue（早期版本的 Golang 调度器只有一个全局的 runqueue，以至于调度的时候经常因为锁而 block）。&lt;/p&gt;&lt;p&gt;为什么要有 P(context)，直接把 runqueue 放到 M 上不是挺好吗？设计 P(context) 的原因是，运行中的 goroutine 如果由于某种原因 block，通过P可以将其移交给其他线程。例如, 当一个系统调用 block 了，也就是 M 被 block 了，这时候需要将 P 从这个 M 上移走，以便 M 可以继续执行其他 P。图 3 中左半部分，M0 执行 G0 时，调用了一个 syscall，而被阻塞了，为了不影响后续 G 的运行，P 将其移交给 M1，M0 继续执行其他 G。当 G0 的 syscall 返回时，M1 尝试获取 P，以便能继续执行 G0，如果获取失败，M1 会将 G0 放到全局的 runqueue 中。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_schedule/3.png&#34; alt=&#34;&#34;&gt;图3&lt;/p&gt;&lt;p&gt;每当P执行完自己的 runqueue 时都会从全局的 runqueue 中获取新的 G，P 也就定时检查全局 runqueue，防止全局 runqueue 上有永远执行不到的 G。如果 Context（P）本地 runqueue 空了，全局的 runqueue 中也没待执行的 G，P 会尝试从别的 P 的 runqueue 队列中窃取（work steal）一半的 groutine，这样就保证了每个 P 都有事做，也就让 M 最大限度的工作。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/golang_schedule/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&lt;p&gt;这篇文章简单描述了 golang 运行时调度，我们了解到：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;golang 线程模型是 M:N 的&lt;/li&gt;&lt;li&gt;M 执行 goroutine 的必要条件是必须获取 processor&lt;/li&gt;&lt;li&gt;如果 goroutine 被阻塞，阻塞的不是 M，而是 processor&lt;/li&gt;&lt;li&gt;每个 P 都有自己的 runqueues，除此之外还有一个全局的 runqueues&lt;/li&gt;&lt;li&gt;P 实现了 work steal&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://morsmachine.dk/go-scheduler&#34;&gt;https://morsmachine.dk/go-scheduler&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description>
     </item>
   
     <item>
       <title>golang 项目结构</title>
       <link>https://sunpe.github.io/posts/2020-05-22-golang-project-struct/</link>
       <pubDate>Fri, 22 May 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-05-22-golang-project-struct/</guid>
       <description>&lt;p&gt;常见的golang代码布局方式通常有扁平化布局和模块化布局。&lt;/p&gt;&lt;h2 id=&#34;扁平化布局&#34;&gt;扁平化布局&lt;/h2&gt;&lt;p&gt;扁平化布局很简单，代码之间不分层，所有代码放在同一个目录。这种布局风格适合比较简单的项目。我们见到的工具包通常就是这种布局，例如 &lt;a href=&#34;https://github.com/pkg/errors&#34;&gt;errors&lt;/a&gt; 项目的结构：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;project||- bench_test.go||-errors.go||-errors_test.go||-example_test.go||-format_test.go||-go113.go||-go113_test.go||-json_test.go||-stack.go||-stack_test.go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;值得注意的是，工具包中尽量不要有第三方依赖，否则，维护工具包中的第三方依赖会很麻烦，也很容易给其他项目带来版本冲突等问题。&lt;/p&gt;&lt;h2 id=&#34;模块化布局&#34;&gt;模块化布局&lt;/h2&gt;&lt;p&gt;项目稍微复杂一些之后，扁平化布局会显得比较混乱，我们通常会按功能将代码放到不同的目录中，也就是模块化的布局方式。从 1.14 版本之后，官方推荐使用 &lt;code&gt;[Go Modules](https://blog.golang.org/using-go-modules)&lt;/code&gt; 管理依赖，项目一般会由 &lt;code&gt;cmd&lt;/code&gt;、 &lt;code&gt;internal&lt;/code&gt;、 &lt;code&gt;pkg&lt;/code&gt;、 &lt;code&gt;vendor&lt;/code&gt; 等目录组成，当然这不是官方建议的项目结构，只是目前比较常见的布局方式。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;project||-- cmd/|    ||    |-- app1/|    |    ||    |    |- main.go|    |    ||    |    |- handler/|    ||    |-- app2/|        ||        |- main.go|        ||        |- handler/||-- internal/|    ||    |-- pkg|    |   ||    |   |-- data|    |   ||    |   |-- log|    ||    |-- router|    ||    |-- service||-- pkg/|    ||    |-- kit||-- vendor/||-- go.mod||-- go.sum&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cmd&#34;&gt;cmd/&lt;/h3&gt;&lt;p&gt;&lt;code&gt;cmd&lt;/code&gt; 目录项目中的可执行程序的入口，主要放置 &lt;code&gt;main()&lt;/code&gt; 函数，每个可执行程序对应一个子文件夹，文件夹应以程序的名称命名，可以在名字后面加字母 &lt;code&gt;d&lt;/code&gt;，表示程序将以守护进程的方式运行。应用程序中必须包含一个 &lt;code&gt;main()&lt;/code&gt; 函数的源文件，即 demo 中的 &lt;code&gt;main.go&lt;/code&gt;，文件名字最好与程序名字一致。&lt;code&gt;cmd&lt;/code&gt; 包可能会导入 &lt;code&gt;internal&lt;/code&gt;、&lt;code&gt;pkg&lt;/code&gt; 或 &lt;code&gt;vendor&lt;/code&gt; 包中的代码。&lt;/p&gt;&lt;h2 id=&#34;internal&#34;&gt;internal/&lt;/h2&gt;&lt;p&gt;&lt;code&gt;internal&lt;/code&gt; 目录是项目私有的代码。 1.4 版本新增了 &lt;a href=&#34;https://golang.org/doc/go1.4#internalpackages&#34;&gt;Internal packages&lt;/a&gt; 特性，&lt;code&gt;internal&lt;/code&gt; 目录中的代码只能被 &lt;code&gt;internal&lt;/code&gt; 目录的父目录下的子目录引用，举个例子 &lt;code&gt;.../a/b/c/internal/d/e/f&lt;/code&gt;  仅仅可以被 &lt;code&gt;.../a/b/c&lt;/code&gt; 下的目录导入，&lt;code&gt;.../a/b/g&lt;/code&gt; 则不允许。除了 &lt;code&gt;internal&lt;/code&gt; 根目录之外，也可以在任何目录下创建 &lt;code&gt;internal&lt;/code&gt; 目录。&lt;/p&gt;&lt;h2 id=&#34;pkg&#34;&gt;pkg/&lt;/h2&gt;&lt;p&gt;放在 &lt;code&gt;pkg&lt;/code&gt; 目录下的代码可以被其他项目直接导入。可以理解为 &lt;code&gt;internal&lt;/code&gt; 目录下的代码是项目的私有代码，而 &lt;code&gt;pkg&lt;/code&gt; 目录下的代码是开放的代码。如果项目中不包含公共的代码，则可以不需要 &lt;code&gt;pkg&lt;/code&gt; 包。而且如果项目足够小，或者项目只是一个工具包，也完全不需要 &lt;code&gt;pkg&lt;/code&gt; 包。&lt;/p&gt;&lt;h3 id=&#34;vendor&#34;&gt;vendor/&lt;/h3&gt;&lt;p&gt;存放项目依赖的目录，通常是依赖管理工具自己来维护。例如, &lt;code&gt;go mod vendor&lt;/code&gt; 命令会将项目的依赖放到 &lt;code&gt;vendor&lt;/code&gt; 目录。&lt;/p&gt;&lt;h3 id=&#34;其他目录&#34;&gt;其他目录&lt;/h3&gt;&lt;p&gt;不同类型的项目通常还包括其他的一些目录，比如服务型项目通常会有一个 &lt;code&gt;api&lt;/code&gt; 目录，web 项目通常会有一个 &lt;code&gt;web&lt;/code&gt; 目录以存放静态资源，工具包类型的项目通常会包含一个 &lt;code&gt;examples&lt;/code&gt; 目录。&lt;/p&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&lt;p&gt;这篇文章简单的描述了常见的 golang 项目布局方式，实际项目中，不一定要按照这两种方式来组织代码结构，一切以实际项目为准。先让代码能跑起来， 再试图让它变得更好，最后再试着让它变得更快。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>死锁条件</title>
       <link>https://sunpe.github.io/posts/2020-04-30-dead-lock/</link>
       <pubDate>Thu, 30 Apr 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-04-30-dead-lock/</guid>
       <description>&lt;p&gt;死锁（deadlock）是指两个进程被相互阻塞，并且一直处于这样的状态。&lt;/p&gt;&lt;p&gt;大部分死锁都和资源有关，按占用方式来看，资源分为两类：可抢占资源和不可抢占资源。可抢占资源（preemptable resource）可以从拥有它的进程中抢占而不会产生任何副作用；不可抢占资源（nonpreemptable resource）是指不能从当前占用它的进程中强行抢占的资源，必须由拥有者主动释放。&lt;/p&gt;&lt;p&gt;Coffman 总结了发生死锁的四个必要条件：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;相互排斥，并发进程同时拥有资源的独占权。&lt;/li&gt;&lt;li&gt;等待条件，并发进程必须同时拥有一个资源，并等待额外的资源。&lt;/li&gt;&lt;li&gt;不可抢占，并发进程拥有的资源只能被该进程释放。&lt;/li&gt;&lt;li&gt;循环等待，一个并发进程（P1）必须等待一系列的其他并发进程（P2）这些并发进程同时也在等待进程（P1）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;死锁发生时，一定同事满足这四个条件，如果其中某一条件不满足，死锁就不会发生。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>数据结构--队列</title>
       <link>https://sunpe.github.io/posts/2020-04-17-data-struct-queue/</link>
       <pubDate>Fri, 17 Apr 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-04-17-data-struct-queue/</guid>
       <description>&lt;p&gt;和栈相似，队列（queue）也是表，所不同的是队列的插入在表的一端进行而删除则在另一端进行。与栈的后进先出（LIFO）不同，队列中的元素特性是先进先出（FIFO）。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/data_struct_queue/1.png&#34; alt=&#34;&#34;&gt;图 1&lt;/p&gt;&lt;p&gt;队列的基本操作：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;入队，在表的末端，也叫队尾（rear），插入一个元素&lt;/li&gt;&lt;li&gt;出队，删除或返回表的开头，也叫队头（front）的元素&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;队列的实现&#34;&gt;队列的实现&lt;/h2&gt;&lt;p&gt;如同栈一样，对于队列而言，任何表的实现都是合法的。对于入队和出队操作，链表和数组的实现都能给出 O(1) 的运行时间。&lt;/p&gt;&lt;h3 id=&#34;队列的数组slice实现&#34;&gt;队列的数组slice实现&lt;/h3&gt;&lt;p&gt;对于队列数据结构，我们保留一个数组 []interface、 队头位置 front、 队尾位置 rear 以及队列中元素的个数 size. 如果有元素 X 入队，可以让 size 和 rear 加 1，然后设置 Queue[rear]=X。如果有元素出队，需要返回 Queue[front]，然后size减1，front加1。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/data_struct_queue/2.png&#34; alt=&#34;&#34;&gt;图 2&lt;/p&gt;&lt;p&gt;通过数组实现队列有一个潜在的问题，经过几次入队和出队操作之后，front 和 rear 会到数组的边界。简单的解决方式是，如果 front 或 rear 到达数组的尾端，就绕到开头。这种方式叫循环数组实现。&lt;/p&gt;&lt;p&gt;通过 slice 实现队列也需要限制 slice 的容量，在 front 和 rear 到达边界时，可以采用和数组同样的逻辑，以免 slice 不断扩容。&lt;/p&gt;&lt;h3 id=&#34;队列的链表实现&#34;&gt;队列的链表实现&lt;/h3&gt;&lt;p&gt;和数组的实现方式类似，我们需要定义一个链表，指向队列头元素的指针 front，指向队列尾元素的指针 rear，以及队列元素个数 size。如果有元素 X 入队，可以将 X 添加到链表的尾部，然后将rear 指向 X。如果元素出对，返回并删除 front 指向的元素，然后将 front 指向 front 的前驱元素。&lt;/p&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;数据结构与算法分析&lt;/li&gt;&lt;/ol&gt;</description>
     </item>
   
     <item>
       <title>数据结构--栈</title>
       <link>https://sunpe.github.io/posts/2020-04-03-data-struct-stack/</link>
       <pubDate>Fri, 03 Apr 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-04-03-data-struct-stack/</guid>
       <description>&lt;p&gt;栈（stack）是限制插入和删除只能在一个位置上进行的表，该位置叫表的末端，或者叫栈顶（top）。由于对栈中所有元素的操作都是在栈顶，所以栈有后进先出（LIFO）的特性。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/data_struct_stack/1.png&#34; alt=&#34;&#34;&gt;图 1&lt;/p&gt;&lt;p&gt;栈的基本操作有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;元素入栈操作 &lt;code&gt;push&lt;/code&gt;&lt;/li&gt;&lt;li&gt;元素出栈操作 &lt;code&gt;pop&lt;/code&gt;&lt;/li&gt;&lt;li&gt;查看栈顶元素 &lt;code&gt;top&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;入栈是指在栈顶插入元素，出栈是指删除栈顶元素。&lt;/p&gt;&lt;h2 id=&#34;栈的实现&#34;&gt;栈的实现&lt;/h2&gt;&lt;h2 id=&#34;通过链表实现&#34;&gt;通过链表实现&lt;/h2&gt;&lt;p&gt;可以使用单链表来实现栈，链表的前端作为栈顶，通过在链表头插入元素来实现 push，删除表头元素来实现 pop，top 操作只是返回链表头部元素的指。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;container/list&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sync&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RWMutex&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt;{        &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(),    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}) {    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Lock&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unlock&lt;/span&gt;()    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PushFront&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;)}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Pop&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{} {    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Lock&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unlock&lt;/span&gt;()    &lt;span style=&#34;color:#a6e22e&#34;&gt;ele&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Front&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Remove&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ele&lt;/span&gt;)}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Top&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{} {    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RLock&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RUnlock&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Front&lt;/span&gt;()}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;通过-slice-实现&#34;&gt;通过 slice 实现&lt;/h3&gt;&lt;p&gt;使用 slice 实现栈比较简单，先声明一个初始容量比较大的 slice，空栈时栈顶 index(top) 可以设置为 -1，有新元素 x 入栈操作，可以将栈顶index(top) 的值加 1，然后设置 stack[top]=x；元素出栈操作，可以先返回 stack[top]，然后将栈顶 index(top) 的值减 1。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sync&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RWMutex&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;   []&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}    &lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;capacity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt;{        &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;:   make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;capacity&lt;/span&gt;),        &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;capacity&lt;/span&gt;,        &lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}) {    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Lock&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unlock&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; {        panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stack over flow&amp;#34;&lt;/span&gt;)    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Pop&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{} {    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Lock&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unlock&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {        panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;empty stack&amp;#34;&lt;/span&gt;)    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;ele&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;]    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ele&lt;/span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Top&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{} {    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RLock&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RUnlock&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {        panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;empty stack&amp;#34;&lt;/span&gt;)    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;]}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&lt;p&gt;栈实现简单，效率很高，通常 push 和 pop 都是 O(1) 的操作。错误检测和线程安全方面的考虑可能会拖慢栈的执行效率，对空栈的 pop 和对满栈的 push 可能都会导致程序异常。在golang中实现栈还有一个问题是，golang目前没有支持泛型（generic）或者类型参数（type params），所以编写通用的数据结构只能使用 interface，这样带来的问题是，无法在数据结构的实现中来保证数据类型的安全，使用时需要多加注意。&lt;/p&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;数据结构与算法分析&lt;/li&gt;&lt;/ol&gt;</description>
     </item>
   
     <item>
       <title>数据结构--列表</title>
       <link>https://sunpe.github.io/posts/2020-03-20-data-struct-list/</link>
       <pubDate>Fri, 20 Mar 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-03-20-data-struct-list/</guid>
       <description>&lt;p&gt;形如 A1, A2, A3, … AN这样的表，表大小是 N，大小为 0 的表叫空表。对于空表之外的表 Ai+1 是 Ai 的后继，Ai-1 (i&amp;gt;=1) 是 Ai 的前驱。A1 是表的第一个元素，AN 是表的最后一个元素，A1 没有前驱元素，AN 也没有后继元素。&lt;/p&gt;&lt;p&gt;表的操作通常有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;查找元素位置的操作&lt;code&gt;find&lt;/code&gt;&lt;/li&gt;&lt;li&gt;返回某个位置上的元素的操作&lt;code&gt;findKth&lt;/code&gt;&lt;/li&gt;&lt;li&gt;插入元素的操作&lt;code&gt;insert&lt;/code&gt;&lt;/li&gt;&lt;li&gt;删除元素的操作&lt;code&gt;delete&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;表的实现&#34;&gt;表的实现&lt;/h2&gt;&lt;h3 id=&#34;通过数组或slice实现&#34;&gt;通过数组或slice实现&lt;/h3&gt;&lt;p&gt;表的所有操作都可以基于数组或 slice 来实现，数组需要指定数组的大小，而 slice 底层数据也是数组，在空间上也有一定的局限性，特别是在处理未知大小的表的情况下。数组实现的表，&lt;code&gt;find&lt;/code&gt; 操作基于实现的不同时间复杂度可能会是 O(N) 或者 O(logN)，&lt;code&gt;findKth&lt;/code&gt; 会是 O(1) 的操作，&lt;code&gt;insert&lt;/code&gt; 和 &lt;code&gt;delete&lt;/code&gt; 操作可能会有很大的开销，比如在表头位置插入新元素或删除表头元素，需要表中的所有元素顺移一位。&lt;/p&gt;&lt;p&gt;所以基于数组实现的表适合于随机读的情况，而不适于随机写的情况。&lt;/p&gt;&lt;h3 id=&#34;链表&#34;&gt;链表&lt;/h3&gt;&lt;p&gt;为了避免 insert 和 delete 的开销，可以让表的元素不连续，链表（linked list）是由一系列不必在内存中连续的结构组成，每个结构包含表的元素和后继元素的指针（Next），表尾元素的 next 指针是 nil。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/data_struct_list/1.png&#34; alt=&#34;&#34;&gt;图 1&lt;/p&gt;&lt;p&gt;这种情况下，insert 和 delete 操作只需要修改 next 指针就可以实现了。比如删除「99」这个元素，只需要将「12」元素的 next 指针指向「37」元素就可以了；要在「99」元素和「37」元素中间插入元素，则需要将「99」元素的 next 指向新的元素，并且将新元素的 next 指向「37」。&lt;/p&gt;&lt;p&gt;有时候需要倒序遍历链表，单链表的方式显得无能为力，然而解决方法却很简单，只需要在链表的元素中添加一个指针域，指向链表元素的前驱即可。这样就形成了双向链表（double linked list）。&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/data_struct_list/2.png&#34; alt=&#34;&#34;&gt;图 2&lt;/p&gt;&lt;p&gt;让链表的最后一个链表元素反过来指向第一个链表元素, 就形成了循环链表.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/data_struct_list/3.png&#34; alt=&#34;&#34;&gt;图 3&lt;/p&gt;&lt;p&gt;同样的, 如果让双向循环链表的最后一个元素的后继指针指向第一个元素, 第一个元素的前驱指针指向最后一个元素, 就形成了双向循环链表.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/data_struct_list/3.png&#34; alt=&#34;&#34;&gt;图 4&lt;/p&gt;&lt;h2 id=&#34;链表实现&#34;&gt;链表实现&lt;/h2&gt;&lt;p&gt;golang 的 &lt;code&gt;container/list/List.go&lt;/code&gt; 提供了一个双向链表的实现，如下是其中的部分代码。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Copyright 2009 The Go Authors. All rights reserved.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Use of this source code is governed by a BSD-style&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// license that can be found in the LICENSE file.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Package list implements a doubly linked list.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// To iterate over a list (where l is a *List):&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//  for e := l.Front(); e != nil; e = e.Next() {&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//      // do something with e.Value&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//  }&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Element is an element of a linked list.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {    &lt;span style=&#34;color:#75715e&#34;&gt;// Next and previous pointers in the doubly-linked list of elements.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// To simplify the implementation, internally a list l is implemented&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// as a ring, such that &amp;amp;l.root is both the next element of the last&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// list element (l.Back()) and the previous element of the first list&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// element (l.Front()).&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// The list to which this element belongs.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// The value stored with this element.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}}&lt;span style=&#34;color:#75715e&#34;&gt;// Next returns the next list element or nil.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;// Prev returns the previous list element or nil.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Prev&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;// List represents a doubly linked list.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The zero value for List is an empty list ready to use.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// sentinel list element, only &amp;amp;root, root.prev, and root.next are used&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// current list length excluding (this) sentinel element&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;// Init initializes or clears list l.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Init&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;// New returns an initialized list.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; new(&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Init&lt;/span&gt;() }&lt;span style=&#34;color:#75715e&#34;&gt;// Len returns the number of elements of list l.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The complexity is O(1).&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Len&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; }&lt;span style=&#34;color:#75715e&#34;&gt;// Front returns the first element of list l or nil if the list is empty.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Front&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;// Back returns the last element of list l or nil if the list is empty.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Back&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;// lazyInit lazily initializes a zero List value.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;lazyInit&lt;/span&gt;() {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {        &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Init&lt;/span&gt;()    }}&lt;span style=&#34;color:#75715e&#34;&gt;// insert inserts e after at, increments l.len, and returns e.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;// insertValue is a convenience wrapper for insert(&amp;amp;Element{Value: v}, at).&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;insertValue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;}, &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;)}&lt;span style=&#34;color:#75715e&#34;&gt;// remove removes e from its list, decrements l.len, and returns e.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// avoid memory leaks&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// avoid memory leaks&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;// move moves e to next to at and returns e.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;// Remove removes e from l if e is an element of list l.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// It returns the element value e.Value.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The element must not be nil.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Remove&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{} {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; {        &lt;span style=&#34;color:#75715e&#34;&gt;// if e.list == l, l must have been initialized when e was inserted&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// in l or l == nil (e is a zero Element) and l.remove will crash&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)    }    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;// PushFront inserts a new element e with value v at the front of list l and returns e.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;PushFront&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lazyInit&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;insertValue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;)}&lt;span style=&#34;color:#75715e&#34;&gt;// PushBack inserts a new element e with value v at the back of list l and returns e.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;PushBack&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; {    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lazyInit&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;insertValue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;)}&lt;span style=&#34;color:#75715e&#34;&gt;// InsertBefore inserts a new element e with value v immediately before mark and returns e.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// If mark is not an element of l, the list is not modified.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The mark must not be nil.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;InsertBefore&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;    }    &lt;span style=&#34;color:#75715e&#34;&gt;// see comment in List.Remove about initialization of l&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;insertValue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;)}&lt;span style=&#34;color:#75715e&#34;&gt;// InsertAfter inserts a new element e with value v immediately after mark and returns e.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// If mark is not an element of l, the list is not modified.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The mark must not be nil.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;InsertAfter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;    }    &lt;span style=&#34;color:#75715e&#34;&gt;// see comment in List.Remove about initialization of l&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;insertValue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt;)}&lt;span style=&#34;color:#75715e&#34;&gt;// MoveToFront moves element e to the front of list l.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// If e is not an element of l, the list is not modified.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The element must not be nil.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;MoveToFront&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;    }    &lt;span style=&#34;color:#75715e&#34;&gt;// see comment in List.Remove about initialization of l&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;)}&lt;span style=&#34;color:#75715e&#34;&gt;// MoveToBack moves element e to the back of list l.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// If e is not an element of l, the list is not modified.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The element must not be nil.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;MoveToBack&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;    }    &lt;span style=&#34;color:#75715e&#34;&gt;// see comment in List.Remove about initialization of l&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;)}&lt;span style=&#34;color:#75715e&#34;&gt;// MoveBefore moves element e to its new position before mark.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// If e or mark is not an element of l, or e == mark, the list is not modified.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The element and mark must not be nil.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;MoveBefore&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;)}&lt;span style=&#34;color:#75715e&#34;&gt;// MoveAfter moves element e to its new position after mark.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// If e or mark is not an element of l, or e == mark, the list is not modified.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The element and mark must not be nil.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;MoveAfter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;) {    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; {        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;    }    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mark&lt;/span&gt;)}&lt;span style=&#34;color:#75715e&#34;&gt;// PushBackList inserts a copy of an other list at the back of list l.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The lists l and other may be the same. They must not be nil.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;PushBackList&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) {    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lazyInit&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Len&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Front&lt;/span&gt;(); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;() {        &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;insertValue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;)    }}&lt;span style=&#34;color:#75715e&#34;&gt;// PushFrontList inserts a copy of an other list at the front of list l.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The lists l and other may be the same. They must not be nil.&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;PushFrontList&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;List&lt;/span&gt;) {    &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lazyInit&lt;/span&gt;()    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Len&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Back&lt;/span&gt;(); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Prev&lt;/span&gt;() {        &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;insertValue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;)    }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;数据结构与算法分析&lt;/li&gt;&lt;/ol&gt;</description>
     </item>
   
     <item>
       <title>使用 Jekyll 和 Git Page 搭建个人博客</title>
       <link>https://sunpe.github.io/posts/2020-02-29-build-blog-with-jekyll/</link>
       <pubDate>Sat, 29 Feb 2020 22:00:00 +0800</pubDate>
       
       <guid>https://sunpe.github.io/posts/2020-02-29-build-blog-with-jekyll/</guid>
       <description>&lt;p&gt;jekyll 是一个简单的静态网站生成器，可以将 markdown 文档或 html 文档转换成一个完整的可发布的静态网站。并且内置 GitHub Pages 支持。&lt;/p&gt;&lt;p&gt;GitHub Pages 是一项静态站点托管服务，直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，可以通过构建过程运行文件，发布网站。目前 github 支持 3 种类型的 GitHub Pages 站点：project，user 和 organization，具体可以参考&lt;a href=&#34;https://help.github.com/en/github/working-with-github-pages/about-github-pages&#34;&gt;github的帮助文档&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;创建git仓库&#34;&gt;创建git仓库&lt;/h2&gt;&lt;p&gt;创建个人博客是 user 类型的 GitHub Pages 站点。首先需要在 github 上创建 repository。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;点击 github 页面右上角的「New repository」选项。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/build_blog_with_jekyll/1.png&#34; alt=&#34;&#34;&gt;图 1&lt;/p&gt;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;输入仓库名称和说明，个人博客的仓库名称必须为 &lt;code&gt;&amp;lt;user&amp;gt;.github.io&lt;/code&gt;。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/build_blog_with_jekyll/2.png&#34; alt=&#34;&#34;&gt;图 2&lt;/p&gt;&lt;ol start=&#34;3&#34;&gt;&lt;li&gt;选择仓库的可见性，一般是「public」。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/build_blog_with_jekyll/3.png&#34; alt=&#34;&#34;&gt;图 3&lt;/p&gt;&lt;ol start=&#34;4&#34;&gt;&lt;li&gt;创建ReadMe文件。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src=&#34;https://sunpe.github.io/images/build_blog_with_jekyll/4.png&#34; alt=&#34;&#34;&gt;图 4&lt;/p&gt;&lt;ol start=&#34;5&#34;&gt;&lt;li&gt;点击「Create repository」按钮，仓库就创建完成。&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;通过jeykll创建github-page&#34;&gt;通过jeykll创建github page&lt;/h2&gt;&lt;p&gt;建议使用 Bundler 安装和运行 Jekyll。Bundler 可管理 &lt;code&gt;Ruby gem&lt;/code&gt; 依赖项，减少 Jekyll 构建错误和阻止环境相关的bug。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;安装 Ruby，可参考&lt;a href=&#34;https://www.ruby-lang.org/en/documentation/installation/&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;&lt;li&gt;安装 Bundler，可参考&lt;a href=&#34;https://bundler.io/&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;&lt;li&gt;安装 jekyll &lt;code&gt;gem install bundler jekyll&lt;/code&gt;&lt;/li&gt;&lt;li&gt;使用jeykll创建站点&lt;code&gt;jekyll new my-awesome-site&lt;/code&gt;。执行完之后在目录下会又一个 &lt;code&gt;my-awesome-site&lt;/code&gt; 目录，包含了最基本的站点文件。其中 &lt;code&gt;_config.yml&lt;/code&gt; 是站点配置文件，&lt;code&gt;_posts&lt;/code&gt;是文章目录。&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;-----||- 404.html|- Gemfile|- _config.yml|- _posts|   |-YYYY-mm-DD-welcome-to-jekyll.markdown|- about.markdown|- index.markdown&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;在 &lt;code&gt;my-awesome-site&lt;/code&gt; 目录使用 &lt;code&gt;jekyll serve&lt;/code&gt; 命令就可以编译并启动一个内置的 server，本地会多一个 &lt;code&gt;_site&lt;/code&gt; 目录，存放的是编译后的站点文件。可以在浏览器输入 &lt;code&gt;localhost:4000&lt;/code&gt; 预览站点了。&lt;/li&gt;&lt;li&gt;将 &lt;code&gt;my-awesome-site&lt;/code&gt; 目录提交到 github 仓库（&lt;code&gt;_site&lt;/code&gt;目录和&lt;code&gt;Gemfile.lock&lt;/code&gt;文件可以不用提交），就可以通过&lt;code&gt;&amp;lt;user&amp;gt;.github.io&lt;/code&gt; 访问页面了。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;发布文章&#34;&gt;发布文章&lt;/h2&gt;&lt;p&gt;jekyll 创建的站点 post 文件名格式为 &lt;code&gt;YEAR-MONTH-DAY-title.md&lt;/code&gt;，post 文件需要添加 matter 头，指定 layout 和其他 meta 数据。将编写好的 post 放到 &lt;code&gt;_post&lt;/code&gt; 文件，重新发布站点，就可以看到新发布的 post 了。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;---layout: posttitle:  &amp;quot;Welcome to Jekyll!&amp;quot;---# Welcome**Hello world**, this is my first Jekyll blog post.I hope you like it!&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;drafts目录&#34;&gt;Drafts目录&lt;/h2&gt;&lt;p&gt;如果 post 没写完，只想保存草稿，可以将 post 文件放在 &lt;code&gt;_drafts&lt;/code&gt; 目录（需要新建），而且文件 title 可以不带日期。可以在 &lt;code&gt;jekyll serve&lt;/code&gt; 或 &lt;code&gt;jekyll build&lt;/code&gt; 命令后添加 &lt;code&gt;--drafts&lt;/code&gt; 参数，来预览草稿。&lt;/p&gt;&lt;h2 id=&#34;更换主题&#34;&gt;更换主题&lt;/h2&gt;&lt;p&gt;通过 &lt;code&gt;jekyll new&lt;/code&gt; 创建的页面默认的主题是 &lt;a href=&#34;https://github.com/jekyll/minima&#34;&gt;Minima&lt;/a&gt; 。另外 jeykll 有大量优质的主题，可以从以下网站获取 jekyll 主题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://jamstackthemes.dev/ssg/jekyll/&#34;&gt;jamstackthemes.dev&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://jekyllthemes.org/&#34;&gt;jekyllthemes.org&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://jekyllthemes.io/&#34;&gt;jekyllthemes.io&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://jekyll-themes.com/&#34;&gt;jekyll-themes.com&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;详细可以参考&lt;a href=&#34;https://jekyllrb.com/docs/themes/g&#34;&gt;jekyll theme文档&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;自定义域名&#34;&gt;自定义域名&lt;/h2&gt;&lt;p&gt;github page 支持自定义域名或子域名。可以再阿里云或腾讯云购买一个自己的域名。可以参考&lt;a href=&#34;https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site&#34;&gt;git page文档&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&#34;https://jekyllrb.com/docs/&#34;&gt;https://jekyllrb.com/docs/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://help.github.com/cn/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll&#34;&gt;https://help.github.com/cn/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description>
     </item>
   
 </channel>
</rss>
